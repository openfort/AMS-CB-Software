
AMS-CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000388c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a7c  08003a7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a84  08003a84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000010  08003a9c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003a9c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adf2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee9  00000000  00000000  0003ae32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00013a9b  00000000  00000000  0003dd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000517b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d0  00000000  00000000  00052a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221ae  00000000  00000000  00053de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf16  00000000  00000000  00075f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceb64  00000000  00000000  00092eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161a10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003074  00000000  00000000  00161a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003a00 	.word	0x08003a00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08003a00 	.word	0x08003a00

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <CAN_convert>:
 *      Author: jansc
 */

#include "CAN_Bus.h"

uint64_t CAN_convert(uint8_t *data){
 80004d0:	b500      	push	{lr}
 80004d2:	4686      	mov	lr, r0
	uint64_t data64 = 0;
	for(uint8_t i=0; i<8; i++){
 80004d4:	2300      	movs	r3, #0
	uint64_t data64 = 0;
 80004d6:	4618      	mov	r0, r3
 80004d8:	4619      	mov	r1, r3
	for(uint8_t i=0; i<8; i++){
 80004da:	e00a      	b.n	80004f2 <CAN_convert+0x22>
		data64 |= data[i]<<(i*8);
 80004dc:	f81e 2003 	ldrb.w	r2, [lr, r3]
 80004e0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80004e4:	fa02 f20c 	lsl.w	r2, r2, ip
 80004e8:	4310      	orrs	r0, r2
 80004ea:	ea41 71e2 	orr.w	r1, r1, r2, asr #31
	for(uint8_t i=0; i<8; i++){
 80004ee:	3301      	adds	r3, #1
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b07      	cmp	r3, #7
 80004f4:	d9f2      	bls.n	80004dc <CAN_convert+0xc>
	}
	return data64;
}
 80004f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004fc <send_CAN>:

HAL_StatusTypeDef send_CAN(uint8_t *TxData){		// 8*Bytes for TxData, LSB first
 80004fc:	b508      	push	{r3, lr}
 80004fe:	4602      	mov	r2, r0
	static uint32_t TxMailbox[20];
	static CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = 0x123;   // Standard ID of the message
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <send_CAN+0x24>)
 8000502:	f240 1323 	movw	r3, #291	; 0x123
 8000506:	600b      	str	r3, [r1, #0]
	TxHeader.DLC = 8;         // Data Length Code (number of bytes in data field)
 8000508:	2308      	movs	r3, #8
 800050a:	610b      	str	r3, [r1, #16]
	TxHeader.IDE = CAN_ID_STD; // Standard ID type
 800050c:	2300      	movs	r3, #0
 800050e:	608b      	str	r3, [r1, #8]
	TxHeader.RTR = CAN_RTR_DATA; // Data frame, not remote frame
 8000510:	60cb      	str	r3, [r1, #12]
	TxHeader.TransmitGlobalTime = DISABLE; // Disable time stamp
 8000512:	750b      	strb	r3, [r1, #20]
    // Transmit CAN message
	//HAL_CAN_WakeUp(&hcan1);
	//HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, (uint32_t *)CAN_TX_MAILBOX0);
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, TxMailbox);
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <send_CAN+0x28>)
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <send_CAN+0x2c>)
 8000518:	f001 f8d9 	bl	80016ce <HAL_CAN_AddTxMessage>
    return status;
}
 800051c:	bd08      	pop	{r3, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c
 8000524:	20000044 	.word	0x20000044
 8000528:	200000ac 	.word	0x200000ac

0800052c <read_CAN>:

uint16_t read_CAN(uint8_t *RxData){			// LSB first
 800052c:	b510      	push	{r4, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	4604      	mov	r4, r0
	CAN_RxHeaderTypeDef RxHeader;
	// Check if a message is received in CAN RX FIFO 0
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000532:	2100      	movs	r1, #0
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <read_CAN+0x4c>)
 8000536:	f001 f9e4 	bl	8001902 <HAL_CAN_GetRxFifoFillLevel>
 800053a:	b130      	cbz	r0, 800054a <read_CAN+0x1e>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800053c:	4623      	mov	r3, r4
 800053e:	aa01      	add	r2, sp, #4
 8000540:	2100      	movs	r1, #0
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <read_CAN+0x4c>)
 8000544:	f001 f938 	bl	80017b8 <HAL_CAN_GetRxMessage>
 8000548:	b138      	cbz	r0, 800055a <read_CAN+0x2e>
		// Process the received message
	    return (uint16_t)(RxHeader.ExtId);
	  }
	}
	// Check if a message is received in CAN RX FIFO 1
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 800054a:	2101      	movs	r1, #1
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <read_CAN+0x4c>)
 800054e:	f001 f9d8 	bl	8001902 <HAL_CAN_GetRxFifoFillLevel>
 8000552:	b928      	cbnz	r0, 8000560 <read_CAN+0x34>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
		// Process the received message
	    return (uint16_t)(RxHeader.ExtId);
	  }
	}
	return 0;
 8000554:	2000      	movs	r0, #0
}
 8000556:	b008      	add	sp, #32
 8000558:	bd10      	pop	{r4, pc}
	    return (uint16_t)(RxHeader.ExtId);
 800055a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800055e:	e7fa      	b.n	8000556 <read_CAN+0x2a>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000560:	4623      	mov	r3, r4
 8000562:	aa01      	add	r2, sp, #4
 8000564:	2100      	movs	r1, #0
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <read_CAN+0x4c>)
 8000568:	f001 f926 	bl	80017b8 <HAL_CAN_GetRxMessage>
 800056c:	b108      	cbz	r0, 8000572 <read_CAN+0x46>
	return 0;
 800056e:	2000      	movs	r0, #0
 8000570:	e7f1      	b.n	8000556 <read_CAN+0x2a>
	    return (uint16_t)(RxHeader.ExtId);
 8000572:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8000576:	e7ee      	b.n	8000556 <read_CAN+0x2a>
 8000578:	200000ac 	.word	0x200000ac

0800057c <delay_1us>:
static const uint8_t CFGAR[] = {0xF9, 0x00, 0xF0, 0xFF, 0x00, 0x00}; // data for CRFA, ADCOPT = 1, REFON = 1, GPIOx = 1
static const uint8_t CFGBR[] = {0x0F, 0x00, 0x00, 0x00, 0x00, 0x00}; // data for CRFB
static const uint8_t RDCV[] = {RDCVA, RDCVB, RDCVC, RDCVD, RDCVE, RDCVF};	// Read Voltages Register
static const uint8_t RDAUX[] = {RDAUXA, RDAUXB, RDAUXC, RDAUXD};

void delay_1us(){	// delay 960ns + pin delay 45ns = 1050ns
 800057c:	b082      	sub	sp, #8
	for(volatile uint32_t i=0; i<5; i++);	// 100ns per cycle
 800057e:	2300      	movs	r3, #0
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	e002      	b.n	800058a <delay_1us+0xe>
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	2b04      	cmp	r3, #4
 800058e:	d9f9      	bls.n	8000584 <delay_1us+0x8>
}
 8000590:	b002      	add	sp, #8
 8000592:	4770      	bx	lr

08000594 <wake_up>:

void wake_up(){
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	b083      	sub	sp, #12
	for(int i=0; i<num_of_clients+2; i++){
 8000598:	2400      	movs	r4, #0
 800059a:	2c03      	cmp	r4, #3
 800059c:	dc0b      	bgt.n	80005b6 <wake_up+0x22>
		GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 800059e:	4d0b      	ldr	r5, [pc, #44]	; (80005cc <wake_up+0x38>)
 80005a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005a4:	61ab      	str	r3, [r5, #24]
		delay_1us();
 80005a6:	f7ff ffe9 	bl	800057c <delay_1us>
		GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 80005aa:	2302      	movs	r3, #2
 80005ac:	61ab      	str	r3, [r5, #24]
		delay_1us();
 80005ae:	f7ff ffe5 	bl	800057c <delay_1us>
	for(int i=0; i<num_of_clients+2; i++){
 80005b2:	3401      	adds	r4, #1
 80005b4:	e7f1      	b.n	800059a <wake_up+0x6>
	}
	for(volatile uint32_t i=0; i<100; i++);	// 100ns per cycle, 10us, communication ready time
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	e002      	b.n	80005c2 <wake_up+0x2e>
 80005bc:	9b01      	ldr	r3, [sp, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	9b01      	ldr	r3, [sp, #4]
 80005c4:	2b63      	cmp	r3, #99	; 0x63
 80005c6:	d9f9      	bls.n	80005bc <wake_up+0x28>
}
 80005c8:	b003      	add	sp, #12
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	48000400 	.word	0x48000400

080005d0 <SPI_Transceive>:

HAL_StatusTypeDef SPI_Transceive(uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b083      	sub	sp, #12
 80005d4:	4604      	mov	r4, r0
 80005d6:	460d      	mov	r5, r1
 80005d8:	4616      	mov	r6, r2
	GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 80005da:	4f09      	ldr	r7, [pc, #36]	; (8000600 <SPI_Transceive+0x30>)
 80005dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005e0:	61bb      	str	r3, [r7, #24]
	delay_1us();
 80005e2:	f7ff ffcb 	bl	800057c <delay_1us>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, 100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4633      	mov	r3, r6
 80005ec:	462a      	mov	r2, r5
 80005ee:	4621      	mov	r1, r4
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <SPI_Transceive+0x34>)
 80005f2:	f002 fbb7 	bl	8002d64 <HAL_SPI_TransmitReceive>
	GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
	return status;
}
 80005fa:	b003      	add	sp, #12
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	bf00      	nop
 8000600:	48000400 	.word	0x48000400
 8000604:	200000d4 	.word	0x200000d4

08000608 <generatePEC>:
	uint16_t dat[] = {0x0001};
    return (uint16_t)(HAL_CRC_Calculate(&hcrc, (uint32_t *)dat, 1)) & 0xFE;
}
*/
// Function to generate 15-bit packet error code
uint16_t generatePEC(uint8_t data[], size_t length) {
 8000608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Initial value of PEC
    uint16_t pec = 0x0010;
    // Characteristic polynomial: x^15 + x^14 + x^10 + x^8 + x^7 + x^4 + x^3 + 1
    for (size_t i = 0; i < length; ++i) {
 800060c:	f04f 0e00 	mov.w	lr, #0
    uint16_t pec = 0x0010;
 8000610:	2310      	movs	r3, #16
    for (size_t i = 0; i < length; ++i) {
 8000612:	e03e      	b.n	8000692 <generatePEC+0x8a>
            for (int bit = 7; bit >= 0; --bit) {
                uint16_t in0 = ((data[i] >> bit) & 0x01) ^ ((pec >> 14) & 0x01);
 8000614:	f810 200e 	ldrb.w	r2, [r0, lr]
 8000618:	fa42 f20c 	asr.w	r2, r2, ip
 800061c:	ea82 3293 	eor.w	r2, r2, r3, lsr #14
                uint16_t in3 = in0 ^ ((pec >> 2) & 0x01);
 8000620:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8000624:	f002 0201 	and.w	r2, r2, #1
 8000628:	4054      	eors	r4, r2
                uint16_t in4 = in0 ^ ((pec >> 3) & 0x01);
 800062a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
 800062e:	4055      	eors	r5, r2
                uint16_t in7 = in0 ^ ((pec >> 6) & 0x01);
 8000630:	f3c3 1680 	ubfx	r6, r3, #6, #1
 8000634:	4056      	eors	r6, r2
                uint16_t in8 = in0 ^ ((pec >> 7) & 0x01);
 8000636:	f3c3 17c0 	ubfx	r7, r3, #7, #1
 800063a:	4057      	eors	r7, r2
                uint16_t in10 = in0 ^ ((pec >> 9) & 0x01);
 800063c:	f3c3 2840 	ubfx	r8, r3, #9, #1
 8000640:	ea82 0808 	eor.w	r8, r2, r8
                uint16_t in14 = in0 ^ ((pec >> 13) & 0x01);
 8000644:	f3c3 3940 	ubfx	r9, r3, #13, #1
 8000648:	ea82 0909 	eor.w	r9, r2, r9
                pec <<= 1;
 800064c:	005b      	lsls	r3, r3, #1
                pec = (pec & 0x3FFF) | (in14 << 14);
 800064e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000652:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
                pec = (pec & 0xFBFF) | (in10 << 10);
 8000656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800065a:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
                pec = (pec & 0xFEFF) | (in8 << 8);
 800065e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000662:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
                pec = (pec & 0xFF7F) | (in7 << 7);
 8000666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800066a:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
                pec = (pec & 0xFFEF) | (in4 << 4);
 800066e:	f023 0310 	bic.w	r3, r3, #16
 8000672:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                pec = (pec & 0xFFF7) | (in3 << 3);
 8000676:	f023 0308 	bic.w	r3, r3, #8
 800067a:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                pec = (pec & 0xFFFE) | (in0 << 0);
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	4313      	orrs	r3, r2
            for (int bit = 7; bit >= 0; --bit) {
 8000684:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000688:	f1bc 0f00 	cmp.w	ip, #0
 800068c:	dac2      	bge.n	8000614 <generatePEC+0xc>
    for (size_t i = 0; i < length; ++i) {
 800068e:	f10e 0e01 	add.w	lr, lr, #1
 8000692:	458e      	cmp	lr, r1
 8000694:	d202      	bcs.n	800069c <generatePEC+0x94>
            for (int bit = 7; bit >= 0; --bit) {
 8000696:	f04f 0c07 	mov.w	ip, #7
 800069a:	e7f5      	b.n	8000688 <generatePEC+0x80>
            }
        }
    pec <<=1;
    return pec;
}
 800069c:	0058      	lsls	r0, r3, #1
 800069e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080006a2 <Command>:


HAL_StatusTypeDef Command(uint16_t command){	// checked
 80006a2:	b530      	push	{r4, r5, lr}
 80006a4:	b085      	sub	sp, #20
	uint8_t tx_data[4];
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 80006a6:	0a05      	lsrs	r5, r0, #8
 80006a8:	f88d 5008 	strb.w	r5, [sp, #8]
	crc_data[1] = command&0xFF;
 80006ac:	b2c4      	uxtb	r4, r0
 80006ae:	f88d 4009 	strb.w	r4, [sp, #9]
	uint16_t crc = generatePEC(crc_data, 2);
 80006b2:	2102      	movs	r1, #2
 80006b4:	a802      	add	r0, sp, #8
 80006b6:	f7ff ffa7 	bl	8000608 <generatePEC>
	tx_data[0] = command>>8;
 80006ba:	f88d 500c 	strb.w	r5, [sp, #12]
	tx_data[1] = command&0xFF;
 80006be:	f88d 400d 	strb.w	r4, [sp, #13]
	tx_data[2] = crc>>8;
 80006c2:	0a03      	lsrs	r3, r0, #8
 80006c4:	f88d 300e 	strb.w	r3, [sp, #14]
	tx_data[3] = crc&0xFF;
 80006c8:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t rx_data[4];
	return SPI_Transceive(tx_data, rx_data, 4);
 80006cc:	2204      	movs	r2, #4
 80006ce:	eb0d 0102 	add.w	r1, sp, r2
 80006d2:	a803      	add	r0, sp, #12
 80006d4:	f7ff ff7c 	bl	80005d0 <SPI_Transceive>
}
 80006d8:	b005      	add	sp, #20
 80006da:	bd30      	pop	{r4, r5, pc}

080006dc <Write_Registergroup>:

HAL_StatusTypeDef Write_Registergroup(uint16_t command, uint8_t *data){		// write data to every single client, data length: 6*num_of_clients
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	460d      	mov	r5, r1
	uint8_t tx_data[4+num_of_clients*8];
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 80006e2:	0a06      	lsrs	r6, r0, #8
 80006e4:	f88d 6018 	strb.w	r6, [sp, #24]
	crc_data[1] = command&0xFF;
 80006e8:	b2c4      	uxtb	r4, r0
 80006ea:	f88d 4019 	strb.w	r4, [sp, #25]
	uint16_t crc = generatePEC(crc_data, 2);
 80006ee:	2102      	movs	r1, #2
 80006f0:	a806      	add	r0, sp, #24
 80006f2:	f7ff ff89 	bl	8000608 <generatePEC>
	tx_data[0] = command>>8;
 80006f6:	f88d 601c 	strb.w	r6, [sp, #28]
	tx_data[1] = command&0xFF;
 80006fa:	f88d 401d 	strb.w	r4, [sp, #29]
	tx_data[2] = crc>>8;
 80006fe:	0a03      	lsrs	r3, r0, #8
 8000700:	f88d 301e 	strb.w	r3, [sp, #30]
	tx_data[3] = crc&0xFF;
 8000704:	f88d 001f 	strb.w	r0, [sp, #31]
	for(uint8_t i=0; i<num_of_clients; i++){
 8000708:	2400      	movs	r4, #0
 800070a:	e023      	b.n	8000754 <Write_Registergroup+0x78>
		for(uint16_t j=0; j<6; j++){
			tx_data[4+i*8+j] = data[i*6+j];
 800070c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000710:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000714:	00e3      	lsls	r3, r4, #3
 8000716:	3304      	adds	r3, #4
 8000718:	4413      	add	r3, r2
 800071a:	5c69      	ldrb	r1, [r5, r1]
 800071c:	3330      	adds	r3, #48	; 0x30
 800071e:	446b      	add	r3, sp
 8000720:	f803 1c14 	strb.w	r1, [r3, #-20]
		for(uint16_t j=0; j<6; j++){
 8000724:	3201      	adds	r2, #1
 8000726:	b292      	uxth	r2, r2
 8000728:	2a05      	cmp	r2, #5
 800072a:	d9ef      	bls.n	800070c <Write_Registergroup+0x30>
		}
		uint16_t crc = generatePEC(&data[i*6], 6);
 800072c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000730:	2106      	movs	r1, #6
 8000732:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8000736:	f7ff ff67 	bl	8000608 <generatePEC>
		tx_data[4+i*8+6] = crc>>8;
 800073a:	00e3      	lsls	r3, r4, #3
 800073c:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8000740:	446a      	add	r2, sp
 8000742:	0a01      	lsrs	r1, r0, #8
 8000744:	f802 1c14 	strb.w	r1, [r2, #-20]
		tx_data[4+i*8+7] = crc&0xFF;
 8000748:	333b      	adds	r3, #59	; 0x3b
 800074a:	446b      	add	r3, sp
 800074c:	f803 0c14 	strb.w	r0, [r3, #-20]
	for(uint8_t i=0; i<num_of_clients; i++){
 8000750:	3401      	adds	r4, #1
 8000752:	b2e4      	uxtb	r4, r4
 8000754:	2c01      	cmp	r4, #1
 8000756:	d801      	bhi.n	800075c <Write_Registergroup+0x80>
		for(uint16_t j=0; j<6; j++){
 8000758:	2200      	movs	r2, #0
 800075a:	e7e5      	b.n	8000728 <Write_Registergroup+0x4c>
	}
	uint8_t rx_data[sizeof(tx_data)];
	return SPI_Transceive(tx_data, rx_data, sizeof(tx_data));
 800075c:	2214      	movs	r2, #20
 800075e:	a901      	add	r1, sp, #4
 8000760:	a807      	add	r0, sp, #28
 8000762:	f7ff ff35 	bl	80005d0 <SPI_Transceive>
}
 8000766:	b00c      	add	sp, #48	; 0x30
 8000768:	bd70      	pop	{r4, r5, r6, pc}

0800076a <Read_Registergroup>:

HAL_StatusTypeDef Read_Registergroup(uint16_t command, uint8_t *buffer){		// checked, read data for every single client, data length: 6*num_of_clients
 800076a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800076e:	b08d      	sub	sp, #52	; 0x34
 8000770:	460c      	mov	r4, r1
	uint8_t tx_data[4+num_of_clients*8];
	for(uint16_t i=0; i<sizeof(tx_data)-4; i++){
 8000772:	2300      	movs	r3, #0
 8000774:	e007      	b.n	8000786 <Read_Registergroup+0x1c>
		tx_data[i+4] = dummy;
 8000776:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800077a:	446a      	add	r2, sp
 800077c:	21aa      	movs	r1, #170	; 0xaa
 800077e:	f802 1c14 	strb.w	r1, [r2, #-20]
	for(uint16_t i=0; i<sizeof(tx_data)-4; i++){
 8000782:	3301      	adds	r3, #1
 8000784:	b29b      	uxth	r3, r3
 8000786:	2b0f      	cmp	r3, #15
 8000788:	d9f5      	bls.n	8000776 <Read_Registergroup+0xc>
	}
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 800078a:	0a06      	lsrs	r6, r0, #8
 800078c:	f88d 6018 	strb.w	r6, [sp, #24]
	crc_data[1] = command&0xFF;
 8000790:	b2c5      	uxtb	r5, r0
 8000792:	f88d 5019 	strb.w	r5, [sp, #25]
	uint16_t crc = generatePEC(crc_data, 2);
 8000796:	2102      	movs	r1, #2
 8000798:	a806      	add	r0, sp, #24
 800079a:	f7ff ff35 	bl	8000608 <generatePEC>
	tx_data[0] = command>>8;
 800079e:	f88d 601c 	strb.w	r6, [sp, #28]
	tx_data[1] = command&0xFF;
 80007a2:	f88d 501d 	strb.w	r5, [sp, #29]
	tx_data[2] = crc>>8;
 80007a6:	0a03      	lsrs	r3, r0, #8
 80007a8:	f88d 301e 	strb.w	r3, [sp, #30]
	tx_data[3] = crc&0xFF;
 80007ac:	f88d 001f 	strb.w	r0, [sp, #31]
	uint8_t rx_data[sizeof(tx_data)];
	HAL_StatusTypeDef status = SPI_Transceive(tx_data, rx_data, sizeof(tx_data));		// read data
 80007b0:	2214      	movs	r2, #20
 80007b2:	a901      	add	r1, sp, #4
 80007b4:	a807      	add	r0, sp, #28
 80007b6:	f7ff ff0b 	bl	80005d0 <SPI_Transceive>
 80007ba:	4680      	mov	r8, r0
	uint16_t not_valid;
	for(uint8_t i=0; i<num_of_clients; i++){
 80007bc:	2700      	movs	r7, #0
 80007be:	e011      	b.n	80007e4 <Read_Registergroup+0x7a>
		crc = generatePEC(&rx_data[4+i*8], 6);
		not_valid = (rx_data[10+i*8]<<8 | rx_data[11+i*8])-crc;		// check crc
		for(uint8_t j=0; j<6; j++){			// write to buffer
			buffer[i*6+j] = rx_data[4+i*8+j];
 80007c0:	18f1      	adds	r1, r6, r3
 80007c2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80007c6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80007ca:	3130      	adds	r1, #48	; 0x30
 80007cc:	4469      	add	r1, sp
 80007ce:	f811 1c2c 	ldrb.w	r1, [r1, #-44]
 80007d2:	54a1      	strb	r1, [r4, r2]
		for(uint8_t j=0; j<6; j++){			// write to buffer
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d9f1      	bls.n	80007c0 <Read_Registergroup+0x56>
		}
		if(not_valid){
 80007dc:	4584      	cmp	ip, r0
 80007de:	d11c      	bne.n	800081a <Read_Registergroup+0xb0>
	for(uint8_t i=0; i<num_of_clients; i++){
 80007e0:	3701      	adds	r7, #1
 80007e2:	b2ff      	uxtb	r7, r7
 80007e4:	2f01      	cmp	r7, #1
 80007e6:	d81a      	bhi.n	800081e <Read_Registergroup+0xb4>
		crc = generatePEC(&rx_data[4+i*8], 6);
 80007e8:	463d      	mov	r5, r7
 80007ea:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80007ee:	f109 0604 	add.w	r6, r9, #4
 80007f2:	2106      	movs	r1, #6
 80007f4:	ab01      	add	r3, sp, #4
 80007f6:	1998      	adds	r0, r3, r6
 80007f8:	f7ff ff06 	bl	8000608 <generatePEC>
		not_valid = (rx_data[10+i*8]<<8 | rx_data[11+i*8])-crc;		// check crc
 80007fc:	f109 033a 	add.w	r3, r9, #58	; 0x3a
 8000800:	446b      	add	r3, sp
 8000802:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000806:	f109 023b 	add.w	r2, r9, #59	; 0x3b
 800080a:	eb0d 0902 	add.w	r9, sp, r2
 800080e:	f819 cc2c 	ldrb.w	ip, [r9, #-44]
 8000812:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
		for(uint8_t j=0; j<6; j++){			// write to buffer
 8000816:	2300      	movs	r3, #0
 8000818:	e7de      	b.n	80007d8 <Read_Registergroup+0x6e>
			return HAL_ERROR;
 800081a:	f04f 0801 	mov.w	r8, #1
		}
	}
	return status;
}
 800081e:	4640      	mov	r0, r8
 8000820:	b00d      	add	sp, #52	; 0x34
 8000822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000828 <Read_Voltages>:

HAL_StatusTypeDef Read_Voltages(uint8_t *buffer){		// checked, num_of_clients * 36
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	4605      	mov	r5, r0
 800082e:	2700      	movs	r7, #0
	HAL_StatusTypeDef status;
	uint8_t sbuffer[num_of_clients*6];		// short buffer for a single transmission
	wake_up();
 8000830:	f7ff feb0 	bl	8000594 <wake_up>
	Command(ADCV);
 8000834:	f44f 7058 	mov.w	r0, #864	; 0x360
 8000838:	f7ff ff33 	bl	80006a2 <Command>
	HAL_Delay(3);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 fddb 	bl	80013f8 <HAL_Delay>
	for(uint8_t i=0; i<6; i++){
 8000842:	463e      	mov	r6, r7
 8000844:	e02b      	b.n	800089e <Read_Voltages+0x76>
				for(uint8_t k=0;k<6; k++){
					buffer[j*36+i*6+k] = sbuffer[j*6+k];
				}
			}
		}else{
			for(uint8_t j=0; j<(num_of_clients*36); j++){
 8000846:	2300      	movs	r3, #0
 8000848:	e022      	b.n	8000890 <Read_Voltages+0x68>
					buffer[j*36+i*6+k] = sbuffer[j*6+k];
 800084a:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800084e:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 8000852:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 8000856:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800085a:	0052      	lsls	r2, r2, #1
 800085c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000860:	440b      	add	r3, r1
 8000862:	f100 0210 	add.w	r2, r0, #16
 8000866:	446a      	add	r2, sp
 8000868:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800086c:	54ea      	strb	r2, [r5, r3]
				for(uint8_t k=0;k<6; k++){
 800086e:	3101      	adds	r1, #1
 8000870:	b2c9      	uxtb	r1, r1
 8000872:	2905      	cmp	r1, #5
 8000874:	d9e9      	bls.n	800084a <Read_Voltages+0x22>
			for(uint8_t j=0; j<num_of_clients; j++){
 8000876:	f10c 0c01 	add.w	ip, ip, #1
 800087a:	fa5f fc8c 	uxtb.w	ip, ip
 800087e:	f1bc 0f01 	cmp.w	ip, #1
 8000882:	d80a      	bhi.n	800089a <Read_Voltages+0x72>
				for(uint8_t k=0;k<6; k++){
 8000884:	4639      	mov	r1, r7
 8000886:	e7f4      	b.n	8000872 <Read_Voltages+0x4a>
				buffer[j] = 0;
 8000888:	2200      	movs	r2, #0
 800088a:	54ea      	strb	r2, [r5, r3]
			for(uint8_t j=0; j<(num_of_clients*36); j++){
 800088c:	3301      	adds	r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b47      	cmp	r3, #71	; 0x47
 8000892:	d9f9      	bls.n	8000888 <Read_Voltages+0x60>
			}
			return status;
		}
	}
	return status;
}
 8000894:	4638      	mov	r0, r7
 8000896:	b005      	add	sp, #20
 8000898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint8_t i=0; i<6; i++){
 800089a:	3601      	adds	r6, #1
 800089c:	b2f6      	uxtb	r6, r6
 800089e:	2e05      	cmp	r6, #5
 80008a0:	d8f8      	bhi.n	8000894 <Read_Voltages+0x6c>
		status = Read_Registergroup(RDCV[i], sbuffer);
 80008a2:	4634      	mov	r4, r6
 80008a4:	a901      	add	r1, sp, #4
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <Read_Voltages+0x90>)
 80008a8:	5d98      	ldrb	r0, [r3, r6]
 80008aa:	f7ff ff5e 	bl	800076a <Read_Registergroup>
		if(status==HAL_OK){
 80008ae:	4607      	mov	r7, r0
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1c8      	bne.n	8000846 <Read_Voltages+0x1e>
			for(uint8_t j=0; j<num_of_clients; j++){
 80008b4:	4684      	mov	ip, r0
 80008b6:	e7e2      	b.n	800087e <Read_Voltages+0x56>
 80008b8:	08003a2c 	.word	0x08003a2c

080008bc <Read_Temp>:

HAL_StatusTypeDef Read_Temp(uint8_t *buffer){		// buffer num_of_clients * 20
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	4605      	mov	r5, r0
 80008c2:	2700      	movs	r7, #0
	HAL_StatusTypeDef status;
	uint8_t sbuffer[num_of_clients*6];		// short buffer for a single transmission
	wake_up();
 80008c4:	f7ff fe66 	bl	8000594 <wake_up>
	Command(ADAX);
 80008c8:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 80008cc:	f7ff fee9 	bl	80006a2 <Command>
	HAL_Delay(3);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 fd91 	bl	80013f8 <HAL_Delay>
	for(uint8_t i=0; i<4; i++){
 80008d6:	463e      	mov	r6, r7
 80008d8:	e047      	b.n	800096a <Read_Temp+0xae>
		status = Read_Registergroup(RDAUX[i], sbuffer);
		if(status==HAL_OK){
			if(i<3){		// Register AUXA - AUXC
				for(uint8_t j=0; j<num_of_clients; j++){		// read 6 Bytes
					for(uint8_t k=0;k<6; k++){
						buffer[j*20+i*6+k] = sbuffer[j*6+k];
 80008da:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80008de:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 80008e2:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
 80008e6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80008f0:	440b      	add	r3, r1
 80008f2:	f100 0210 	add.w	r2, r0, #16
 80008f6:	446a      	add	r2, sp
 80008f8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80008fc:	54ea      	strb	r2, [r5, r3]
					for(uint8_t k=0;k<6; k++){
 80008fe:	3101      	adds	r1, #1
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	2905      	cmp	r1, #5
 8000904:	d9e9      	bls.n	80008da <Read_Temp+0x1e>
				for(uint8_t j=0; j<num_of_clients; j++){		// read 6 Bytes
 8000906:	f10c 0c01 	add.w	ip, ip, #1
 800090a:	fa5f fc8c 	uxtb.w	ip, ip
 800090e:	f1bc 0f01 	cmp.w	ip, #1
 8000912:	d828      	bhi.n	8000966 <Read_Temp+0xaa>
					for(uint8_t k=0;k<6; k++){
 8000914:	4639      	mov	r1, r7
 8000916:	e7f4      	b.n	8000902 <Read_Temp+0x46>
					}
				}
			}else{			// Register AUXD
				for(uint8_t j=0; j<num_of_clients; j++){		// read 2 Bytes
					for(uint8_t k=0;k<2; k++){
						buffer[j*20+i*6+k] = sbuffer[j*6+k];
 8000918:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800091c:	eb01 0c42 	add.w	ip, r1, r2, lsl #1
 8000920:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000924:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000928:	0052      	lsls	r2, r2, #1
 800092a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800092e:	440b      	add	r3, r1
 8000930:	f10c 0210 	add.w	r2, ip, #16
 8000934:	446a      	add	r2, sp
 8000936:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800093a:	54ea      	strb	r2, [r5, r3]
					for(uint8_t k=0;k<2; k++){
 800093c:	3101      	adds	r1, #1
 800093e:	b2c9      	uxtb	r1, r1
 8000940:	2901      	cmp	r1, #1
 8000942:	d9e9      	bls.n	8000918 <Read_Temp+0x5c>
				for(uint8_t j=0; j<num_of_clients; j++){		// read 2 Bytes
 8000944:	3001      	adds	r0, #1
 8000946:	b2c0      	uxtb	r0, r0
 8000948:	2801      	cmp	r0, #1
 800094a:	d80c      	bhi.n	8000966 <Read_Temp+0xaa>
					for(uint8_t k=0;k<2; k++){
 800094c:	4639      	mov	r1, r7
 800094e:	e7f7      	b.n	8000940 <Read_Temp+0x84>
					}
				}
			}
		}else{
			for(uint8_t j=0; j<(num_of_clients*20); j++){
				buffer[j] = 0;
 8000950:	2200      	movs	r2, #0
 8000952:	54ea      	strb	r2, [r5, r3]
			for(uint8_t j=0; j<(num_of_clients*20); j++){
 8000954:	3301      	adds	r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b27      	cmp	r3, #39	; 0x27
 800095a:	d9f9      	bls.n	8000950 <Read_Temp+0x94>
			}
			return status;
		}
	}
	return status;
}
 800095c:	4638      	mov	r0, r7
 800095e:	b005      	add	sp, #20
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(uint8_t j=0; j<(num_of_clients*20); j++){
 8000962:	2300      	movs	r3, #0
 8000964:	e7f8      	b.n	8000958 <Read_Temp+0x9c>
	for(uint8_t i=0; i<4; i++){
 8000966:	3601      	adds	r6, #1
 8000968:	b2f6      	uxtb	r6, r6
 800096a:	2e03      	cmp	r6, #3
 800096c:	d8f6      	bhi.n	800095c <Read_Temp+0xa0>
		status = Read_Registergroup(RDAUX[i], sbuffer);
 800096e:	4634      	mov	r4, r6
 8000970:	a901      	add	r1, sp, #4
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <Read_Temp+0xcc>)
 8000974:	5d98      	ldrb	r0, [r3, r6]
 8000976:	f7ff fef8 	bl	800076a <Read_Registergroup>
		if(status==HAL_OK){
 800097a:	4607      	mov	r7, r0
 800097c:	2800      	cmp	r0, #0
 800097e:	d1f0      	bne.n	8000962 <Read_Temp+0xa6>
			if(i<3){		// Register AUXA - AUXC
 8000980:	2e02      	cmp	r6, #2
 8000982:	d8e1      	bhi.n	8000948 <Read_Temp+0x8c>
				for(uint8_t j=0; j<num_of_clients; j++){		// read 6 Bytes
 8000984:	4684      	mov	ip, r0
 8000986:	e7c2      	b.n	800090e <Read_Temp+0x52>
 8000988:	08003a28 	.word	0x08003a28

0800098c <ADBMS_HW_Init>:

HAL_StatusTypeDef ADBMS_HW_Init(){
 800098c:	b510      	push	{r4, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
	uint8_t config_data_A[num_of_clients*6];
	uint8_t config_data_B[num_of_clients*6];
	for(uint8_t i=0; i<num_of_clients; i++){
 8000990:	2100      	movs	r1, #0
 8000992:	e013      	b.n	80009bc <ADBMS_HW_Init+0x30>
		for(uint8_t j=0; j<6; j++){
			config_data_A[i*6+j] = CFGAR[j];
 8000994:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8000998:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <ADBMS_HW_Init+0xc4>)
 800099e:	5cc0      	ldrb	r0, [r0, r3]
 80009a0:	3230      	adds	r2, #48	; 0x30
 80009a2:	446a      	add	r2, sp
 80009a4:	f802 0c0c 	strb.w	r0, [r2, #-12]
			config_data_B[i*6+j] = CFGBR[j];
 80009a8:	482a      	ldr	r0, [pc, #168]	; (8000a54 <ADBMS_HW_Init+0xc8>)
 80009aa:	5cc0      	ldrb	r0, [r0, r3]
 80009ac:	f802 0c18 	strb.w	r0, [r2, #-24]
		for(uint8_t j=0; j<6; j++){
 80009b0:	3301      	adds	r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	d9ed      	bls.n	8000994 <ADBMS_HW_Init+0x8>
	for(uint8_t i=0; i<num_of_clients; i++){
 80009b8:	3101      	adds	r1, #1
 80009ba:	b2c9      	uxtb	r1, r1
 80009bc:	2901      	cmp	r1, #1
 80009be:	d801      	bhi.n	80009c4 <ADBMS_HW_Init+0x38>
		for(uint8_t j=0; j<6; j++){
 80009c0:	2300      	movs	r3, #0
 80009c2:	e7f7      	b.n	80009b4 <ADBMS_HW_Init+0x28>
		}
	}
	wake_up();
 80009c4:	f7ff fde6 	bl	8000594 <wake_up>
	HAL_Delay(1);		// timeout for stability
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fd15 	bl	80013f8 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_OK;
	status |= Write_Registergroup(WRCFGA, config_data_A);
 80009ce:	a909      	add	r1, sp, #36	; 0x24
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fe83 	bl	80006dc <Write_Registergroup>
 80009d6:	4604      	mov	r4, r0
	status |= Write_Registergroup(WRCFGB, config_data_B);
 80009d8:	a906      	add	r1, sp, #24
 80009da:	2024      	movs	r0, #36	; 0x24
 80009dc:	f7ff fe7e 	bl	80006dc <Write_Registergroup>
 80009e0:	4304      	orrs	r4, r0
 80009e2:	b2e4      	uxtb	r4, r4
	uint8_t read_data_A[num_of_clients*6];
	uint8_t read_data_B[num_of_clients*6];
	status |= Read_Registergroup(RDCFGA, read_data_A);
 80009e4:	a903      	add	r1, sp, #12
 80009e6:	2002      	movs	r0, #2
 80009e8:	f7ff febf 	bl	800076a <Read_Registergroup>
 80009ec:	4320      	orrs	r0, r4
 80009ee:	b2c4      	uxtb	r4, r0
	status |= Read_Registergroup(RDCFGB, read_data_B);
 80009f0:	4669      	mov	r1, sp
 80009f2:	2026      	movs	r0, #38	; 0x26
 80009f4:	f7ff feb9 	bl	800076a <Read_Registergroup>
 80009f8:	4320      	orrs	r0, r4

	if(status != HAL_OK){
 80009fa:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80009fe:	d124      	bne.n	8000a4a <ADBMS_HW_Init+0xbe>
		return status;
	}
	uint8_t not_valid = 0;
	for(uint8_t i=0; i<num_of_clients; i++){
 8000a00:	4604      	mov	r4, r0
 8000a02:	e001      	b.n	8000a08 <ADBMS_HW_Init+0x7c>
 8000a04:	3401      	adds	r4, #1
 8000a06:	b2e4      	uxtb	r4, r4
 8000a08:	2c01      	cmp	r4, #1
 8000a0a:	d81c      	bhi.n	8000a46 <ADBMS_HW_Init+0xba>
		for(uint8_t j=1; j<6; j++){
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2905      	cmp	r1, #5
 8000a10:	d8f8      	bhi.n	8000a04 <ADBMS_HW_Init+0x78>
			not_valid += (config_data_A[i*6+j] - read_data_A[i*6+j]);
 8000a12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000a16:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000a1a:	3330      	adds	r3, #48	; 0x30
 8000a1c:	446b      	add	r3, sp
 8000a1e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000a22:	f813 cc24 	ldrb.w	ip, [r3, #-36]
 8000a26:	eba2 020c 	sub.w	r2, r2, ip
 8000a2a:	fa50 f082 	uxtab	r0, r0, r2
			not_valid += (config_data_B[i*6+j] - read_data_B[i*6+j]);
 8000a2e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a32:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000a36:	1ad2      	subs	r2, r2, r3
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	fa52 f080 	uxtab	r0, r2, r0
 8000a3e:	b2c0      	uxtb	r0, r0
		for(uint8_t j=1; j<6; j++){
 8000a40:	3101      	adds	r1, #1
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	e7e3      	b.n	8000a0e <ADBMS_HW_Init+0x82>
		}
	}
	if(not_valid){
 8000a46:	b100      	cbz	r0, 8000a4a <ADBMS_HW_Init+0xbe>
		return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
	}else{
		return HAL_OK;
	}
}
 8000a4a:	b00c      	add	sp, #48	; 0x30
 8000a4c:	bd10      	pop	{r4, pc}
 8000a4e:	bf00      	nop
 8000a50:	08003a18 	.word	0x08003a18
 8000a54:	08003a20 	.word	0x08003a20

08000a58 <refresh_SDC>:
#include "battery.h"

static uint8_t error_counter = 2;

Battery_StatusTypeDef refresh_SDC(Battery_StatusTypeDef status){
	if (status == BATTERY_OK){
 8000a58:	b928      	cbnz	r0, 8000a66 <refresh_SDC+0xe>
		// SDC OK
		// reset tim7 timeout counter
		TIM7->CNT = 0;
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	490a      	ldr	r1, [pc, #40]	; (8000a88 <refresh_SDC+0x30>)
 8000a5e:	624a      	str	r2, [r1, #36]	; 0x24
		error_counter = 0;
 8000a60:	490a      	ldr	r1, [pc, #40]	; (8000a8c <refresh_SDC+0x34>)
 8000a62:	700a      	strb	r2, [r1, #0]
 8000a64:	4770      	bx	lr
	}else{
		// SDC error
		error_counter++;
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <refresh_SDC+0x34>)
 8000a68:	7813      	ldrb	r3, [r2, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	7013      	strb	r3, [r2, #0]
		if(error_counter >= 3){
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d801      	bhi.n	8000a78 <refresh_SDC+0x20>
			SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
			return BATTERY_ERROR;
		}
	}
	return BATTERY_OK;
 8000a74:	2000      	movs	r0, #0
}
 8000a76:	4770      	bx	lr
			SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
 8000a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a80:	619a      	str	r2, [r3, #24]
			return BATTERY_ERROR;
 8000a82:	2001      	movs	r0, #1
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40001400 	.word	0x40001400
 8000a8c:	20000000 	.word	0x20000000

08000a90 <check_battery>:
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
		return BATTERY_ERROR;
	}
}

Battery_StatusTypeDef check_battery(uint8_t *volt_buffer, uint8_t *temp_buffer){
 8000a90:	b508      	push	{r3, lr}
 8000a92:	4684      	mov	ip, r0
	// check limits
	uint16_t *volt_data = (uint16_t*)(volt_buffer);
	uint16_t *temp_data = (uint16_t*)(temp_buffer);
	Battery_StatusTypeDef status = BATTERY_OK;

	for(uint16_t i = 0; i<(36*num_of_clients)>>1; i++){
 8000a94:	2200      	movs	r2, #0
	Battery_StatusTypeDef status = BATTERY_OK;
 8000a96:	4610      	mov	r0, r2
	for(uint16_t i = 0; i<(36*num_of_clients)>>1; i++){
 8000a98:	e001      	b.n	8000a9e <check_battery+0xe>
 8000a9a:	3201      	adds	r2, #1
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	2a23      	cmp	r2, #35	; 0x23
 8000aa0:	d80c      	bhi.n	8000abc <check_battery+0x2c>
		// check over-, undervoltage
		if(volt_data[i] < 30000 || volt_data[i] > 47000){
 8000aa2:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8000aa6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000aaa:	3b30      	subs	r3, #48	; 0x30
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	f244 2168 	movw	r1, #17000	; 0x4268
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d9f1      	bls.n	8000a9a <check_battery+0xa>
			status |= BATTERY_VOLT_ERROR;
 8000ab6:	f040 0005 	orr.w	r0, r0, #5
 8000aba:	e7ee      	b.n	8000a9a <check_battery+0xa>
		}
	}
	for(uint16_t i = 0; i<(20*num_of_clients)>>1; i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	e001      	b.n	8000ac4 <check_battery+0x34>
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	2b13      	cmp	r3, #19
 8000ac6:	d9fb      	bls.n	8000ac0 <check_battery+0x30>
		if(temp_data[i] < 0){
			status |= BATTERY_TEMP_ERROR;
		}
	}
	return refresh_SDC(status);
 8000ac8:	f7ff ffc6 	bl	8000a58 <refresh_SDC>
}
 8000acc:	bd08      	pop	{r3, pc}
	...

08000ad0 <SDC_reset>:
Battery_StatusTypeDef SDC_reset(){
 8000ad0:	b510      	push	{r4, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
	error_counter = 2;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <SDC_reset+0x58>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status_hw = ADBMS_HW_Init();
 8000ada:	f7ff ff57 	bl	800098c <ADBMS_HW_Init>
 8000ade:	4604      	mov	r4, r0
	status_hw |= Read_Voltages(volt_buffer);
 8000ae0:	a80a      	add	r0, sp, #40	; 0x28
 8000ae2:	f7ff fea1 	bl	8000828 <Read_Voltages>
 8000ae6:	4304      	orrs	r4, r0
 8000ae8:	b2e4      	uxtb	r4, r4
	status_hw |= Read_Temp(temp_buffer);
 8000aea:	4668      	mov	r0, sp
 8000aec:	f7ff fee6 	bl	80008bc <Read_Temp>
 8000af0:	4304      	orrs	r4, r0
 8000af2:	b2e4      	uxtb	r4, r4
	status_hw |= check_battery(volt_buffer, temp_buffer);
 8000af4:	4669      	mov	r1, sp
 8000af6:	a80a      	add	r0, sp, #40	; 0x28
 8000af8:	f7ff ffca 	bl	8000a90 <check_battery>
 8000afc:	4320      	orrs	r0, r4
	if(status_hw == HAL_OK){
 8000afe:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8000b02:	d109      	bne.n	8000b18 <SDC_reset+0x48>
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin;	// SDC high
 8000b04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0c:	619a      	str	r2, [r3, #24]
		TIM7->CNT = 0;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SDC_reset+0x5c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b14:	b01c      	add	sp, #112	; 0x70
 8000b16:	bd10      	pop	{r4, pc}
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
 8000b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b20:	619a      	str	r2, [r3, #24]
		return BATTERY_ERROR;
 8000b22:	2001      	movs	r0, #1
 8000b24:	e7f6      	b.n	8000b14 <SDC_reset+0x44>
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	40001400 	.word	0x40001400

08000b30 <set_relays>:

void set_relays(uint64_t CAN_Data){
	static uint64_t last_value = 0;
	if(last_value != CAN_Data){
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <set_relays+0x58>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4282      	cmpeq	r2, r0
 8000b3c:	d011      	beq.n	8000b62 <set_relays+0x32>
		if(CAN_Data & AIR_positive){
 8000b3e:	f010 0f01 	tst.w	r0, #1
 8000b42:	d012      	beq.n	8000b6a <set_relays+0x3a>
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin;	// high
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <set_relays+0x5c>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	619a      	str	r2, [r3, #24]
		}else{
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin<<16;	// low
		}
		if(CAN_Data & AIR_negative){
 8000b4a:	f010 0f02 	tst.w	r0, #2
 8000b4e:	d011      	beq.n	8000b74 <set_relays+0x44>
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin;	// high
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <set_relays+0x5c>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	619a      	str	r2, [r3, #24]
		}else{
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin<<16;	// low
		}
		if(CAN_Data & Precharge_Relay){
 8000b56:	f010 0f04 	tst.w	r0, #4
 8000b5a:	d010      	beq.n	8000b7e <set_relays+0x4e>
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin;	// high
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <set_relays+0x5c>)
 8000b5e:	2240      	movs	r2, #64	; 0x40
 8000b60:	619a      	str	r2, [r3, #24]
		}else{
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin<<16;	// low
		}
	}
	last_value = CAN_Data;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <set_relays+0x58>)
 8000b64:	6018      	str	r0, [r3, #0]
 8000b66:	6059      	str	r1, [r3, #4]
}
 8000b68:	4770      	bx	lr
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin<<16;	// low
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <set_relays+0x5c>)
 8000b6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b70:	619a      	str	r2, [r3, #24]
 8000b72:	e7ea      	b.n	8000b4a <set_relays+0x1a>
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin<<16;	// low
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <set_relays+0x5c>)
 8000b76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b7a:	619a      	str	r2, [r3, #24]
 8000b7c:	e7eb      	b.n	8000b56 <set_relays+0x26>
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin<<16;	// low
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <set_relays+0x5c>)
 8000b80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	e7ec      	b.n	8000b62 <set_relays+0x32>
 8000b88:	20000098 	.word	0x20000098
 8000b8c:	48000400 	.word	0x48000400

08000b90 <balancing>:

void balancing(void){
	// do some balancing

}
 8000b90:	4770      	bx	lr
	...

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	2400      	movs	r4, #0
 8000b9a:	9403      	str	r4, [sp, #12]
 8000b9c:	9404      	str	r4, [sp, #16]
 8000b9e:	9405      	str	r4, [sp, #20]
 8000ba0:	9406      	str	r4, [sp, #24]
 8000ba2:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <MX_GPIO_Init+0xb0>)
 8000ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba8:	f042 0204 	orr.w	r2, r2, #4
 8000bac:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb0:	f002 0204 	and.w	r2, r2, #4
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc2:	f002 0201 	and.w	r2, r2, #1
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bcc:	f042 0202 	orr.w	r2, r2, #2
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISO_SPI_CS2_Pin|ISO_SPI_CS1_Pin, GPIO_PIN_SET);
 8000bdc:	4d1a      	ldr	r5, [pc, #104]	; (8000c48 <MX_GPIO_Init+0xb4>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	2103      	movs	r1, #3
 8000be2:	4628      	mov	r0, r5
 8000be4:	f000 ffe4 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDC_Out_Pin|Charge_EN_Pin, GPIO_PIN_RESET);
 8000be8:	4622      	mov	r2, r4
 8000bea:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 ffdd 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, User_LED_Pin|Drive_AIR_positive_Pin|Drive_AIR_negative_Pin|Drive_Precharge_Relay_Pin
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	21f8      	movs	r1, #248	; 0xf8
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	f000 ffd8 	bl	8001bb0 <HAL_GPIO_WritePin>
                          |Reserve_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SDC_IN_Pin V_FB_AIR_negative_Pin V_FB_AIR_positive_Pin V_FB_PC_Relay_Pin
                           Charger_Con_Pin */
  GPIO_InitStruct.Pin = SDC_IN_Pin|V_FB_AIR_negative_Pin|V_FB_AIR_positive_Pin|V_FB_PC_Relay_Pin
 8000c00:	f240 431b 	movw	r3, #1051	; 0x41b
 8000c04:	9303      	str	r3, [sp, #12]
                          |Charger_Con_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	a903      	add	r1, sp, #12
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fef6 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISO_SPI_CS2_Pin ISO_SPI_CS1_Pin User_LED_Pin Drive_AIR_positive_Pin
                           Drive_AIR_negative_Pin Drive_Precharge_Relay_Pin Reserve_Pin */
  GPIO_InitStruct.Pin = ISO_SPI_CS2_Pin|ISO_SPI_CS1_Pin|User_LED_Pin|Drive_AIR_positive_Pin
 8000c14:	23fb      	movs	r3, #251	; 0xfb
 8000c16:	9303      	str	r3, [sp, #12]
                          |Drive_AIR_negative_Pin|Drive_Precharge_Relay_Pin|Reserve_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2601      	movs	r6, #1
 8000c1a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	a903      	add	r1, sp, #12
 8000c22:	4628      	mov	r0, r5
 8000c24:	f000 feec 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDC_Out_Pin Charge_EN_Pin */
  GPIO_InitStruct.Pin = SDC_Out_Pin|Charge_EN_Pin;
 8000c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	a903      	add	r1, sp, #12
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 fee1 	bl	8001a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	b008      	add	sp, #32
 8000c40:	bd70      	pop	{r4, r5, r6, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM7)
 8000c4c:	6802      	ldr	r2, [r0, #0]
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d000      	beq.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000c54:	4770      	bx	lr
	GPIOA->BSRR = SDC_Out_Pin<<16;	// SDC low
 8000c56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c5e:	619a      	str	r2, [r3, #24]
}
 8000c60:	e7f8      	b.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c62:	bf00      	nop
 8000c64:	40001400 	.word	0x40001400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
  {
	  SerialMonitor(error, 0x00000000, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	20d0      	movs	r0, #208	; 0xd0
 8000c70:	f000 f9d6 	bl	8001020 <SerialMonitor>
	  HAL_Delay(5000);
 8000c74:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c78:	f000 fbbe 	bl	80013f8 <HAL_Delay>
  while (1)
 8000c7c:	e7f5      	b.n	8000c6a <Error_Handler+0x2>
	...

08000c80 <MX_USART2_UART_Init>:
{
 8000c80:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <MX_USART2_UART_Init+0x30>)
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x34>)
 8000c86:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c8c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c92:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c94:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c96:	220c      	movs	r2, #12
 8000c98:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	f002 fe50 	bl	8003946 <HAL_UART_Init>
 8000ca6:	b900      	cbnz	r0, 8000caa <MX_USART2_UART_Init+0x2a>
}
 8000ca8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000caa:	f7ff ffdd 	bl	8000c68 <Error_Handler>
 8000cae:	bf00      	nop
 8000cb0:	200001d0 	.word	0x200001d0
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_CAN1_Init>:
{
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
  hcan1.Instance = CAN1;
 8000cbc:	481e      	ldr	r0, [pc, #120]	; (8000d38 <MX_CAN1_Init+0x80>)
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_CAN1_Init+0x84>)
 8000cc0:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 32;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cca:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ccc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cd0:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cd2:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cd4:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cd6:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	7682      	strb	r2, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000cdc:	76c2      	strb	r2, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cde:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ce0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ce2:	f000 fb9d 	bl	8001420 <HAL_CAN_Init>
 8000ce6:	bb28      	cbnz	r0, 8000d34 <MX_CAN1_Init+0x7c>
  sFilterConfig.FilterBank = 0; // Use first filter bank
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cec:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cee:	2401      	movs	r4, #1
 8000cf0:	9407      	str	r4, [sp, #28]
  sFilterConfig.FilterIdHigh = ((addr1 >> 13)& 0xFFFF);
 8000cf2:	9300      	str	r3, [sp, #0]
  sFilterConfig.FilterIdLow =  ((addr1 << 3) & 0xFFF8);
 8000cf4:	f44f 528d 	mov.w	r2, #4512	; 0x11a0
 8000cf8:	9201      	str	r2, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8000cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfe:	9202      	str	r2, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0xFFF8;
 8000d00:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8000d04:	9203      	str	r2, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d06:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000d08:	9408      	str	r4, [sp, #32]
  HAL_StatusTypeDef init_status = HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000d0a:	4d0b      	ldr	r5, [pc, #44]	; (8000d38 <MX_CAN1_Init+0x80>)
 8000d0c:	4669      	mov	r1, sp
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f000 fc2c 	bl	800156c <HAL_CAN_ConfigFilter>
  sFilterConfig.FilterBank = 1; // Use second filter bank
 8000d14:	9405      	str	r4, [sp, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000d16:	9404      	str	r4, [sp, #16]
  sFilterConfig.FilterIdHigh = ((addr2 >> 13)& 0xFFFF);
 8000d18:	2309      	movs	r3, #9
 8000d1a:	9300      	str	r3, [sp, #0]
  sFilterConfig.FilterIdLow =  ((addr2 << 3) & 0xFFF8);
 8000d1c:	f641 2328 	movw	r3, #6696	; 0x1a28
 8000d20:	9301      	str	r3, [sp, #4]
  init_status |= HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000d22:	4669      	mov	r1, sp
 8000d24:	4628      	mov	r0, r5
 8000d26:	f000 fc21 	bl	800156c <HAL_CAN_ConfigFilter>
  init_status |= HAL_CAN_Start(&hcan1); //start CAN
 8000d2a:	4628      	mov	r0, r5
 8000d2c:	f000 fca1 	bl	8001672 <HAL_CAN_Start>
}
 8000d30:	b00b      	add	sp, #44	; 0x2c
 8000d32:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000d34:	f7ff ff98 	bl	8000c68 <Error_Handler>
 8000d38:	200000ac 	.word	0x200000ac
 8000d3c:	40006400 	.word	0x40006400

08000d40 <MX_SPI1_Init>:
{
 8000d40:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <MX_SPI1_Init+0x40>)
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI1_Init+0x44>)
 8000d46:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d48:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d4c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d56:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d58:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d62:	2230      	movs	r2, #48	; 0x30
 8000d64:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d66:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d68:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d70:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d72:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d74:	f001 ff87 	bl	8002c86 <HAL_SPI_Init>
 8000d78:	b900      	cbnz	r0, 8000d7c <MX_SPI1_Init+0x3c>
}
 8000d7a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d7c:	f7ff ff74 	bl	8000c68 <Error_Handler>
 8000d80:	200000d4 	.word	0x200000d4
 8000d84:	40013000 	.word	0x40013000

08000d88 <MX_TIM6_Init>:
{
 8000d88:	b500      	push	{lr}
 8000d8a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	9302      	str	r3, [sp, #8]
 8000d92:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_TIM6_Init+0x4c>)
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <MX_TIM6_Init+0x50>)
 8000d98:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 64000;
 8000d9a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000d9e:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 100;
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000daa:	f002 fabd 	bl	8003328 <HAL_TIM_Base_Init>
 8000dae:	b968      	cbnz	r0, 8000dcc <MX_TIM6_Init+0x44>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000db6:	a901      	add	r1, sp, #4
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_TIM6_Init+0x4c>)
 8000dba:	f002 fae5 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	b938      	cbnz	r0, 8000dd0 <MX_TIM6_Init+0x48>
  HAL_TIM_Base_Start(&htim6);		// start timer6 for 10Hz flag
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_TIM6_Init+0x4c>)
 8000dc2:	f002 f93f 	bl	8003044 <HAL_TIM_Base_Start>
}
 8000dc6:	b005      	add	sp, #20
 8000dc8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dcc:	f7ff ff4c 	bl	8000c68 <Error_Handler>
    Error_Handler();
 8000dd0:	f7ff ff4a 	bl	8000c68 <Error_Handler>
 8000dd4:	20000138 	.word	0x20000138
 8000dd8:	40001000 	.word	0x40001000

08000ddc <MX_TIM7_Init>:
{
 8000ddc:	b500      	push	{lr}
 8000dde:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	2300      	movs	r3, #0
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	9303      	str	r3, [sp, #12]
  htim7.Instance = TIM7;
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <MX_TIM7_Init+0x4c>)
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <MX_TIM7_Init+0x50>)
 8000dec:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 64000;
 8000dee:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000df2:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 500;
 8000df6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dfa:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000dfe:	f002 fa93 	bl	8003328 <HAL_TIM_Base_Init>
 8000e02:	b968      	cbnz	r0, 8000e20 <MX_TIM7_Init+0x44>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e0a:	a901      	add	r1, sp, #4
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_TIM7_Init+0x4c>)
 8000e0e:	f002 fabb 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	b938      	cbnz	r0, 8000e24 <MX_TIM7_Init+0x48>
  HAL_TIM_Base_Start_IT(&htim7);		// start timer7 for 500ms timeout
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_TIM7_Init+0x4c>)
 8000e16:	f002 f947 	bl	80030a8 <HAL_TIM_Base_Start_IT>
}
 8000e1a:	b005      	add	sp, #20
 8000e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e20:	f7ff ff22 	bl	8000c68 <Error_Handler>
    Error_Handler();
 8000e24:	f7ff ff20 	bl	8000c68 <Error_Handler>
 8000e28:	20000184 	.word	0x20000184
 8000e2c:	40001400 	.word	0x40001400

08000e30 <SystemClock_Config>:
{
 8000e30:	b500      	push	{lr}
 8000e32:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e34:	2244      	movs	r2, #68	; 0x44
 8000e36:	2100      	movs	r1, #0
 8000e38:	a805      	add	r0, sp, #20
 8000e3a:	f002 fdd9 	bl	80039f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	9303      	str	r3, [sp, #12]
 8000e48:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e4e:	f000 fec5 	bl	8001bdc <HAL_PWREx_ControlVoltageScaling>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d130      	bne.n	8000eb8 <SystemClock_Config+0x88>
  HAL_PWR_EnableBkUpAccess();
 8000e56:	f000 feb1 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e5a:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <SystemClock_Config+0x94>)
 8000e5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e60:	f023 0318 	bic.w	r3, r3, #24
 8000e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e68:	2314      	movs	r3, #20
 8000e6a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e70:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e72:	2200      	movs	r2, #0
 8000e74:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e76:	2260      	movs	r2, #96	; 0x60
 8000e78:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e7e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e80:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000e82:	2320      	movs	r3, #32
 8000e84:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e86:	2307      	movs	r3, #7
 8000e88:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e8a:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8c:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	a805      	add	r0, sp, #20
 8000e90:	f000 ff8e 	bl	8001db0 <HAL_RCC_OscConfig>
 8000e94:	b990      	cbnz	r0, 8000ebc <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ea6:	4668      	mov	r0, sp
 8000ea8:	f001 fab8 	bl	800241c <HAL_RCC_ClockConfig>
 8000eac:	b940      	cbnz	r0, 8000ec0 <SystemClock_Config+0x90>
  HAL_RCCEx_EnableMSIPLLMode();
 8000eae:	f001 fdcd 	bl	8002a4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eb2:	b017      	add	sp, #92	; 0x5c
 8000eb4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000eb8:	f7ff fed6 	bl	8000c68 <Error_Handler>
    Error_Handler();
 8000ebc:	f7ff fed4 	bl	8000c68 <Error_Handler>
    Error_Handler();
 8000ec0:	f7ff fed2 	bl	8000c68 <Error_Handler>
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <main>:
{
 8000ec8:	b530      	push	{r4, r5, lr}
 8000eca:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8000ecc:	f000 fa72 	bl	80013b4 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff ffae 	bl	8000e30 <SystemClock_Config>
  MX_GPIO_Init();
 8000ed4:	f7ff fe5e 	bl	8000b94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ed8:	f7ff fed2 	bl	8000c80 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000edc:	f7ff feec 	bl	8000cb8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000ee0:	f7ff ff2e 	bl	8000d40 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000ee4:	f7ff ff50 	bl	8000d88 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ee8:	f7ff ff78 	bl	8000ddc <MX_TIM7_Init>
  set_relays(0);
 8000eec:	2000      	movs	r0, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f7ff fe1e 	bl	8000b30 <set_relays>
  status = SDC_reset();
 8000ef4:	f7ff fdec 	bl	8000ad0 <SDC_reset>
 8000ef8:	e041      	b.n	8000f7e <main+0xb6>
    		batterie_status = check_battery(volt_buffer, temp_buffer);
 8000efa:	a902      	add	r1, sp, #8
 8000efc:	a80c      	add	r0, sp, #48	; 0x30
 8000efe:	f7ff fdc7 	bl	8000a90 <check_battery>
 8000f02:	e055      	b.n	8000fb0 <main+0xe8>
    		User_LED_GPIO_Port->ODR ^= User_LED_Pin; // Toggle user LED
 8000f04:	4a42      	ldr	r2, [pc, #264]	; (8001010 <main+0x148>)
 8000f06:	6953      	ldr	r3, [r2, #20]
 8000f08:	f083 0308 	eor.w	r3, r3, #8
 8000f0c:	6153      	str	r3, [r2, #20]
    		SerialMonitor(volt, volt_buffer, sizeof(volt_buffer));
 8000f0e:	2248      	movs	r2, #72	; 0x48
 8000f10:	a90c      	add	r1, sp, #48	; 0x30
 8000f12:	20a0      	movs	r0, #160	; 0xa0
 8000f14:	f000 f884 	bl	8001020 <SerialMonitor>
    		SerialMonitor(temp, temp_buffer, sizeof(temp_buffer));
 8000f18:	2228      	movs	r2, #40	; 0x28
 8000f1a:	a902      	add	r1, sp, #8
 8000f1c:	20a1      	movs	r0, #161	; 0xa1
 8000f1e:	f000 f87f 	bl	8001020 <SerialMonitor>
 8000f22:	e047      	b.n	8000fb4 <main+0xec>
    		Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin;	// high
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	619a      	str	r2, [r3, #24]
    		balancing();
 8000f2e:	f7ff fe2f 	bl	8000b90 <balancing>
 8000f32:	e047      	b.n	8000fc4 <main+0xfc>
    		tot_volt += volt_buffer[i];
 8000f34:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8000f38:	4469      	add	r1, sp
 8000f3a:	f811 1c48 	ldrb.w	r1, [r1, #-72]
 8000f3e:	440a      	add	r2, r1
 8000f40:	b292      	uxth	r2, r2
    	for(uint8_t i=0; i<sizeof(volt_buffer); i++){
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b47      	cmp	r3, #71	; 0x47
 8000f48:	d9f4      	bls.n	8000f34 <main+0x6c>
    	can_data[2] = tot_volt&0xFF;
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <main+0x14c>)
 8000f4c:	709a      	strb	r2, [r3, #2]
    	can_data[3] = tot_volt>>8;
 8000f4e:	0a12      	lsrs	r2, r2, #8
 8000f50:	70da      	strb	r2, [r3, #3]
    	for(uint8_t i=0; i<sizeof(temp_buffer); i++){
 8000f52:	2300      	movs	r3, #0
    	uint16_t max_temp = 0;
 8000f54:	4619      	mov	r1, r3
    	for(uint8_t i=0; i<sizeof(temp_buffer); i++){
 8000f56:	e001      	b.n	8000f5c <main+0x94>
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b27      	cmp	r3, #39	; 0x27
 8000f5e:	d808      	bhi.n	8000f72 <main+0xaa>
    		if(temp_buffer[i] > max_temp){
 8000f60:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000f64:	446a      	add	r2, sp
 8000f66:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	d9f4      	bls.n	8000f58 <main+0x90>
    			max_temp = temp_buffer[i];
 8000f6e:	4611      	mov	r1, r2
 8000f70:	e7f2      	b.n	8000f58 <main+0x90>
    	can_data[4] = max_temp&0xFF;
 8000f72:	4828      	ldr	r0, [pc, #160]	; (8001014 <main+0x14c>)
 8000f74:	7101      	strb	r1, [r0, #4]
    	can_data[5] = max_temp>>8;
 8000f76:	0a09      	lsrs	r1, r1, #8
 8000f78:	7141      	strb	r1, [r0, #5]
    	send_CAN(can_data);
 8000f7a:	f7ff fabf 	bl	80004fc <send_CAN>
	GPIOA_Input = GPIOA->IDR;
 8000f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f82:	691c      	ldr	r4, [r3, #16]
    if ((TIM6->SR & TIM_SR_UIF) != 0) {
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <main+0x150>)
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f013 0f01 	tst.w	r3, #1
 8000f8c:	d02c      	beq.n	8000fe8 <main+0x120>
        TIM6->SR &= ~TIM_SR_UIF;	// Clear the overflow flag
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <main+0x150>)
 8000f90:	6913      	ldr	r3, [r2, #16]
 8000f92:	f023 0301 	bic.w	r3, r3, #1
 8000f96:	6113      	str	r3, [r2, #16]
    	status = Read_Voltages(volt_buffer);
 8000f98:	a80c      	add	r0, sp, #48	; 0x30
 8000f9a:	f7ff fc45 	bl	8000828 <Read_Voltages>
 8000f9e:	4605      	mov	r5, r0
    	status |= Read_Temp(temp_buffer);
 8000fa0:	a802      	add	r0, sp, #8
 8000fa2:	f7ff fc8b 	bl	80008bc <Read_Temp>
 8000fa6:	ea45 0300 	orr.w	r3, r5, r0
    	if(status == HAL_OK){
 8000faa:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8000fae:	d0a4      	beq.n	8000efa <main+0x32>
    	if(status == HAL_OK){
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d0a7      	beq.n	8000f04 <main+0x3c>
    	if(GPIOA_Input & Charger_Con_Pin){
 8000fb4:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000fb8:	d1b4      	bne.n	8000f24 <main+0x5c>
    		Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin<<16;	// low
 8000fba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fc2:	619a      	str	r2, [r3, #24]
    	can_data[0] = 0;
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <main+0x14c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	7002      	strb	r2, [r0, #0]
    	can_data[0] |= (GPIOA_Input&V_FB_AIR_positive_Pin) >> (3-0);
 8000fca:	f3c4 01c0 	ubfx	r1, r4, #3, #1
 8000fce:	7001      	strb	r1, [r0, #0]
    	can_data[0] |= (GPIOA_Input&V_FB_AIR_negative_Pin) >> (1-1);
 8000fd0:	f004 0302 	and.w	r3, r4, #2
 8000fd4:	4319      	orrs	r1, r3
 8000fd6:	7001      	strb	r1, [r0, #0]
    	can_data[0] |= (GPIOA_Input&V_FB_PC_Relay_Pin)	   >> (4-2);
 8000fd8:	f3c4 038d 	ubfx	r3, r4, #2, #14
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	7003      	strb	r3, [r0, #0]
    	for(uint8_t i=0; i<sizeof(volt_buffer); i++){
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	e7ae      	b.n	8000f46 <main+0x7e>
    	addres = read_CAN(RxData);
 8000fe8:	4668      	mov	r0, sp
 8000fea:	f7ff fa9f 	bl	800052c <read_CAN>
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <main+0x154>)
 8000ff0:	6018      	str	r0, [r3, #0]
    	if(addres){
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0c2      	beq.n	8000f7e <main+0xb6>
    		SerialMonitor(can, RxData, sizeof(RxData));
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4669      	mov	r1, sp
 8000ffc:	20a2      	movs	r0, #162	; 0xa2
 8000ffe:	f000 f80f 	bl	8001020 <SerialMonitor>
    		set_relays(CAN_convert(RxData));
 8001002:	4668      	mov	r0, sp
 8001004:	f7ff fa64 	bl	80004d0 <CAN_convert>
 8001008:	f7ff fd92 	bl	8000b30 <set_relays>
 800100c:	e7b7      	b.n	8000f7e <main+0xb6>
 800100e:	bf00      	nop
 8001010:	48000400 	.word	0x48000400
 8001014:	200000a4 	.word	0x200000a4
 8001018:	40001000 	.word	0x40001000
 800101c:	200000a0 	.word	0x200000a0

08001020 <SerialMonitor>:
		buffer[i*2] = buffer[i*2+1];
		buffer[i*2+1] = low_byte;
	}
}

void SerialMonitor(Serial_Commmand_type command, uint8_t* data, uint16_t size){
 8001020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
	if((command&0xF0)==0xA0){
 8001028:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800102c:	2ba0      	cmp	r3, #160	; 0xa0
 800102e:	d13b      	bne.n	80010a8 <SerialMonitor+0x88>
 8001030:	4615      	mov	r5, r2
 8001032:	466e      	mov	r6, sp
		uint8_t send_buffer[size];
 8001034:	1dd3      	adds	r3, r2, #7
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 800103c:	469d      	mov	sp, r3
 800103e:	466c      	mov	r4, sp
		for(uint16_t i=0; i<size>>1; i++){	// switch high and low byte per 16 bit value
 8001040:	2300      	movs	r3, #0
 8001042:	e00e      	b.n	8001062 <SerialMonitor+0x42>
			send_buffer[i*2] = data[i*2+1];
 8001044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001048:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800104c:	7852      	ldrb	r2, [r2, #1]
 800104e:	f804 2013 	strb.w	r2, [r4, r3, lsl #1]
			send_buffer[i*2+1] = data[i*2];
 8001052:	f10c 0c01 	add.w	ip, ip, #1
 8001056:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
 800105a:	f804 200c 	strb.w	r2, [r4, ip]
		for(uint16_t i=0; i<size>>1; i++){	// switch high and low byte per 16 bit value
 800105e:	3301      	adds	r3, #1
 8001060:	b29b      	uxth	r3, r3
 8001062:	ebb3 0f55 	cmp.w	r3, r5, lsr #1
 8001066:	d3ed      	bcc.n	8001044 <SerialMonitor+0x24>
		}
		uint8_t start[] = {0xFF, command};
 8001068:	23ff      	movs	r3, #255	; 0xff
 800106a:	703b      	strb	r3, [r7, #0]
 800106c:	7078      	strb	r0, [r7, #1]
		uint8_t stop[] = {0xFF, command|0xB0};
 800106e:	713b      	strb	r3, [r7, #4]
 8001070:	f060 004f 	orn	r0, r0, #79	; 0x4f
 8001074:	7178      	strb	r0, [r7, #5]
		HAL_UART_Transmit(&huart2, start, 2, 100);
 8001076:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80010bc <SerialMonitor+0x9c>
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	2202      	movs	r2, #2
 800107e:	4639      	mov	r1, r7
 8001080:	4640      	mov	r0, r8
 8001082:	f002 fbbc 	bl	80037fe <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, send_buffer, size, 100);
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	462a      	mov	r2, r5
 800108a:	4621      	mov	r1, r4
 800108c:	4640      	mov	r0, r8
 800108e:	f002 fbb6 	bl	80037fe <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, stop, 2, 100);
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	2202      	movs	r2, #2
 8001096:	1d39      	adds	r1, r7, #4
 8001098:	4640      	mov	r0, r8
 800109a:	f002 fbb0 	bl	80037fe <HAL_UART_Transmit>
 800109e:	46b5      	mov	sp, r6
	}else{
		uint8_t code[] = {0xFF, command};
		HAL_UART_Transmit(&huart2, code, 2, 100);
	}
}
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t code[] = {0xFF, command};
 80010a8:	23ff      	movs	r3, #255	; 0xff
 80010aa:	713b      	strb	r3, [r7, #4]
 80010ac:	7178      	strb	r0, [r7, #5]
		HAL_UART_Transmit(&huart2, code, 2, 100);
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	2202      	movs	r2, #2
 80010b2:	1d39      	adds	r1, r7, #4
 80010b4:	4801      	ldr	r0, [pc, #4]	; (80010bc <SerialMonitor+0x9c>)
 80010b6:	f002 fba2 	bl	80037fe <HAL_UART_Transmit>
}
 80010ba:	e7f1      	b.n	80010a0 <SerialMonitor+0x80>
 80010bc:	200001d0 	.word	0x200001d0

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_MspInit+0x2c>)
 80010c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	661a      	str	r2, [r3, #96]	; 0x60
 80010cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ce:	f002 0201 	and.w	r2, r2, #1
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010dc:	659a      	str	r2, [r3, #88]	; 0x58
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e8:	b002      	add	sp, #8
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f0:	b500      	push	{lr}
 80010f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	2300      	movs	r3, #0
 80010f6:	9303      	str	r3, [sp, #12]
 80010f8:	9304      	str	r3, [sp, #16]
 80010fa:	9305      	str	r3, [sp, #20]
 80010fc:	9306      	str	r3, [sp, #24]
 80010fe:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8001100:	6802      	ldr	r2, [r0, #0]
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_CAN_MspInit+0x64>)
 8001104:	429a      	cmp	r2, r3
 8001106:	d002      	beq.n	800110e <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001108:	b009      	add	sp, #36	; 0x24
 800110a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800110e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001112:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001114:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001118:	659a      	str	r2, [r3, #88]	; 0x58
 800111a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800111c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	64da      	str	r2, [r3, #76]	; 0x4c
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RXCAN_Pin|TXCAN_Pin;
 8001136:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800113a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001144:	2309      	movs	r3, #9
 8001146:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	a903      	add	r1, sp, #12
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f000 fc57 	bl	8001a00 <HAL_GPIO_Init>
}
 8001152:	e7d9      	b.n	8001108 <HAL_CAN_MspInit+0x18>
 8001154:	40006400 	.word	0x40006400

08001158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	2300      	movs	r3, #0
 800115e:	9303      	str	r3, [sp, #12]
 8001160:	9304      	str	r3, [sp, #16]
 8001162:	9305      	str	r3, [sp, #20]
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001168:	6802      	ldr	r2, [r0, #0]
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_SPI_MspInit+0x78>)
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001170:	b008      	add	sp, #32
 8001172:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001174:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800117a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800117e:	661a      	str	r2, [r3, #96]	; 0x60
 8001180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001182:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001186:	9201      	str	r2, [sp, #4]
 8001188:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	64da      	str	r2, [r3, #76]	; 0x4c
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ISO_SPI_SCLK_Pin|ISO_SPI_MOSI_Pin;
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2602      	movs	r6, #2
 80011a2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2503      	movs	r5, #3
 80011a6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a8:	2405      	movs	r4, #5
 80011aa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	a903      	add	r1, sp, #12
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fc25 	bl	8001a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ISO_SPI_MISO_Pin;
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(ISO_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80011c4:	a903      	add	r1, sp, #12
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f000 fc19 	bl	8001a00 <HAL_GPIO_Init>
}
 80011ce:	e7cf      	b.n	8001170 <HAL_SPI_MspInit+0x18>
 80011d0:	40013000 	.word	0x40013000

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b500      	push	{lr}
 80011d6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_TIM_Base_MspInit+0x54>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d005      	beq.n	80011ec <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_TIM_Base_MspInit+0x58>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80011e6:	b003      	add	sp, #12
 80011e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_TIM_Base_MspInit+0x5c>)
 80011ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011f0:	f042 0210 	orr.w	r2, r2, #16
 80011f4:	659a      	str	r2, [r3, #88]	; 0x58
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	e7f1      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_TIM_Base_MspInit+0x5c>)
 8001204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001206:	f042 0220 	orr.w	r2, r2, #32
 800120a:	659a      	str	r2, [r3, #88]	; 0x58
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	4611      	mov	r1, r2
 800121a:	2037      	movs	r0, #55	; 0x37
 800121c:	f000 fb96 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001220:	2037      	movs	r0, #55	; 0x37
 8001222:	f000 fbcb 	bl	80019bc <HAL_NVIC_EnableIRQ>
}
 8001226:	e7de      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x12>
 8001228:	40001000 	.word	0x40001000
 800122c:	40001400 	.word	0x40001400
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	b09c      	sub	sp, #112	; 0x70
 8001238:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	2100      	movs	r1, #0
 800123c:	9117      	str	r1, [sp, #92]	; 0x5c
 800123e:	9118      	str	r1, [sp, #96]	; 0x60
 8001240:	9119      	str	r1, [sp, #100]	; 0x64
 8001242:	911a      	str	r1, [sp, #104]	; 0x68
 8001244:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001246:	2254      	movs	r2, #84	; 0x54
 8001248:	a802      	add	r0, sp, #8
 800124a:	f002 fbd1 	bl	80039f0 <memset>
  if(huart->Instance==USART2)
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_UART_MspInit+0x98>)
 8001252:	429a      	cmp	r2, r3
 8001254:	d001      	beq.n	800125a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001256:	b01c      	add	sp, #112	; 0x70
 8001258:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800125a:	2302      	movs	r3, #2
 800125c:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	a802      	add	r0, sp, #8
 8001260:	f001 fa80 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	2800      	cmp	r0, #0
 8001266:	d12e      	bne.n	80012c6 <HAL_UART_MspInit+0x92>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0x9c>)
 800126a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800126c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001270:	659a      	str	r2, [r3, #88]	; 0x58
 8001272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001274:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001278:	9200      	str	r2, [sp, #0]
 800127a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	64da      	str	r2, [r3, #76]	; 0x4c
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800128e:	2304      	movs	r3, #4
 8001290:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2602      	movs	r6, #2
 8001294:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2500      	movs	r5, #0
 8001298:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2403      	movs	r4, #3
 800129c:	941a      	str	r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129e:	2307      	movs	r3, #7
 80012a0:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012a2:	a917      	add	r1, sp, #92	; 0x5c
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f000 fbaa 	bl	8001a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b0:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	941a      	str	r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80012b8:	941b      	str	r4, [sp, #108]	; 0x6c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80012ba:	a917      	add	r1, sp, #92	; 0x5c
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f000 fb9e 	bl	8001a00 <HAL_GPIO_Init>
}
 80012c4:	e7c7      	b.n	8001256 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80012c6:	f7ff fccf 	bl	8000c68 <Error_Handler>
 80012ca:	e7cd      	b.n	8001268 <HAL_UART_MspInit+0x34>
 80012cc:	40004400 	.word	0x40004400
 80012d0:	40021000 	.word	0x40021000

080012d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler>

080012d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler>

080012d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler>

080012da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler>

080012dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler>

080012de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f875 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bd08      	pop	{r3, pc}

080012ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012ee:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM7_IRQHandler+0xc>)
 80012f0:	f001 ff14 	bl	800311c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012f4:	bd08      	pop	{r3, pc}
 80012f6:	bf00      	nop
 80012f8:	20000184 	.word	0x20000184

080012fc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <SystemInit+0x10>)
 80012fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001306:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001314:	f7ff fff2 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	; (8001350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	; (800135c <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133e:	f002 fb33 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001342:	f7ff fdc1 	bl	8000ec8 <main>

08001346 <LoopForever>:

LoopForever:
    b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001348:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001354:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 8001358:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800135c:	20000258 	.word	0x20000258

08001360 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_IRQHandler>
	...

08001364 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_InitTick+0x44>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b90b      	cbnz	r3, 800136e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800136a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800136c:	4770      	bx	lr
{
 800136e:	b510      	push	{r4, lr}
 8001370:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001376:	fbb0 f3f3 	udiv	r3, r0, r3
 800137a:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_InitTick+0x48>)
 800137c:	6810      	ldr	r0, [r2, #0]
 800137e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001382:	f000 fb29 	bl	80019d8 <HAL_SYSTICK_Config>
 8001386:	b968      	cbnz	r0, 80013a4 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001388:	2c0f      	cmp	r4, #15
 800138a:	d901      	bls.n	8001390 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800138c:	2001      	movs	r0, #1
 800138e:	e00a      	b.n	80013a6 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	4621      	mov	r1, r4
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 fad8 	bl	800194c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_InitTick+0x4c>)
 800139e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a0:	2000      	movs	r0, #0
 80013a2:	e000      	b.n	80013a6 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80013a4:	2001      	movs	r0, #1
}
 80013a6:	bd10      	pop	{r4, pc}
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004
 80013b0:	2000000c 	.word	0x2000000c

080013b4 <HAL_Init>:
{
 80013b4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b6:	2003      	movs	r0, #3
 80013b8:	f000 fab6 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ffd1 	bl	8001364 <HAL_InitTick>
 80013c2:	b110      	cbz	r0, 80013ca <HAL_Init+0x16>
    status = HAL_ERROR;
 80013c4:	2401      	movs	r4, #1
}
 80013c6:	4620      	mov	r0, r4
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	4604      	mov	r4, r0
    HAL_MspInit();
 80013cc:	f7ff fe78 	bl	80010c0 <HAL_MspInit>
 80013d0:	e7f9      	b.n	80013c6 <HAL_Init+0x12>
	...

080013d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_IncTick+0x10>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <HAL_IncTick+0x14>)
 80013da:	6811      	ldr	r1, [r2, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000254 	.word	0x20000254

080013ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013ec:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <HAL_GetTick+0x8>)
 80013ee:	6818      	ldr	r0, [r3, #0]
}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000254 	.word	0x20000254

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fff6 	bl	80013ec <HAL_GetTick>
 8001400:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001406:	d002      	beq.n	800140e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_Delay+0x24>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140e:	f7ff ffed 	bl	80013ec <HAL_GetTick>
 8001412:	1b40      	subs	r0, r0, r5
 8001414:	42a0      	cmp	r0, r4
 8001416:	d3fa      	bcc.n	800140e <HAL_Delay+0x16>
  {
  }
}
 8001418:	bd38      	pop	{r3, r4, r5, pc}
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008

08001420 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001420:	2800      	cmp	r0, #0
 8001422:	f000 80a1 	beq.w	8001568 <HAL_CAN_Init+0x148>
{
 8001426:	b538      	push	{r3, r4, r5, lr}
 8001428:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800142a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800142e:	b1d3      	cbz	r3, 8001466 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001430:	6822      	ldr	r2, [r4, #0]
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143a:	f7ff ffd7 	bl	80013ec <HAL_GetTick>
 800143e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	f012 0f01 	tst.w	r2, #1
 8001448:	d110      	bne.n	800146c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144a:	f7ff ffcf 	bl	80013ec <HAL_GetTick>
 800144e:	1b40      	subs	r0, r0, r5
 8001450:	280a      	cmp	r0, #10
 8001452:	d9f5      	bls.n	8001440 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145a:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800145c:	2305      	movs	r3, #5
 800145e:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001462:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001464:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001466:	f7ff fe43 	bl	80010f0 <HAL_CAN_MspInit>
 800146a:	e7e1      	b.n	8001430 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f022 0202 	bic.w	r2, r2, #2
 8001472:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001474:	f7ff ffba 	bl	80013ec <HAL_GetTick>
 8001478:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	f012 0f02 	tst.w	r2, #2
 8001482:	d00d      	beq.n	80014a0 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001484:	f7ff ffb2 	bl	80013ec <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	280a      	cmp	r0, #10
 800148c:	d9f5      	bls.n	800147a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800148e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001496:	2305      	movs	r3, #5
 8001498:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
 800149e:	e7e1      	b.n	8001464 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014a0:	7e22      	ldrb	r2, [r4, #24]
 80014a2:	2a01      	cmp	r2, #1
 80014a4:	d03d      	beq.n	8001522 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ac:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80014ae:	7e63      	ldrb	r3, [r4, #25]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d03b      	beq.n	800152c <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	6813      	ldr	r3, [r2, #0]
 80014b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014bc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014be:	7ea3      	ldrb	r3, [r4, #26]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d039      	beq.n	8001538 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	f023 0320 	bic.w	r3, r3, #32
 80014cc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ce:	7ee3      	ldrb	r3, [r4, #27]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d037      	beq.n	8001544 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014de:	7f23      	ldrb	r3, [r4, #28]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d035      	beq.n	8001550 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f023 0308 	bic.w	r3, r3, #8
 80014ec:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014ee:	7f63      	ldrb	r3, [r4, #29]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d033      	beq.n	800155c <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014fe:	68a3      	ldr	r3, [r4, #8]
 8001500:	68e2      	ldr	r2, [r4, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	6922      	ldr	r2, [r4, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	6962      	ldr	r2, [r4, #20]
 800150a:	4313      	orrs	r3, r2
 800150c:	6862      	ldr	r2, [r4, #4]
 800150e:	3a01      	subs	r2, #1
 8001510:	6821      	ldr	r1, [r4, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001516:	2000      	movs	r0, #0
 8001518:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800151a:	2301      	movs	r3, #1
 800151c:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001520:	e7a0      	b.n	8001464 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e7c0      	b.n	80014ae <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800152c:	6822      	ldr	r2, [r4, #0]
 800152e:	6813      	ldr	r3, [r2, #0]
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e7c2      	b.n	80014be <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e7c4      	b.n	80014ce <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f023 0310 	bic.w	r3, r3, #16
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e7c6      	b.n	80014de <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001550:	6822      	ldr	r2, [r4, #0]
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e7c8      	b.n	80014ee <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800155c:	6822      	ldr	r2, [r4, #0]
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e7ca      	b.n	80014fe <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
}
 800156a:	4770      	bx	lr

0800156c <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800156c:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800156e:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001572:	3b01      	subs	r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d905      	bls.n	8001586 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800157a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
  }
}
 8001584:	4770      	bx	lr
{
 8001586:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001588:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001594:	694b      	ldr	r3, [r1, #20]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2001      	movs	r0, #1
 800159c:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015a0:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 80015a4:	ea6f 0c03 	mvn.w	ip, r3
 80015a8:	ea20 0003 	bic.w	r0, r0, r3
 80015ac:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015b0:	69c8      	ldr	r0, [r1, #28]
 80015b2:	b9b0      	cbnz	r0, 80015e2 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015b4:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 80015b8:	ea0c 0000 	and.w	r0, ip, r0
 80015bc:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c0:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c4:	68cd      	ldr	r5, [r1, #12]
 80015c6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ca:	3048      	adds	r0, #72	; 0x48
 80015cc:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015d0:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015d2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d4:	688d      	ldr	r5, [r1, #8]
 80015d6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015da:	3048      	adds	r0, #72	; 0x48
 80015dc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80015e0:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015e2:	69c8      	ldr	r0, [r1, #28]
 80015e4:	2801      	cmp	r0, #1
 80015e6:	d01b      	beq.n	8001620 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015e8:	6988      	ldr	r0, [r1, #24]
 80015ea:	bb80      	cbnz	r0, 800164e <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80015f0:	ea0c 0000 	and.w	r0, ip, r0
 80015f4:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015f8:	6908      	ldr	r0, [r1, #16]
 80015fa:	bb70      	cbnz	r0, 800165a <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015fc:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8001600:	ea0c 0000 	and.w	r0, ip, r0
 8001604:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001608:	6a09      	ldr	r1, [r1, #32]
 800160a:	2901      	cmp	r1, #1
 800160c:	d02b      	beq.n	8001666 <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800160e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 800161a:	2000      	movs	r0, #0
}
 800161c:	bc30      	pop	{r4, r5}
 800161e:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001620:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8001624:	4318      	orrs	r0, r3
 8001626:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800162a:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800162c:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800162e:	680d      	ldr	r5, [r1, #0]
 8001630:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001634:	3048      	adds	r0, #72	; 0x48
 8001636:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800163a:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800163c:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800163e:	688d      	ldr	r5, [r1, #8]
 8001640:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001644:	3048      	adds	r0, #72	; 0x48
 8001646:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800164a:	6044      	str	r4, [r0, #4]
 800164c:	e7cc      	b.n	80015e8 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800164e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8001652:	4318      	orrs	r0, r3
 8001654:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8001658:	e7ce      	b.n	80015f8 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800165a:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 800165e:	4318      	orrs	r0, r3
 8001660:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8001664:	e7d0      	b.n	8001608 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001666:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800166a:	430b      	orrs	r3, r1
 800166c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8001670:	e7cd      	b.n	800160e <HAL_CAN_ConfigFilter+0xa2>

08001672 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001672:	b570      	push	{r4, r5, r6, lr}
 8001674:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001676:	f890 5020 	ldrb.w	r5, [r0, #32]
 800167a:	b2ed      	uxtb	r5, r5
 800167c:	2d01      	cmp	r5, #1
 800167e:	d006      	beq.n	800168e <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001680:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001686:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001688:	2501      	movs	r5, #1
  }
}
 800168a:	4628      	mov	r0, r5
 800168c:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 800168e:	2302      	movs	r3, #2
 8001690:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001694:	6802      	ldr	r2, [r0, #0]
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800169e:	f7ff fea5 	bl	80013ec <HAL_GetTick>
 80016a2:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f013 0f01 	tst.w	r3, #1
 80016ac:	d00c      	beq.n	80016c8 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ae:	f7ff fe9d 	bl	80013ec <HAL_GetTick>
 80016b2:	1b83      	subs	r3, r0, r6
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	d9f5      	bls.n	80016a4 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016be:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80016c0:	2305      	movs	r3, #5
 80016c2:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80016c6:	e7e0      	b.n	800168a <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016c8:	2500      	movs	r5, #0
 80016ca:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80016cc:	e7dd      	b.n	800168a <HAL_CAN_Start+0x18>

080016ce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016ce:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d0:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016d4:	6804      	ldr	r4, [r0, #0]
 80016d6:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80016dc:	fa5f fc8c 	uxtb.w	ip, ip
 80016e0:	f1bc 0f01 	cmp.w	ip, #1
 80016e4:	d862      	bhi.n	80017ac <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016e6:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80016ea:	d059      	beq.n	80017a0 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016ec:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016f0:	2401      	movs	r4, #1
 80016f2:	fa04 f40c 	lsl.w	r4, r4, ip
 80016f6:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016f8:	688b      	ldr	r3, [r1, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d13d      	bne.n	800177a <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016fe:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8001700:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001702:	6804      	ldr	r4, [r0, #0]
 8001704:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8001708:	f10c 0318 	add.w	r3, ip, #24
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001710:	6803      	ldr	r3, [r0, #0]
 8001712:	690c      	ldr	r4, [r1, #16]
 8001714:	f10c 0e18 	add.w	lr, ip, #24
 8001718:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800171c:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800171e:	7d0b      	ldrb	r3, [r1, #20]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d035      	beq.n	8001790 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001724:	79d1      	ldrb	r1, [r2, #7]
 8001726:	7993      	ldrb	r3, [r2, #6]
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800172e:	7951      	ldrb	r1, [r2, #5]
 8001730:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001734:	7914      	ldrb	r4, [r2, #4]
 8001736:	6801      	ldr	r1, [r0, #0]
 8001738:	4323      	orrs	r3, r4
 800173a:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 800173e:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001742:	78d1      	ldrb	r1, [r2, #3]
 8001744:	7893      	ldrb	r3, [r2, #2]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800174c:	7851      	ldrb	r1, [r2, #1]
 800174e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001752:	7811      	ldrb	r1, [r2, #0]
 8001754:	6802      	ldr	r2, [r0, #0]
 8001756:	430b      	orrs	r3, r1
 8001758:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800175c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001760:	6802      	ldr	r2, [r0, #0]
 8001762:	f10c 0c18 	add.w	ip, ip, #24
 8001766:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800176a:	f852 300c 	ldr.w	r3, [r2, ip]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8001776:	2000      	movs	r0, #0
 8001778:	e01d      	b.n	80017b6 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800177a:	684c      	ldr	r4, [r1, #4]
 800177c:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8001780:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8001782:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001784:	f10c 0418 	add.w	r4, ip, #24
 8001788:	0124      	lsls	r4, r4, #4
 800178a:	6805      	ldr	r5, [r0, #0]
 800178c:	512b      	str	r3, [r5, r4]
 800178e:	e7bf      	b.n	8001710 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001790:	6803      	ldr	r3, [r0, #0]
 8001792:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800179c:	6059      	str	r1, [r3, #4]
 800179e:	e7c1      	b.n	8001724 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a6:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 80017a8:	2001      	movs	r0, #1
 80017aa:	e004      	b.n	80017b6 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
  }
}
 80017b6:	bd30      	pop	{r4, r5, pc}

080017b8 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80017b8:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80017c0:	fa5f fc8c 	uxtb.w	ip, ip
 80017c4:	f1bc 0f01 	cmp.w	ip, #1
 80017c8:	f200 8095 	bhi.w	80018f6 <HAL_CAN_GetRxMessage+0x13e>
{
 80017cc:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ce:	b951      	cbnz	r1, 80017e6 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017d0:	6804      	ldr	r4, [r0, #0]
 80017d2:	68e4      	ldr	r4, [r4, #12]
 80017d4:	f014 0f03 	tst.w	r4, #3
 80017d8:	d110      	bne.n	80017fc <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e0:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e077      	b.n	80018d6 <HAL_CAN_GetRxMessage+0x11e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017e6:	6804      	ldr	r4, [r0, #0]
 80017e8:	6924      	ldr	r4, [r4, #16]
 80017ea:	f014 0f03 	tst.w	r4, #3
 80017ee:	d105      	bne.n	80017fc <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f6:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80017f8:	2001      	movs	r0, #1
 80017fa:	e06c      	b.n	80018d6 <HAL_CAN_GetRxMessage+0x11e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017fc:	f101 041b 	add.w	r4, r1, #27
 8001800:	0124      	lsls	r4, r4, #4
 8001802:	6805      	ldr	r5, [r0, #0]
 8001804:	592c      	ldr	r4, [r5, r4]
 8001806:	f004 0404 	and.w	r4, r4, #4
 800180a:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800180c:	2c00      	cmp	r4, #0
 800180e:	d164      	bne.n	80018da <HAL_CAN_GetRxMessage+0x122>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001810:	f101 041b 	add.w	r4, r1, #27
 8001814:	0124      	lsls	r4, r4, #4
 8001816:	6805      	ldr	r5, [r0, #0]
 8001818:	592c      	ldr	r4, [r5, r4]
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800181e:	6804      	ldr	r4, [r0, #0]
 8001820:	f101 0c1b 	add.w	ip, r1, #27
 8001824:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8001828:	f854 400c 	ldr.w	r4, [r4, ip]
 800182c:	f004 0402 	and.w	r4, r4, #2
 8001830:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001832:	6804      	ldr	r4, [r0, #0]
 8001834:	4464      	add	r4, ip
 8001836:	6864      	ldr	r4, [r4, #4]
 8001838:	f004 040f 	and.w	r4, r4, #15
 800183c:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800183e:	6804      	ldr	r4, [r0, #0]
 8001840:	4464      	add	r4, ip
 8001842:	6864      	ldr	r4, [r4, #4]
 8001844:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001848:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800184a:	6804      	ldr	r4, [r0, #0]
 800184c:	4464      	add	r4, ip
 800184e:	6864      	ldr	r4, [r4, #4]
 8001850:	0c24      	lsrs	r4, r4, #16
 8001852:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001854:	6802      	ldr	r2, [r0, #0]
 8001856:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800185a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800185e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001860:	6802      	ldr	r2, [r0, #0]
 8001862:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001866:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800186a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800186e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001876:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800187a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800187e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001880:	6802      	ldr	r2, [r0, #0]
 8001882:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001886:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800188a:	0e12      	lsrs	r2, r2, #24
 800188c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800188e:	6802      	ldr	r2, [r0, #0]
 8001890:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001894:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001898:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800189a:	6802      	ldr	r2, [r0, #0]
 800189c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80018a0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80018a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80018a8:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018aa:	6802      	ldr	r2, [r0, #0]
 80018ac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80018b0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80018b4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80018b8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018ba:	6802      	ldr	r2, [r0, #0]
 80018bc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80018c0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80018c4:	0e12      	lsrs	r2, r2, #24
 80018c6:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018c8:	b979      	cbnz	r1, 80018ea <HAL_CAN_GetRxMessage+0x132>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018ca:	6802      	ldr	r2, [r0, #0]
 80018cc:	68d3      	ldr	r3, [r2, #12]
 80018ce:	f043 0320 	orr.w	r3, r3, #32
 80018d2:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80018d4:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80018d6:	bc30      	pop	{r4, r5}
 80018d8:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018da:	f101 041b 	add.w	r4, r1, #27
 80018de:	0124      	lsls	r4, r4, #4
 80018e0:	6805      	ldr	r5, [r0, #0]
 80018e2:	592c      	ldr	r4, [r5, r4]
 80018e4:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018e6:	6054      	str	r4, [r2, #4]
 80018e8:	e799      	b.n	800181e <HAL_CAN_GetRxMessage+0x66>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018ea:	6802      	ldr	r2, [r0, #0]
 80018ec:	6913      	ldr	r3, [r2, #16]
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	6113      	str	r3, [r2, #16]
 80018f4:	e7ee      	b.n	80018d4 <HAL_CAN_GetRxMessage+0x11c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80018fe:	2001      	movs	r0, #1
}
 8001900:	4770      	bx	lr

08001902 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001902:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001906:	3b01      	subs	r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d901      	bls.n	8001912 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 800190e:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8001910:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8001912:	b921      	cbnz	r1, 800191e <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001914:	6803      	ldr	r3, [r0, #0]
 8001916:	68d8      	ldr	r0, [r3, #12]
 8001918:	f000 0003 	and.w	r0, r0, #3
 800191c:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800191e:	6803      	ldr	r3, [r0, #0]
 8001920:	6918      	ldr	r0, [r3, #16]
 8001922:	f000 0003 	and.w	r0, r0, #3
 8001926:	4770      	bx	lr

08001928 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800192a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	0200      	lsls	r0, r0, #8
 8001936:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001944:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_NVIC_SetPriority+0x68>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001956:	f1c3 0c07 	rsb	ip, r3, #7
 800195a:	f1bc 0f04 	cmp.w	ip, #4
 800195e:	bf28      	it	cs
 8001960:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001964:	f103 0e04 	add.w	lr, r3, #4
 8001968:	f1be 0f06 	cmp.w	lr, #6
 800196c:	d918      	bls.n	80019a0 <HAL_NVIC_SetPriority+0x54>
 800196e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 3eff 	mov.w	lr, #4294967295
 8001974:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001978:	ea21 010c 	bic.w	r1, r1, ip
 800197c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197e:	fa0e f303 	lsl.w	r3, lr, r3
 8001982:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001986:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001988:	2800      	cmp	r0, #0
 800198a:	db0b      	blt.n	80019a4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	0109      	lsls	r1, r1, #4
 800198e:	b2c9      	uxtb	r1, r1
 8001990:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001994:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001998:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800199c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a0:	2300      	movs	r3, #0
 80019a2:	e7e5      	b.n	8001970 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	f000 000f 	and.w	r0, r0, #15
 80019a8:	0109      	lsls	r1, r1, #4
 80019aa:	b2c9      	uxtb	r1, r1
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_NVIC_SetPriority+0x6c>)
 80019ae:	5419      	strb	r1, [r3, r0]
 80019b0:	e7f4      	b.n	800199c <HAL_NVIC_SetPriority+0x50>
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	e000ed14 	.word	0xe000ed14

080019bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019bc:	2800      	cmp	r0, #0
 80019be:	db07      	blt.n	80019d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c0:	f000 021f 	and.w	r2, r0, #31
 80019c4:	0940      	lsrs	r0, r0, #5
 80019c6:	2301      	movs	r3, #1
 80019c8:	4093      	lsls	r3, r2
 80019ca:	4a02      	ldr	r2, [pc, #8]	; (80019d4 <HAL_NVIC_EnableIRQ+0x18>)
 80019cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	3801      	subs	r0, #1
 80019da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019de:	d20b      	bcs.n	80019f8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_SYSTICK_Config+0x24>)
 80019e8:	21f0      	movs	r1, #240	; 0xf0
 80019ea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ee:	2000      	movs	r0, #0
 80019f0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	2207      	movs	r2, #7
 80019f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001a04:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e062      	b.n	8001ace <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a08:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a0a:	005e      	lsls	r6, r3, #1
 8001a0c:	2403      	movs	r4, #3
 8001a0e:	40b4      	lsls	r4, r6
 8001a10:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a14:	68cc      	ldr	r4, [r1, #12]
 8001a16:	40b4      	lsls	r4, r6
 8001a18:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001a1a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a22:	684c      	ldr	r4, [r1, #4]
 8001a24:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001a28:	409c      	lsls	r4, r3
 8001a2a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8001a2e:	6044      	str	r4, [r0, #4]
 8001a30:	e05e      	b.n	8001af0 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a32:	08dd      	lsrs	r5, r3, #3
 8001a34:	3508      	adds	r5, #8
 8001a36:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3a:	f003 0407 	and.w	r4, r3, #7
 8001a3e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001a42:	240f      	movs	r4, #15
 8001a44:	fa04 f40c 	lsl.w	r4, r4, ip
 8001a48:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4c:	690c      	ldr	r4, [r1, #16]
 8001a4e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001a52:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001a56:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001a5a:	e060      	b.n	8001b1e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5c:	2402      	movs	r4, #2
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x62>
 8001a60:	2400      	movs	r4, #0
 8001a62:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a66:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a68:	f10c 0c02 	add.w	ip, ip, #2
 8001a6c:	4d4c      	ldr	r5, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x1a0>)
 8001a6e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a72:	4c4c      	ldr	r4, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x1a4>)
 8001a74:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001a76:	43d4      	mvns	r4, r2
 8001a78:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7c:	684f      	ldr	r7, [r1, #4]
 8001a7e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001a82:	d001      	beq.n	8001a88 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001a84:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001a88:	4d46      	ldr	r5, [pc, #280]	; (8001ba4 <HAL_GPIO_Init+0x1a4>)
 8001a8a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001a8c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001a8e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a92:	684f      	ldr	r7, [r1, #4]
 8001a94:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001a98:	d001      	beq.n	8001a9e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8001a9a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001a9e:	4d41      	ldr	r5, [pc, #260]	; (8001ba4 <HAL_GPIO_Init+0x1a4>)
 8001aa0:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aa2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001aa4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aa8:	684f      	ldr	r7, [r1, #4]
 8001aaa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001aae:	d001      	beq.n	8001ab4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8001ab0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001ab4:	4d3b      	ldr	r5, [pc, #236]	; (8001ba4 <HAL_GPIO_Init+0x1a4>)
 8001ab6:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8001ab8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001aba:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abc:	684e      	ldr	r6, [r1, #4]
 8001abe:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001ac2:	d001      	beq.n	8001ac8 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8001ac4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8001ac8:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_GPIO_Init+0x1a4>)
 8001aca:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8001acc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	680a      	ldr	r2, [r1, #0]
 8001ad0:	fa32 f403 	lsrs.w	r4, r2, r3
 8001ad4:	d062      	beq.n	8001b9c <HAL_GPIO_Init+0x19c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad6:	f04f 0c01 	mov.w	ip, #1
 8001ada:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001ade:	ea1c 0202 	ands.w	r2, ip, r2
 8001ae2:	d0f3      	beq.n	8001acc <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	684c      	ldr	r4, [r1, #4]
 8001ae6:	f004 0403 	and.w	r4, r4, #3
 8001aea:	3c01      	subs	r4, #1
 8001aec:	2c01      	cmp	r4, #1
 8001aee:	d98b      	bls.n	8001a08 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	684c      	ldr	r4, [r1, #4]
 8001af2:	f004 0403 	and.w	r4, r4, #3
 8001af6:	2c03      	cmp	r4, #3
 8001af8:	d00c      	beq.n	8001b14 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001afa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001afc:	005d      	lsls	r5, r3, #1
 8001afe:	f04f 0c03 	mov.w	ip, #3
 8001b02:	fa0c fc05 	lsl.w	ip, ip, r5
 8001b06:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0a:	688c      	ldr	r4, [r1, #8]
 8001b0c:	40ac      	lsls	r4, r5
 8001b0e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8001b12:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	684c      	ldr	r4, [r1, #4]
 8001b16:	f004 0403 	and.w	r4, r4, #3
 8001b1a:	2c02      	cmp	r4, #2
 8001b1c:	d089      	beq.n	8001a32 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8001b1e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b20:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b24:	f04f 0c03 	mov.w	ip, #3
 8001b28:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001b2c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b30:	684c      	ldr	r4, [r1, #4]
 8001b32:	f004 0403 	and.w	r4, r4, #3
 8001b36:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b3a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001b3e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b40:	684c      	ldr	r4, [r1, #4]
 8001b42:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001b46:	d0c1      	beq.n	8001acc <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4c17      	ldr	r4, [pc, #92]	; (8001ba8 <HAL_GPIO_Init+0x1a8>)
 8001b4a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001b4c:	f045 0501 	orr.w	r5, r5, #1
 8001b50:	6625      	str	r5, [r4, #96]	; 0x60
 8001b52:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001b54:	f004 0401 	and.w	r4, r4, #1
 8001b58:	9401      	str	r4, [sp, #4]
 8001b5a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001b60:	f10c 0502 	add.w	r5, ip, #2
 8001b64:	4c0e      	ldr	r4, [pc, #56]	; (8001ba0 <HAL_GPIO_Init+0x1a0>)
 8001b66:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6a:	f003 0403 	and.w	r4, r3, #3
 8001b6e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8001b72:	240f      	movs	r4, #15
 8001b74:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b78:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001b80:	f43f af6e 	beq.w	8001a60 <HAL_GPIO_Init+0x60>
 8001b84:	4c09      	ldr	r4, [pc, #36]	; (8001bac <HAL_GPIO_Init+0x1ac>)
 8001b86:	42a0      	cmp	r0, r4
 8001b88:	d006      	beq.n	8001b98 <HAL_GPIO_Init+0x198>
 8001b8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b8e:	42a0      	cmp	r0, r4
 8001b90:	f43f af64 	beq.w	8001a5c <HAL_GPIO_Init+0x5c>
 8001b94:	2407      	movs	r4, #7
 8001b96:	e764      	b.n	8001a62 <HAL_GPIO_Init+0x62>
 8001b98:	2401      	movs	r4, #1
 8001b9a:	e762      	b.n	8001a62 <HAL_GPIO_Init+0x62>
  }
}
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40010400 	.word	0x40010400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000400 	.word	0x48000400

08001bb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	b10a      	cbz	r2, 8001bb6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	6181      	str	r1, [r0, #24]
 8001bb4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4a02      	ldr	r2, [pc, #8]	; (8001bc8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]
}
 8001bc6:	4770      	bx	lr
 8001bc8:	40007000 	.word	0x40007000

08001bcc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <HAL_PWREx_GetVoltageRange+0xc>)
 8001bce:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001bd0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40007000 	.word	0x40007000

08001bdc <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bdc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001be0:	d00f      	beq.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d034      	beq.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bfe:	2000      	movs	r0, #0
 8001c00:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d020      	beq.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c10:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2232      	movs	r2, #50	; 0x32
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9b      	lsrs	r3, r3, #18
 8001c30:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c32:	e000      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001c34:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c38:	6952      	ldr	r2, [r2, #20]
 8001c3a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001c3e:	d001      	beq.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x68>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f7      	bne.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c4c:	d103      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8001c4e:	2000      	movs	r0, #0
 8001c50:	4770      	bx	lr
 8001c52:	2000      	movs	r0, #0
 8001c54:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001c56:	2003      	movs	r0, #3
 8001c58:	4770      	bx	lr
  return HAL_OK;
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c6c:	b530      	push	{r4, r5, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c7a:	d00b      	beq.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c7c:	f7ff ffa6 	bl	8001bcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001c84:	d017      	beq.n	8001cb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c86:	2c80      	cmp	r4, #128	; 0x80
 8001c88:	d81f      	bhi.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c8a:	d02d      	beq.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c8c:	2c70      	cmp	r4, #112	; 0x70
 8001c8e:	d02d      	beq.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c90:	2100      	movs	r1, #0
 8001c92:	e01b      	b.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	4d17      	ldr	r5, [pc, #92]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001c96:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c9e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001ca8:	f7ff ff90 	bl	8001bcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cb4:	e7e4      	b.n	8001c80 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001cb6:	2c80      	cmp	r4, #128	; 0x80
 8001cb8:	d903      	bls.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001cba:	2ca0      	cmp	r4, #160	; 0xa0
 8001cbc:	d903      	bls.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	e004      	b.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	e002      	b.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	e000      	b.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cca:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 0307 	bic.w	r3, r3, #7
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	428b      	cmp	r3, r1
 8001ce0:	d106      	bne.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001ce2:	2000      	movs	r0, #0
}
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ce8:	2102      	movs	r1, #2
 8001cea:	e7ef      	b.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cec:	2101      	movs	r1, #1
 8001cee:	e7ed      	b.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7f7      	b.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cfe:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	68d2      	ldr	r2, [r2, #12]
 8001d02:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d06:	f013 030c 	ands.w	r3, r3, #12
 8001d0a:	d00a      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x26>
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	d006      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d01f      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	e010      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d1f6      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	f012 0f08 	tst.w	r2, #8
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d2e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8001d32:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001d36:	491b      	ldr	r1, [pc, #108]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3c:	b143      	cbz	r3, 8001d50 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d3e:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d00d      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x64>
}
 8001d44:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001d4e:	e7f2      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001d50:	4610      	mov	r0, r2
 8001d52:	e7f5      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8001d54:	4814      	ldr	r0, [pc, #80]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d56:	2200      	movs	r2, #0
 8001d58:	e7f2      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	e7ef      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d016      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x9e>
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d72:	490b      	ldr	r1, [pc, #44]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d74:	68c8      	ldr	r0, [r1, #12]
 8001d76:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001d7a:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d7c:	68c8      	ldr	r0, [r1, #12]
 8001d7e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001d82:	fb02 f000 	mul.w	r0, r2, r0
 8001d86:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8a:	68cb      	ldr	r3, [r1, #12]
 8001d8c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001d90:	3301      	adds	r3, #1
 8001d92:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8001d94:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001d98:	e7d4      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8001d9a:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d9c:	e7e9      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x76>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08003a4c 	.word	0x08003a4c
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200

08001db0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001db0:	2800      	cmp	r0, #0
 8001db2:	f000 831c 	beq.w	80023ee <HAL_RCC_OscConfig+0x63e>
{
 8001db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db8:	b083      	sub	sp, #12
 8001dba:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbc:	4b96      	ldr	r3, [pc, #600]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001dbe:	689d      	ldr	r5, [r3, #8]
 8001dc0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc4:	68de      	ldr	r6, [r3, #12]
 8001dc6:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dca:	6803      	ldr	r3, [r0, #0]
 8001dcc:	f013 0f10 	tst.w	r3, #16
 8001dd0:	d05a      	beq.n	8001e88 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd2:	b1e5      	cbz	r5, 8001e0e <HAL_RCC_OscConfig+0x5e>
 8001dd4:	2d0c      	cmp	r5, #12
 8001dd6:	d018      	beq.n	8001e0a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dd8:	69a3      	ldr	r3, [r4, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80bb 	beq.w	8001f56 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8001de0:	4a8d      	ldr	r2, [pc, #564]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001dea:	f7ff faff 	bl	80013ec <HAL_GetTick>
 8001dee:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df0:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f013 0f02 	tst.w	r3, #2
 8001df8:	f040 809a 	bne.w	8001f30 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfc:	f7ff faf6 	bl	80013ec <HAL_GetTick>
 8001e00:	1bc0      	subs	r0, r0, r7
 8001e02:	2802      	cmp	r0, #2
 8001e04:	d9f4      	bls.n	8001df0 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001e06:	2003      	movs	r0, #3
 8001e08:	e2fc      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e0a:	2e01      	cmp	r6, #1
 8001e0c:	d1e4      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f013 0f02 	tst.w	r3, #2
 8001e16:	d003      	beq.n	8001e20 <HAL_RCC_OscConfig+0x70>
 8001e18:	69a3      	ldr	r3, [r4, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 82e9 	beq.w	80023f2 <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e20:	6a20      	ldr	r0, [r4, #32]
 8001e22:	4b7d      	ldr	r3, [pc, #500]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f013 0f08 	tst.w	r3, #8
 8001e2a:	d05b      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x134>
 8001e2c:	4b7a      	ldr	r3, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	4298      	cmp	r0, r3
 8001e36:	d85c      	bhi.n	8001ef2 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e38:	4b77      	ldr	r3, [pc, #476]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f042 0208 	orr.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e48:	6a21      	ldr	r1, [r4, #32]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e54:	69e1      	ldr	r1, [r4, #28]
 8001e56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e5a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	2d00      	cmp	r5, #0
 8001e5e:	d060      	beq.n	8001f22 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e60:	f7ff ff4c 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001e64:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e6c:	4a6b      	ldr	r2, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	40d8      	lsrs	r0, r3
 8001e76:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e78:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f7ff fa71 	bl	8001364 <HAL_InitTick>
        if(status != HAL_OK)
 8001e82:	2800      	cmp	r0, #0
 8001e84:	f040 82be 	bne.w	8002404 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	f013 0f01 	tst.w	r3, #1
 8001e8e:	f000 8081 	beq.w	8001f94 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e92:	2d08      	cmp	r5, #8
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1d2>
 8001e96:	2d0c      	cmp	r5, #12
 8001e98:	d071      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	6863      	ldr	r3, [r4, #4]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	f000 8097 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x222>
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	f000 8099 	beq.w	8001fde <HAL_RCC_OscConfig+0x22e>
 8001eac:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebc:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8099 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fa91 	bl	80013ec <HAL_GetTick>
 8001eca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ecc:	4b52      	ldr	r3, [pc, #328]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ed4:	d15e      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fa89 	bl	80013ec <HAL_GetTick>
 8001eda:	1bc0      	subs	r0, r0, r7
 8001edc:	2864      	cmp	r0, #100	; 0x64
 8001ede:	d9f5      	bls.n	8001ecc <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	e28f      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	e7a0      	b.n	8001e34 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef2:	f7ff febb 	bl	8001c6c <RCC_SetFlashLatencyFromMSIRange>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	f040 827d 	bne.w	80023f6 <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	f042 0208 	orr.w	r2, r2, #8
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f0c:	6a21      	ldr	r1, [r4, #32]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f18:	69e1      	ldr	r1, [r4, #28]
 8001f1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	e79e      	b.n	8001e60 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f22:	6a20      	ldr	r0, [r4, #32]
 8001f24:	f7ff fea2 	bl	8001c6c <RCC_SetFlashLatencyFromMSIRange>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d099      	beq.n	8001e60 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	e269      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f40:	6a21      	ldr	r1, [r4, #32]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f4c:	69e1      	ldr	r1, [r4, #28]
 8001f4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e798      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8001f56:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001f58:	6813      	ldr	r3, [r2, #0]
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f60:	f7ff fa44 	bl	80013ec <HAL_GetTick>
 8001f64:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f013 0f02 	tst.w	r3, #2
 8001f6e:	d08b      	beq.n	8001e88 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f70:	f7ff fa3c 	bl	80013ec <HAL_GetTick>
 8001f74:	1bc0      	subs	r0, r0, r7
 8001f76:	2802      	cmp	r0, #2
 8001f78:	d9f5      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	e242      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f7e:	2e03      	cmp	r6, #3
 8001f80:	d18b      	bne.n	8001e9a <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f8a:	d003      	beq.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
 8001f8c:	6863      	ldr	r3, [r4, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8233 	beq.w	80023fa <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	f013 0f02 	tst.w	r3, #2
 8001f9a:	d058      	beq.n	800204e <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f9c:	2d04      	cmp	r5, #4
 8001f9e:	d045      	beq.n	800202c <HAL_RCC_OscConfig+0x27c>
 8001fa0:	2d0c      	cmp	r5, #12
 8001fa2:	d041      	beq.n	8002028 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa4:	68e3      	ldr	r3, [r4, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d077      	beq.n	800209a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fa1a 	bl	80013ec <HAL_GetTick>
 8001fb8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fc2:	d161      	bne.n	8002088 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fa12 	bl	80013ec <HAL_GetTick>
 8001fc8:	1b80      	subs	r0, r0, r6
 8001fca:	2802      	cmp	r0, #2
 8001fcc:	d9f5      	bls.n	8001fba <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8001fce:	2003      	movs	r0, #3
 8001fd0:	e218      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8001fd4:	6813      	ldr	r3, [r2, #0]
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e76f      	b.n	8001ebe <HAL_RCC_OscConfig+0x10e>
 8001fde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fe2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e762      	b.n	8001ebe <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f9f8 	bl	80013ec <HAL_GetTick>
 8001ffc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_OscConfig+0x268>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002006:	d0c5      	beq.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f9f0 	bl	80013ec <HAL_GetTick>
 800200c:	1bc0      	subs	r0, r0, r7
 800200e:	2864      	cmp	r0, #100	; 0x64
 8002010:	d9f5      	bls.n	8001ffe <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002012:	2003      	movs	r0, #3
 8002014:	e1f6      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	08003a34 	.word	0x08003a34
 8002020:	20000004 	.word	0x20000004
 8002024:	2000000c 	.word	0x2000000c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002028:	2e02      	cmp	r6, #2
 800202a:	d1bb      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202c:	4ba4      	ldr	r3, [pc, #656]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002034:	d003      	beq.n	800203e <HAL_RCC_OscConfig+0x28e>
 8002036:	68e3      	ldr	r3, [r4, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 81e0 	beq.w	80023fe <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4aa0      	ldr	r2, [pc, #640]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002040:	6853      	ldr	r3, [r2, #4]
 8002042:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002046:	6921      	ldr	r1, [r4, #16]
 8002048:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800204c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f013 0f08 	tst.w	r3, #8
 8002054:	d04c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002056:	6963      	ldr	r3, [r4, #20]
 8002058:	b39b      	cbz	r3, 80020c2 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800205a:	4a99      	ldr	r2, [pc, #612]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800205c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002068:	f7ff f9c0 	bl	80013ec <HAL_GetTick>
 800206c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206e:	4b94      	ldr	r3, [pc, #592]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	f013 0f02 	tst.w	r3, #2
 8002078:	d13a      	bne.n	80020f0 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f9b7 	bl	80013ec <HAL_GetTick>
 800207e:	1b80      	subs	r0, r0, r6
 8002080:	2802      	cmp	r0, #2
 8002082:	d9f4      	bls.n	800206e <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002084:	2003      	movs	r0, #3
 8002086:	e1bd      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4a8d      	ldr	r2, [pc, #564]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800208a:	6853      	ldr	r3, [r2, #4]
 800208c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002090:	6921      	ldr	r1, [r4, #16]
 8002092:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002096:	6053      	str	r3, [r2, #4]
 8002098:	e7d9      	b.n	800204e <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800209a:	4a89      	ldr	r2, [pc, #548]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020a4:	f7ff f9a2 	bl	80013ec <HAL_GetTick>
 80020a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020aa:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80020b2:	d0cc      	beq.n	800204e <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff f99a 	bl	80013ec <HAL_GetTick>
 80020b8:	1b80      	subs	r0, r0, r6
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9f5      	bls.n	80020aa <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e1a0      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4a7f      	ldr	r2, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80020c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80020d0:	f7ff f98c 	bl	80013ec <HAL_GetTick>
 80020d4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80020d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020dc:	f013 0f02 	tst.w	r3, #2
 80020e0:	d006      	beq.n	80020f0 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff f983 	bl	80013ec <HAL_GetTick>
 80020e6:	1b80      	subs	r0, r0, r6
 80020e8:	2802      	cmp	r0, #2
 80020ea:	d9f4      	bls.n	80020d6 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80020ec:	2003      	movs	r0, #3
 80020ee:	e189      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f013 0f04 	tst.w	r3, #4
 80020f6:	d07a      	beq.n	80021ee <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020f8:	4b71      	ldr	r3, [pc, #452]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002100:	d136      	bne.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002104:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002106:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002116:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x514>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002120:	d028      	beq.n	8002174 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	68a3      	ldr	r3, [r4, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d039      	beq.n	800219c <HAL_RCC_OscConfig+0x3ec>
 8002128:	2b05      	cmp	r3, #5
 800212a:	d03f      	beq.n	80021ac <HAL_RCC_OscConfig+0x3fc>
 800212c:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800212e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800213a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002146:	68a3      	ldr	r3, [r4, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d03d      	beq.n	80021c8 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800214c:	f7ff f94e 	bl	80013ec <HAL_GetTick>
 8002150:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f013 0f02 	tst.w	r3, #2
 800215c:	d146      	bne.n	80021ec <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff f945 	bl	80013ec <HAL_GetTick>
 8002162:	1bc0      	subs	r0, r0, r7
 8002164:	f241 3388 	movw	r3, #5000	; 0x1388
 8002168:	4298      	cmp	r0, r3
 800216a:	d9f2      	bls.n	8002152 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800216c:	2003      	movs	r0, #3
 800216e:	e149      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8002170:	2600      	movs	r6, #0
 8002172:	e7d1      	b.n	8002118 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4a53      	ldr	r2, [pc, #332]	; (80022c4 <HAL_RCC_OscConfig+0x514>)
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800217e:	f7ff f935 	bl	80013ec <HAL_GetTick>
 8002182:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002184:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <HAL_RCC_OscConfig+0x514>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f413 7f80 	tst.w	r3, #256	; 0x100
 800218c:	d1c9      	bne.n	8002122 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7ff f92d 	bl	80013ec <HAL_GetTick>
 8002192:	1bc0      	subs	r0, r0, r7
 8002194:	2802      	cmp	r0, #2
 8002196:	d9f5      	bls.n	8002184 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002198:	2003      	movs	r0, #3
 800219a:	e133      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800219e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021aa:	e7cc      	b.n	8002146 <HAL_RCC_OscConfig+0x396>
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80021ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021b2:	f042 0204 	orr.w	r2, r2, #4
 80021b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80021ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80021c6:	e7be      	b.n	8002146 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80021c8:	f7ff f910 	bl	80013ec <HAL_GetTick>
 80021cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f013 0f02 	tst.w	r3, #2
 80021d8:	d008      	beq.n	80021ec <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff f907 	bl	80013ec <HAL_GetTick>
 80021de:	1bc0      	subs	r0, r0, r7
 80021e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021e4:	4298      	cmp	r0, r3
 80021e6:	d9f2      	bls.n	80021ce <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 80021e8:	2003      	movs	r0, #3
 80021ea:	e10b      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 80021ec:	b9e6      	cbnz	r6, 8002228 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	f013 0f20 	tst.w	r3, #32
 80021f4:	d035      	beq.n	8002262 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021f8:	b1e3      	cbz	r3, 8002234 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80021fc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002208:	f7ff f8f0 	bl	80013ec <HAL_GetTick>
 800220c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002214:	f013 0f02 	tst.w	r3, #2
 8002218:	d123      	bne.n	8002262 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221a:	f7ff f8e7 	bl	80013ec <HAL_GetTick>
 800221e:	1b80      	subs	r0, r0, r6
 8002220:	2802      	cmp	r0, #2
 8002222:	d9f4      	bls.n	800220e <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e0ed      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800222a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
 8002232:	e7dc      	b.n	80021ee <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002236:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002242:	f7ff f8d3 	bl	80013ec <HAL_GetTick>
 8002246:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 800224a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800224e:	f013 0f02 	tst.w	r3, #2
 8002252:	d006      	beq.n	8002262 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002254:	f7ff f8ca 	bl	80013ec <HAL_GetTick>
 8002258:	1b80      	subs	r0, r0, r6
 800225a:	2802      	cmp	r0, #2
 800225c:	d9f4      	bls.n	8002248 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800225e:	2003      	movs	r0, #3
 8002260:	e0d0      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80cc 	beq.w	8002402 <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800226a:	2b02      	cmp	r3, #2
 800226c:	d017      	beq.n	800229e <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226e:	2d0c      	cmp	r5, #12
 8002270:	f000 80cc 	beq.w	800240c <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002276:	6813      	ldr	r3, [r2, #0]
 8002278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800227e:	f7ff f8b5 	bl	80013ec <HAL_GetTick>
 8002282:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800228c:	f000 80a8 	beq.w	80023e0 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f8ac 	bl	80013ec <HAL_GetTick>
 8002294:	1b00      	subs	r0, r0, r4
 8002296:	2802      	cmp	r0, #2
 8002298:	d9f4      	bls.n	8002284 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800229a:	2003      	movs	r0, #3
 800229c:	e0b2      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80022a0:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	f003 0103 	and.w	r1, r3, #3
 80022a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022a8:	4291      	cmp	r1, r2
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ac:	2d0c      	cmp	r5, #12
 80022ae:	f000 80ab 	beq.w	8002408 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_RCC_OscConfig+0x510>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80022ba:	d02f      	beq.n	800231c <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	e0a1      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80022ce:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80022d4:	d1ea      	bne.n	80022ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022da:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80022e0:	d1e4      	bne.n	80022ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80022ec:	d1de      	bne.n	80022ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ee:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80022f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80022fc:	d1d6      	bne.n	80022ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fe:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002302:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002304:	0852      	lsrs	r2, r2, #1
 8002306:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002308:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800230c:	d1ce      	bne.n	80022ac <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002316:	d049      	beq.n	80023ac <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8002318:	2000      	movs	r0, #0
 800231a:	e073      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800231c:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002324:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002326:	f7ff f861 	bl	80013ec <HAL_GetTick>
 800232a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002334:	d006      	beq.n	8002344 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7ff f859 	bl	80013ec <HAL_GetTick>
 800233a:	1b40      	subs	r0, r0, r5
 800233c:	2802      	cmp	r0, #2
 800233e:	d9f5      	bls.n	800232c <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8002340:	2003      	movs	r0, #3
 8002342:	e05f      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002344:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 8002346:	68d3      	ldr	r3, [r2, #12]
 8002348:	4932      	ldr	r1, [pc, #200]	; (8002414 <HAL_RCC_OscConfig+0x664>)
 800234a:	4019      	ands	r1, r3
 800234c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800234e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002350:	3801      	subs	r0, #1
 8002352:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002356:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002358:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800235c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800235e:	0840      	lsrs	r0, r0, #1
 8002360:	3801      	subs	r0, #1
 8002362:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002366:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002368:	0840      	lsrs	r0, r0, #1
 800236a:	3801      	subs	r0, #1
 800236c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002370:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002372:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002380:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002382:	68d3      	ldr	r3, [r2, #12]
 8002384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002388:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800238a:	f7ff f82f 	bl	80013ec <HAL_GetTick>
 800238e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002398:	d106      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff f827 	bl	80013ec <HAL_GetTick>
 800239e:	1b00      	subs	r0, r0, r4
 80023a0:	2802      	cmp	r0, #2
 80023a2:	d9f5      	bls.n	8002390 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 80023a4:	2003      	movs	r0, #3
 80023a6:	e02d      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 80023a8:	2000      	movs	r0, #0
 80023aa:	e02b      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023b4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023bc:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80023be:	f7ff f815 	bl	80013ec <HAL_GetTick>
 80023c2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff f80d 	bl	80013ec <HAL_GetTick>
 80023d2:	1b03      	subs	r3, r0, r4
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9f5      	bls.n	80023c4 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 80023d8:	2003      	movs	r0, #3
 80023da:	e013      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 80023dc:	2000      	movs	r0, #0
 80023de:	e011      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80023e0:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <HAL_RCC_OscConfig+0x660>)
 80023e2:	68d1      	ldr	r1, [r2, #12]
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_RCC_OscConfig+0x668>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80023ea:	2000      	movs	r0, #0
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 80023ee:	2001      	movs	r0, #1
}
 80023f0:	4770      	bx	lr
        return HAL_ERROR;
 80023f2:	2001      	movs	r0, #1
 80023f4:	e006      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
 80023f8:	e004      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
 80023fc:	e002      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002402:	2000      	movs	r0, #0
}
 8002404:	b003      	add	sp, #12
 8002406:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002408:	2001      	movs	r0, #1
 800240a:	e7fb      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
 800240e:	e7f9      	b.n	8002404 <HAL_RCC_OscConfig+0x654>
 8002410:	40021000 	.word	0x40021000
 8002414:	019d808c 	.word	0x019d808c
 8002418:	feeefffc 	.word	0xfeeefffc

0800241c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800241c:	2800      	cmp	r0, #0
 800241e:	f000 80af 	beq.w	8002580 <HAL_RCC_ClockConfig+0x164>
{
 8002422:	b570      	push	{r4, r5, r6, lr}
 8002424:	460d      	mov	r5, r1
 8002426:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_ClockConfig+0x174>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	428b      	cmp	r3, r1
 8002432:	d20b      	bcs.n	800244c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002434:	4a56      	ldr	r2, [pc, #344]	; (8002590 <HAL_RCC_ClockConfig+0x174>)
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	f023 0307 	bic.w	r3, r3, #7
 800243c:	430b      	orrs	r3, r1
 800243e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	6813      	ldr	r3, [r2, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	428b      	cmp	r3, r1
 8002448:	f040 809c 	bne.w	8002584 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	f013 0f02 	tst.w	r3, #2
 8002452:	d00c      	beq.n	800246e <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002454:	68a2      	ldr	r2, [r4, #8]
 8002456:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245e:	429a      	cmp	r2, r3
 8002460:	d905      	bls.n	800246e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002462:	494c      	ldr	r1, [pc, #304]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002464:	688b      	ldr	r3, [r1, #8]
 8002466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246a:	431a      	orrs	r2, r3
 800246c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	f013 0f01 	tst.w	r3, #1
 8002474:	d039      	beq.n	80024ea <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002476:	6863      	ldr	r3, [r4, #4]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d009      	beq.n	8002490 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247c:	2b02      	cmp	r3, #2
 800247e:	d026      	beq.n	80024ce <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002480:	bb63      	cbnz	r3, 80024dc <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002482:	4a44      	ldr	r2, [pc, #272]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	f012 0f02 	tst.w	r2, #2
 800248a:	d106      	bne.n	800249a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
 800248e:	e076      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002490:	4a40      	ldr	r2, [pc, #256]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002498:	d076      	beq.n	8002588 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800249a:	493e      	ldr	r1, [pc, #248]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 800249c:	688a      	ldr	r2, [r1, #8]
 800249e:	f022 0203 	bic.w	r2, r2, #3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80024a6:	f7fe ffa1 	bl	80013ec <HAL_GetTick>
 80024aa:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ac:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	6862      	ldr	r2, [r4, #4]
 80024b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024ba:	d016      	beq.n	80024ea <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe ff96 	bl	80013ec <HAL_GetTick>
 80024c0:	1b80      	subs	r0, r0, r6
 80024c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80024c6:	4298      	cmp	r0, r3
 80024c8:	d9f0      	bls.n	80024ac <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80024ca:	2003      	movs	r0, #3
 80024cc:	e057      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80024d6:	d1e0      	bne.n	800249a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e050      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024dc:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024e4:	d1d9      	bne.n	800249a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
 80024e8:	e049      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	f013 0f02 	tst.w	r3, #2
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f2:	68a2      	ldr	r2, [r4, #8]
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d205      	bcs.n	800250c <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4924      	ldr	r1, [pc, #144]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002502:	688b      	ldr	r3, [r1, #8]
 8002504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002508:	431a      	orrs	r2, r3
 800250a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x174>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	42ab      	cmp	r3, r5
 8002516:	d90a      	bls.n	800252e <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_RCC_ClockConfig+0x174>)
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f023 0307 	bic.w	r3, r3, #7
 8002520:	432b      	orrs	r3, r5
 8002522:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	42ab      	cmp	r3, r5
 800252c:	d12e      	bne.n	800258c <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	f013 0f04 	tst.w	r3, #4
 8002534:	d006      	beq.n	8002544 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002538:	6893      	ldr	r3, [r2, #8]
 800253a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800253e:	68e1      	ldr	r1, [r4, #12]
 8002540:	430b      	orrs	r3, r1
 8002542:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	f013 0f08 	tst.w	r3, #8
 800254a:	d007      	beq.n	800255c <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 800254e:	6893      	ldr	r3, [r2, #8]
 8002550:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002554:	6921      	ldr	r1, [r4, #16]
 8002556:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800255a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255c:	f7ff fbce 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_ClockConfig+0x178>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x17c>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	40d8      	lsrs	r0, r3
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x180>)
 8002574:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f7fe fef3 	bl	8001364 <HAL_InitTick>
}
 800257e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002580:	2001      	movs	r0, #1
}
 8002582:	4770      	bx	lr
      return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
 8002586:	e7fa      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8002588:	2001      	movs	r0, #1
 800258a:	e7f8      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	e7f6      	b.n	800257e <HAL_RCC_ClockConfig+0x162>
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
 8002598:	08003a34 	.word	0x08003a34
 800259c:	20000004 	.word	0x20000004
 80025a0:	2000000c 	.word	0x2000000c

080025a4 <HAL_RCC_GetHCLKFreq>:
}
 80025a4:	4b01      	ldr	r3, [pc, #4]	; (80025ac <HAL_RCC_GetHCLKFreq+0x8>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetPCLK1Freq>:
{
 80025b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025b2:	f7ff fff7 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
}
 80025c6:	40d8      	lsrs	r0, r3
 80025c8:	bd08      	pop	{r3, pc}
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	08003a44 	.word	0x08003a44

080025d4 <HAL_RCC_GetPCLK2Freq>:
{
 80025d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d6:	f7ff ffe5 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	f003 031f 	and.w	r3, r3, #31
}
 80025ea:	40d8      	lsrs	r0, r3
 80025ec:	bd08      	pop	{r3, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08003a44 	.word	0x08003a44

080025f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	4604      	mov	r4, r0
 80025fc:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f013 0f03 	tst.w	r3, #3
 8002606:	d018      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002608:	4b55      	ldr	r3, [pc, #340]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	4293      	cmp	r3, r2
 8002614:	d002      	beq.n	800261c <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002616:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002618:	4628      	mov	r0, r5
 800261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800261c:	2a00      	cmp	r2, #0
 800261e:	f000 809d 	beq.w	800275c <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002622:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800262a:	3301      	adds	r3, #1
 800262c:	6842      	ldr	r2, [r0, #4]
       ||
 800262e:	4293      	cmp	r3, r2
 8002630:	d001      	beq.n	8002636 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8002632:	2501      	movs	r5, #1
 8002634:	e7f0      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2500      	movs	r5, #0
 8002638:	e009      	b.n	800264e <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 800263a:	6803      	ldr	r3, [r0, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d056      	beq.n	80026ee <RCCEx_PLLSAI1_Config+0xf6>
 8002640:	2b03      	cmp	r3, #3
 8002642:	d05b      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x104>
 8002644:	2b01      	cmp	r3, #1
 8002646:	d041      	beq.n	80026cc <RCCEx_PLLSAI1_Config+0xd4>
 8002648:	2501      	movs	r5, #1
  if(status == HAL_OK)
 800264a:	2d00      	cmp	r5, #0
 800264c:	d1e4      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800264e:	4a44      	ldr	r2, [pc, #272]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002656:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002658:	f7fe fec8 	bl	80013ec <HAL_GetTick>
 800265c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800265e:	4b40      	ldr	r3, [pc, #256]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002666:	d005      	beq.n	8002674 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002668:	f7fe fec0 	bl	80013ec <HAL_GetTick>
 800266c:	1b83      	subs	r3, r0, r6
 800266e:	2b02      	cmp	r3, #2
 8002670:	d9f5      	bls.n	800265e <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8002672:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8002674:	2d00      	cmp	r5, #0
 8002676:	d1cf      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002678:	2f00      	cmp	r7, #0
 800267a:	d14d      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267c:	4938      	ldr	r1, [pc, #224]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 800267e:	690b      	ldr	r3, [r1, #16]
 8002680:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002684:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002688:	68a0      	ldr	r0, [r4, #8]
 800268a:	68e2      	ldr	r2, [r4, #12]
 800268c:	06d2      	lsls	r2, r2, #27
 800268e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002692:	4313      	orrs	r3, r2
 8002694:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002696:	4a32      	ldr	r2, [pc, #200]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 8002698:	6813      	ldr	r3, [r2, #0]
 800269a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800269e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026a0:	f7fe fea4 	bl	80013ec <HAL_GetTick>
 80026a4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80026ae:	d105      	bne.n	80026bc <RCCEx_PLLSAI1_Config+0xc4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b0:	f7fe fe9c 	bl	80013ec <HAL_GetTick>
 80026b4:	1b83      	subs	r3, r0, r6
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d9f5      	bls.n	80026a6 <RCCEx_PLLSAI1_Config+0xae>
          status = HAL_TIMEOUT;
 80026ba:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80026bc:	2d00      	cmp	r5, #0
 80026be:	d1ab      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 80026c2:	6913      	ldr	r3, [r2, #16]
 80026c4:	69a1      	ldr	r1, [r4, #24]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6113      	str	r3, [r2, #16]
 80026ca:	e7a5      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026cc:	4a24      	ldr	r2, [pc, #144]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	f012 0f02 	tst.w	r2, #2
 80026d4:	d01e      	beq.n	8002714 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026d6:	4822      	ldr	r0, [pc, #136]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 80026d8:	68c2      	ldr	r2, [r0, #12]
 80026da:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80026de:	6861      	ldr	r1, [r4, #4]
 80026e0:	3901      	subs	r1, #1
 80026e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60c3      	str	r3, [r0, #12]
 80026ea:	2500      	movs	r5, #0
 80026ec:	e7ad      	b.n	800264a <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80026f6:	d1ee      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xde>
        status = HAL_ERROR;
 80026f8:	2501      	movs	r5, #1
 80026fa:	e7a6      	b.n	800264a <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002704:	d1e7      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xde>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800270e:	d1e2      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xde>
          status = HAL_ERROR;
 8002710:	2501      	movs	r5, #1
 8002712:	e79a      	b.n	800264a <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8002714:	2501      	movs	r5, #1
 8002716:	e798      	b.n	800264a <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002718:	2f01      	cmp	r7, #1
 800271a:	d00f      	beq.n	800273c <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271c:	4810      	ldr	r0, [pc, #64]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 800271e:	6902      	ldr	r2, [r0, #16]
 8002720:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002724:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002728:	68a1      	ldr	r1, [r4, #8]
 800272a:	6963      	ldr	r3, [r4, #20]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	065b      	lsls	r3, r3, #25
 8002732:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002736:	4313      	orrs	r3, r2
 8002738:	6103      	str	r3, [r0, #16]
 800273a:	e7ac      	b.n	8002696 <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273c:	4808      	ldr	r0, [pc, #32]	; (8002760 <RCCEx_PLLSAI1_Config+0x168>)
 800273e:	6902      	ldr	r2, [r0, #16]
 8002740:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002744:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002748:	68a1      	ldr	r1, [r4, #8]
 800274a:	6923      	ldr	r3, [r4, #16]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	055b      	lsls	r3, r3, #21
 8002752:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002756:	4313      	orrs	r3, r2
 8002758:	6103      	str	r3, [r0, #16]
 800275a:	e79c      	b.n	8002696 <RCCEx_PLLSAI1_Config+0x9e>
      status = HAL_ERROR;
 800275c:	2501      	movs	r5, #1
 800275e:	e75b      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x20>
 8002760:	40021000 	.word	0x40021000

08002764 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800276c:	6803      	ldr	r3, [r0, #0]
 800276e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002772:	d025      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002774:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800277a:	d006      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800277c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002780:	d012      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002782:	b14b      	cbz	r3, 8002798 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002784:	2601      	movs	r6, #1
 8002786:	4637      	mov	r7, r6
 8002788:	e01c      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800278a:	4aae      	ldr	r2, [pc, #696]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800278c:	68d3      	ldr	r3, [r2, #12]
 800278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002792:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002794:	2700      	movs	r7, #0
 8002796:	e008      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002798:	2100      	movs	r1, #0
 800279a:	3004      	adds	r0, #4
 800279c:	f7ff ff2c 	bl	80025f8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80027a0:	4607      	mov	r7, r0
 80027a2:	b110      	cbz	r0, 80027aa <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027a4:	4606      	mov	r6, r0
 80027a6:	e00d      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027a8:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027aa:	4aa6      	ldr	r2, [pc, #664]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027b0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027b6:	430b      	orrs	r3, r1
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027bc:	2600      	movs	r6, #0
 80027be:	e001      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80027c0:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c2:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027ca:	d06b      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027cc:	4b9d      	ldr	r3, [pc, #628]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80027d4:	d14c      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	4b9b      	ldr	r3, [pc, #620]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027de:	659a      	str	r2, [r3, #88]	; 0x58
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027ea:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ee:	4a96      	ldr	r2, [pc, #600]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f0:	6813      	ldr	r3, [r2, #0]
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80027f8:	f7fe fdf8 	bl	80013ec <HAL_GetTick>
 80027fc:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fe:	4b92      	ldr	r3, [pc, #584]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe fdf0 	bl	80013ec <HAL_GetTick>
 800280c:	1b40      	subs	r0, r0, r5
 800280e:	2802      	cmp	r0, #2
 8002810:	d9f5      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = HAL_TIMEOUT;
 8002812:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8002814:	2f00      	cmp	r7, #0
 8002816:	d140      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x136>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002818:	4b8a      	ldr	r3, [pc, #552]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002822:	d015      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002824:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002826:	429a      	cmp	r2, r3
 8002828:	d012      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xec>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282a:	4a86      	ldr	r2, [pc, #536]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800282c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002834:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002838:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800283c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002840:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002844:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002848:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002850:	f013 0f01 	tst.w	r3, #1
 8002854:	d10f      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x112>
      if(ret == HAL_OK)
 8002856:	2f00      	cmp	r7, #0
 8002858:	f040 80c9 	bne.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	4a79      	ldr	r2, [pc, #484]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800285e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002868:	430b      	orrs	r3, r1
 800286a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286e:	e015      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x138>
    FlagStatus       pwrclkchanged = RESET;
 8002870:	f04f 0800 	mov.w	r8, #0
 8002874:	e7bb      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();
 8002876:	f7fe fdb9 	bl	80013ec <HAL_GetTick>
 800287a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	4b71      	ldr	r3, [pc, #452]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f013 0f02 	tst.w	r3, #2
 8002886:	d1e6      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fdb0 	bl	80013ec <HAL_GetTick>
 800288c:	1b40      	subs	r0, r0, r5
 800288e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002892:	4298      	cmp	r0, r3
 8002894:	d9f2      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x118>
            ret = HAL_TIMEOUT;
 8002896:	2703      	movs	r7, #3
 8002898:	e7dd      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      status = ret;
 800289a:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800289c:	f1b8 0f00 	cmp.w	r8, #0
 80028a0:	f040 80a7 	bne.w	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	f013 0f01 	tst.w	r3, #1
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	6a21      	ldr	r1, [r4, #32]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	f013 0f02 	tst.w	r3, #2
 80028c4:	d008      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c6:	4a5f      	ldr	r2, [pc, #380]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028cc:	f023 030c 	bic.w	r3, r3, #12
 80028d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028d2:	430b      	orrs	r3, r1
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	f013 0f20 	tst.w	r3, #32
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028ec:	430b      	orrs	r3, r1
 80028ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80028f8:	d008      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fa:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002900:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002906:	430b      	orrs	r3, r1
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002912:	d008      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002914:	4a4b      	ldr	r2, [pc, #300]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002916:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800291a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800291e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002920:	430b      	orrs	r3, r1
 8002922:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	f013 0f40 	tst.w	r3, #64	; 0x40
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292e:	4a45      	ldr	r2, [pc, #276]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002930:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002934:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002938:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800293a:	430b      	orrs	r3, r1
 800293c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002946:	d008      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002948:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800294a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800294e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002954:	430b      	orrs	r3, r1
 8002956:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002960:	d00f      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002962:	4a38      	ldr	r2, [pc, #224]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002964:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002968:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800296c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800296e:	430b      	orrs	r3, r1
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297a:	d040      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800297c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002980:	d042      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002988:	d00f      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800298c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002990:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002994:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002996:	430b      	orrs	r3, r1
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800299c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800299e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a2:	d039      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a8:	d03b      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80029b0:	d00c      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80029bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80029be:	430b      	orrs	r3, r1
 80029c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ca:	d032      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80029d2:	d008      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80029e0:	430b      	orrs	r3, r1
 80029e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80029e6:	4630      	mov	r0, r6
 80029e8:	b002      	add	sp, #8
 80029ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80029ee:	463e      	mov	r6, r7
 80029f0:	e754      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x138>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	; 0x58
 80029fc:	e752      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fe:	68d3      	ldr	r3, [r2, #12]
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a04:	60d3      	str	r3, [r2, #12]
 8002a06:	e7bc      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	1d20      	adds	r0, r4, #4
 8002a0c:	f7ff fdf4 	bl	80025f8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d0b6      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x21e>
          status = ret;
 8002a14:	4606      	mov	r6, r0
 8002a16:	e7b4      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	68d3      	ldr	r3, [r2, #12]
 8002a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1e:	60d3      	str	r3, [r2, #12]
 8002a20:	e7c3      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a22:	2101      	movs	r1, #1
 8002a24:	1d20      	adds	r0, r4, #4
 8002a26:	f7ff fde7 	bl	80025f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d0bd      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x246>
        status = ret;
 8002a2e:	4606      	mov	r6, r0
 8002a30:	e7bb      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a32:	2102      	movs	r1, #2
 8002a34:	1d20      	adds	r0, r4, #4
 8002a36:	f7ff fddf 	bl	80025f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d0c6      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x268>
        status = ret;
 8002a3e:	4606      	mov	r6, r0
 8002a40:	e7c4      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x268>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a4c:	4a02      	ldr	r2, [pc, #8]	; (8002a58 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6013      	str	r3, [r2, #0]
}
 8002a56:	4770      	bx	lr
 8002a58:	40021000 	.word	0x40021000

08002a5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	4605      	mov	r5, r0
 8002a64:	4688      	mov	r8, r1
 8002a66:	4617      	mov	r7, r2
 8002a68:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a6a:	f7fe fcbf 	bl	80013ec <HAL_GetTick>
 8002a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a70:	1a1b      	subs	r3, r3, r0
 8002a72:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002a76:	f7fe fcb9 	bl	80013ec <HAL_GetTick>
 8002a7a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002a84:	fb09 f303 	mul.w	r3, r9, r3
 8002a88:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	689c      	ldr	r4, [r3, #8]
 8002a8e:	ea38 0304 	bics.w	r3, r8, r4
 8002a92:	bf0c      	ite	eq
 8002a94:	f04f 0c01 	moveq.w	ip, #1
 8002a98:	f04f 0c00 	movne.w	ip, #0
 8002a9c:	45bc      	cmp	ip, r7
 8002a9e:	d040      	beq.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aa0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002aa4:	d0f1      	beq.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aa6:	f7fe fca1 	bl	80013ec <HAL_GetTick>
 8002aaa:	eba0 000a 	sub.w	r0, r0, sl
 8002aae:	4548      	cmp	r0, r9
 8002ab0:	d20a      	bcs.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002ab2:	f1b9 0f00 	cmp.w	r9, #0
 8002ab6:	d007      	beq.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ab8:	9a01      	ldr	r2, [sp, #4]
 8002aba:	b102      	cbz	r2, 8002abe <SPI_WaitFlagStateUntilTimeout+0x62>
 8002abc:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002abe:	9b01      	ldr	r3, [sp, #4]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	4691      	mov	r9, r2
 8002ac6:	e7e0      	b.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ac8:	682a      	ldr	r2, [r5, #0]
 8002aca:	6853      	ldr	r3, [r2, #4]
 8002acc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002ad0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad2:	686b      	ldr	r3, [r5, #4]
 8002ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad8:	d00b      	beq.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ada:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae0:	d014      	beq.n	8002b0c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002aee:	2003      	movs	r0, #3
 8002af0:	e018      	b.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af2:	68ab      	ldr	r3, [r5, #8]
 8002af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af8:	d002      	beq.n	8002b00 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afe:	d1ec      	bne.n	8002ada <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8002b00:	682a      	ldr	r2, [r5, #0]
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e7e6      	b.n	8002ada <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002b0c:	682a      	ldr	r2, [r5, #0]
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	682a      	ldr	r2, [r5, #0]
 8002b18:	6813      	ldr	r3, [r2, #0]
 8002b1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e7df      	b.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8002b22:	2000      	movs	r0, #0
}
 8002b24:	b002      	add	sp, #8
 8002b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000004 	.word	0x20000004

08002b30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	4606      	mov	r6, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	4615      	mov	r5, r2
 8002b3c:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b44:	f7fe fc52 	bl	80013ec <HAL_GetTick>
 8002b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b4a:	1a1b      	subs	r3, r3, r0
 8002b4c:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8002b50:	f7fe fc4c 	bl	80013ec <HAL_GetTick>
 8002b54:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b56:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b62:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002b66:	0d1b      	lsrs	r3, r3, #20
 8002b68:	fb08 f303 	mul.w	r3, r8, r3
 8002b6c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b6e:	e002      	b.n	8002b76 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b70:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002b74:	d112      	bne.n	8002b9c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002b76:	6833      	ldr	r3, [r6, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	ea03 0c04 	and.w	ip, r3, r4
 8002b7e:	45ac      	cmp	ip, r5
 8002b80:	d04a      	beq.n	8002c18 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b82:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002b86:	d1f3      	bne.n	8002b70 <SPI_WaitFifoStateUntilTimeout+0x40>
 8002b88:	2d00      	cmp	r5, #0
 8002b8a:	d1f1      	bne.n	8002b70 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8002b8c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002b96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b9a:	e7e9      	b.n	8002b70 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b9c:	f7fe fc26 	bl	80013ec <HAL_GetTick>
 8002ba0:	eba0 0009 	sub.w	r0, r0, r9
 8002ba4:	4540      	cmp	r0, r8
 8002ba6:	d20a      	bcs.n	8002bbe <SPI_WaitFifoStateUntilTimeout+0x8e>
 8002ba8:	f1b8 0f00 	cmp.w	r8, #0
 8002bac:	d007      	beq.n	8002bbe <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bae:	9a01      	ldr	r2, [sp, #4]
 8002bb0:	b102      	cbz	r2, 8002bb4 <SPI_WaitFifoStateUntilTimeout+0x84>
 8002bb2:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	4690      	mov	r8, r2
 8002bbc:	e7db      	b.n	8002b76 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bbe:	6832      	ldr	r2, [r6, #0]
 8002bc0:	6853      	ldr	r3, [r2, #4]
 8002bc2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002bc6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc8:	6873      	ldr	r3, [r6, #4]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bce:	d00b      	beq.n	8002be8 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	d014      	beq.n	8002c02 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002bde:	2300      	movs	r3, #0
 8002be0:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002be4:	2003      	movs	r0, #3
 8002be6:	e018      	b.n	8002c1a <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be8:	68b3      	ldr	r3, [r6, #8]
 8002bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bee:	d002      	beq.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d1ec      	bne.n	8002bd0 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8002bf6:	6832      	ldr	r2, [r6, #0]
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e7e6      	b.n	8002bd0 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8002c02:	6832      	ldr	r2, [r6, #0]
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	6832      	ldr	r2, [r6, #0]
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e7df      	b.n	8002bd8 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8002c18:	2000      	movs	r0, #0
}
 8002c1a:	b002      	add	sp, #8
 8002c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c20:	20000004 	.word	0x20000004

08002c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c2e:	9200      	str	r2, [sp, #0]
 8002c30:	460b      	mov	r3, r1
 8002c32:	2200      	movs	r2, #0
 8002c34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c38:	f7ff ff7a 	bl	8002b30 <SPI_WaitFifoStateUntilTimeout>
 8002c3c:	b9b0      	cbnz	r0, 8002c6c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	9600      	str	r6, [sp, #0]
 8002c40:	462b      	mov	r3, r5
 8002c42:	2200      	movs	r2, #0
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7ff ff08 	bl	8002a5c <SPI_WaitFlagStateUntilTimeout>
 8002c4c:	b9a8      	cbnz	r0, 8002c7a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c4e:	9600      	str	r6, [sp, #0]
 8002c50:	462b      	mov	r3, r5
 8002c52:	2200      	movs	r2, #0
 8002c54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff ff69 	bl	8002b30 <SPI_WaitFifoStateUntilTimeout>
 8002c5e:	b150      	cbz	r0, 8002c76 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c62:	f043 0320 	orr.w	r3, r3, #32
 8002c66:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e004      	b.n	8002c76 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c6e:	f043 0320 	orr.w	r3, r3, #32
 8002c72:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c74:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002c76:	b002      	add	sp, #8
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c7c:	f043 0320 	orr.w	r3, r3, #32
 8002c80:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c82:	2003      	movs	r0, #3
 8002c84:	e7f7      	b.n	8002c76 <SPI_EndRxTxTransaction+0x52>

08002c86 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d06a      	beq.n	8002d60 <HAL_SPI_Init+0xda>
{
 8002c8a:	b510      	push	{r4, lr}
 8002c8c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c90:	b933      	cbnz	r3, 8002ca0 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c92:	6843      	ldr	r3, [r0, #4]
 8002c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c98:	d005      	beq.n	8002ca6 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61c3      	str	r3, [r0, #28]
 8002c9e:	e002      	b.n	8002ca6 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca4:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002caa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04d      	beq.n	8002d4e <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	6813      	ldr	r3, [r2, #0]
 8002cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc2:	68e3      	ldr	r3, [r4, #12]
 8002cc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cc8:	d947      	bls.n	8002d5a <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cca:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ccc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cd0:	d004      	beq.n	8002cdc <HAL_SPI_Init+0x56>
 8002cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd6:	d001      	beq.n	8002cdc <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002ce2:	68a1      	ldr	r1, [r4, #8]
 8002ce4:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6921      	ldr	r1, [r4, #16]
 8002cec:	f001 0102 	and.w	r1, r1, #2
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6961      	ldr	r1, [r4, #20]
 8002cf4:	f001 0101 	and.w	r1, r1, #1
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	69a1      	ldr	r1, [r4, #24]
 8002cfc:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002d00:	430b      	orrs	r3, r1
 8002d02:	69e1      	ldr	r1, [r4, #28]
 8002d04:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6a21      	ldr	r1, [r4, #32]
 8002d0c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d14:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002d18:	6820      	ldr	r0, [r4, #0]
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d1e:	8b63      	ldrh	r3, [r4, #26]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002d26:	f001 0110 	and.w	r1, r1, #16
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d2e:	f001 0108 	and.w	r1, r1, #8
 8002d32:	430b      	orrs	r3, r1
 8002d34:	68e1      	ldr	r1, [r4, #12]
 8002d36:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6821      	ldr	r1, [r4, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d42:	2000      	movs	r0, #0
 8002d44:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002d4c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002d4e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fe fa00 	bl	8001158 <HAL_SPI_MspInit>
 8002d58:	e7ab      	b.n	8002cb2 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d5e:	e7b5      	b.n	8002ccc <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8002d60:	2001      	movs	r0, #1
}
 8002d62:	4770      	bx	lr

08002d64 <HAL_SPI_TransmitReceive>:
{
 8002d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d68:	461f      	mov	r7, r3
 8002d6a:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8002d6c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f000 8164 	beq.w	800303e <HAL_SPI_TransmitReceive+0x2da>
 8002d76:	4604      	mov	r4, r0
 8002d78:	4688      	mov	r8, r1
 8002d7a:	4691      	mov	r9, r2
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002d82:	f7fe fb33 	bl	80013ec <HAL_GetTick>
 8002d86:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002d88:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002d8c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002d8e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d00a      	beq.n	8002daa <HAL_SPI_TransmitReceive+0x46>
 8002d94:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d98:	f040 8138 	bne.w	800300c <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d9c:	68a2      	ldr	r2, [r4, #8]
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	f040 813d 	bne.w	800301e <HAL_SPI_TransmitReceive+0x2ba>
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	f040 813c 	bne.w	8003022 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002daa:	f1b8 0f00 	cmp.w	r8, #0
 8002dae:	f000 813a 	beq.w	8003026 <HAL_SPI_TransmitReceive+0x2c2>
 8002db2:	f1b9 0f00 	cmp.w	r9, #0
 8002db6:	f000 8138 	beq.w	800302a <HAL_SPI_TransmitReceive+0x2c6>
 8002dba:	2f00      	cmp	r7, #0
 8002dbc:	f000 8137 	beq.w	800302e <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dc0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dca:	2305      	movs	r3, #5
 8002dcc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dd4:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002dd8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002ddc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002de0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002de4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002de6:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002de8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dea:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002dec:	68e3      	ldr	r3, [r4, #12]
 8002dee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df2:	d801      	bhi.n	8002df8 <HAL_SPI_TransmitReceive+0x94>
 8002df4:	2f01      	cmp	r7, #1
 8002df6:	d923      	bls.n	8002e40 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	6853      	ldr	r3, [r2, #4]
 8002dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e00:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e0a:	d103      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e12:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e14:	68e3      	ldr	r3, [r4, #12]
 8002e16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e1a:	d958      	bls.n	8002ece <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1c:	6863      	ldr	r3, [r4, #4]
 8002e1e:	b10b      	cbz	r3, 8002e24 <HAL_SPI_TransmitReceive+0xc0>
 8002e20:	2f01      	cmp	r7, #1
 8002e22:	d10b      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	8812      	ldrh	r2, [r2, #0]
 8002e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e2e:	3302      	adds	r3, #2
 8002e30:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002e32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002e3c:	2701      	movs	r7, #1
 8002e3e:	e031      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e40:	6822      	ldr	r2, [r4, #0]
 8002e42:	6853      	ldr	r3, [r2, #4]
 8002e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e48:	6053      	str	r3, [r2, #4]
 8002e4a:	e7da      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e54:	3302      	adds	r3, #2
 8002e56:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002e58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002e62:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	f012 0f01 	tst.w	r2, #1
 8002e6c:	d011      	beq.n	8002e92 <HAL_SPI_TransmitReceive+0x12e>
 8002e6e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002e72:	b292      	uxth	r2, r2
 8002e74:	b16a      	cbz	r2, 8002e92 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e7e:	3302      	adds	r3, #2
 8002e80:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002e82:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002e90:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e92:	f7fe faab 	bl	80013ec <HAL_GetTick>
 8002e96:	1b83      	subs	r3, r0, r6
 8002e98:	42ab      	cmp	r3, r5
 8002e9a:	d303      	bcc.n	8002ea4 <HAL_SPI_TransmitReceive+0x140>
 8002e9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ea0:	f040 80c7 	bne.w	8003032 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b92b      	cbnz	r3, 8002eb6 <HAL_SPI_TransmitReceive+0x152>
 8002eaa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a1 	beq.w	8002ff8 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	f012 0f02 	tst.w	r2, #2
 8002ebe:	d0d1      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x100>
 8002ec0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	d0cd      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x100>
 8002ec8:	2f00      	cmp	r7, #0
 8002eca:	d0cb      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x100>
 8002ecc:	e7be      	b.n	8002e4c <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ece:	6863      	ldr	r3, [r4, #4]
 8002ed0:	b10b      	cbz	r3, 8002ed6 <HAL_SPI_TransmitReceive+0x172>
 8002ed2:	2f01      	cmp	r7, #1
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8002ed6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d90d      	bls.n	8002efa <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ee8:	3302      	adds	r3, #2
 8002eea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b02      	subs	r3, #2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002ef6:	2701      	movs	r7, #1
 8002ef8:	e049      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002efa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f04:	3301      	adds	r3, #1
 8002f06:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002f08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f12:	e7f0      	b.n	8002ef6 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8002f14:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002f16:	b292      	uxth	r2, r2
 8002f18:	2a01      	cmp	r2, #1
 8002f1a:	d90c      	bls.n	8002f36 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f24:	3302      	adds	r3, #2
 8002f26:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b02      	subs	r3, #2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002f32:	2700      	movs	r7, #0
 8002f34:	e03d      	b.n	8002fb2 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8002f3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f3e:	3301      	adds	r3, #1
 8002f40:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002f42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002f4c:	2700      	movs	r7, #0
 8002f4e:	e030      	b.n	8002fb2 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f58:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002f5a:	2701      	movs	r7, #1
 8002f5c:	e00d      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f60:	7b1b      	ldrb	r3, [r3, #12]
 8002f62:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f66:	3301      	adds	r3, #1
 8002f68:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002f6a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002f78:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f7a:	f7fe fa37 	bl	80013ec <HAL_GetTick>
 8002f7e:	1b80      	subs	r0, r0, r6
 8002f80:	42a8      	cmp	r0, r5
 8002f82:	d302      	bcc.n	8002f8a <HAL_SPI_TransmitReceive+0x226>
 8002f84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002f88:	d155      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x2d2>
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	d055      	beq.n	800303a <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b923      	cbnz	r3, 8002f9e <HAL_SPI_TransmitReceive+0x23a>
 8002f94:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	f012 0f02 	tst.w	r2, #2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x24e>
 8002fa8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002faa:	b292      	uxth	r2, r2
 8002fac:	b10a      	cbz	r2, 8002fb2 <HAL_SPI_TransmitReceive+0x24e>
 8002fae:	2f00      	cmp	r7, #0
 8002fb0:	d1b0      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	f012 0f01 	tst.w	r2, #1
 8002fba:	d0de      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x216>
 8002fbc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	d0d9      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8002fc6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	2a01      	cmp	r2, #1
 8002fce:	d9c6      	bls.n	8002f5e <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd8:	3302      	adds	r3, #2
 8002fda:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002fdc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b02      	subs	r3, #2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002fea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d9ad      	bls.n	8002f50 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8002ff4:	2701      	movs	r7, #1
 8002ff6:	e7c0      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff8:	4632      	mov	r2, r6
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f7ff fe11 	bl	8002c24 <SPI_EndRxTxTransaction>
 8003002:	b120      	cbz	r0, 800300e <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003004:	2320      	movs	r3, #32
 8003006:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003008:	2001      	movs	r0, #1
 800300a:	e000      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 800300c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800300e:	2301      	movs	r3, #1
 8003010:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003014:	2300      	movs	r3, #0
 8003016:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800301a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800301e:	2002      	movs	r0, #2
 8003020:	e7f5      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
 8003022:	2002      	movs	r0, #2
 8003024:	e7f3      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8003026:	2001      	movs	r0, #1
 8003028:	e7f1      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
 800302a:	2001      	movs	r0, #1
 800302c:	e7ef      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
 800302e:	2001      	movs	r0, #1
 8003030:	e7ed      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
 8003034:	e7eb      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003036:	2003      	movs	r0, #3
 8003038:	e7e9      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
 800303a:	2003      	movs	r0, #3
 800303c:	e7e7      	b.n	800300e <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 800303e:	2002      	movs	r0, #2
 8003040:	e7eb      	b.n	800301a <HAL_SPI_TransmitReceive+0x2b6>
	...

08003044 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003044:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d121      	bne.n	8003092 <HAL_TIM_Base_Start+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304e:	2302      	movs	r3, #2
 8003050:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	6803      	ldr	r3, [r0, #0]
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <HAL_TIM_Base_Start+0x5c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00c      	beq.n	8003076 <HAL_TIM_Base_Start+0x32>
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIM_Base_Start+0x32>
 8003062:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003066:	4293      	cmp	r3, r2
 8003068:	d005      	beq.n	8003076 <HAL_TIM_Base_Start+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003072:	2000      	movs	r0, #0
 8003074:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_TIM_Base_Start+0x60>)
 800307a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	2a06      	cmp	r2, #6
 800307e:	d00a      	beq.n	8003096 <HAL_TIM_Base_Start+0x52>
 8003080:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003084:	d009      	beq.n	800309a <HAL_TIM_Base_Start+0x56>
      __HAL_TIM_ENABLE(htim);
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	4770      	bx	lr
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	4770      	bx	lr
  return HAL_OK;
 8003096:	2000      	movs	r0, #0
 8003098:	4770      	bx	lr
 800309a:	2000      	movs	r0, #0
}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	00010007 	.word	0x00010007

080030a8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d126      	bne.n	8003100 <HAL_TIM_Base_Start_IT+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b8:	6802      	ldr	r2, [r0, #0]
 80030ba:	68d3      	ldr	r3, [r2, #12]
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_TIM_Base_Start_IT+0x64>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00c      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x3c>
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d009      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x3c>
 80030d0:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d005      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x3c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e0:	2000      	movs	r0, #0
 80030e2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <HAL_TIM_Base_Start_IT+0x68>)
 80030e8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	2a06      	cmp	r2, #6
 80030ec:	d00a      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x5c>
 80030ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80030f2:	d009      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80030fc:	2000      	movs	r0, #0
 80030fe:	4770      	bx	lr
    return HAL_ERROR;
 8003100:	2001      	movs	r0, #1
 8003102:	4770      	bx	lr
  return HAL_OK;
 8003104:	2000      	movs	r0, #0
 8003106:	4770      	bx	lr
 8003108:	2000      	movs	r0, #0
}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	00010007 	.word	0x00010007

08003114 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_IRQHandler>:
{
 800311c:	b510      	push	{r4, lr}
 800311e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003120:	6803      	ldr	r3, [r0, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	f012 0f02 	tst.w	r2, #2
 8003128:	d011      	beq.n	800314e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	f012 0f02 	tst.w	r2, #2
 8003130:	d00d      	beq.n	800314e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003132:	f06f 0202 	mvn.w	r2, #2
 8003136:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003138:	2301      	movs	r3, #1
 800313a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800313c:	6803      	ldr	r3, [r0, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f013 0f03 	tst.w	r3, #3
 8003144:	d079      	beq.n	800323a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003146:	f7ff ffe6 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	2300      	movs	r3, #0
 800314c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	f012 0f04 	tst.w	r2, #4
 8003156:	d012      	beq.n	800317e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	f012 0f04 	tst.w	r2, #4
 800315e:	d00e      	beq.n	800317e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003160:	f06f 0204 	mvn.w	r2, #4
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003166:	2302      	movs	r3, #2
 8003168:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003172:	d068      	beq.n	8003246 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff ffce 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	2300      	movs	r3, #0
 800317c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	f012 0f08 	tst.w	r2, #8
 8003186:	d012      	beq.n	80031ae <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	f012 0f08 	tst.w	r2, #8
 800318e:	d00e      	beq.n	80031ae <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003190:	f06f 0208 	mvn.w	r2, #8
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003196:	2304      	movs	r3, #4
 8003198:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f013 0f03 	tst.w	r3, #3
 80031a2:	d057      	beq.n	8003254 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff ffb6 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	2300      	movs	r3, #0
 80031ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	f012 0f10 	tst.w	r2, #16
 80031b6:	d012      	beq.n	80031de <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	f012 0f10 	tst.w	r2, #16
 80031be:	d00e      	beq.n	80031de <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c0:	f06f 0210 	mvn.w	r2, #16
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c6:	2308      	movs	r3, #8
 80031c8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031d2:	d046      	beq.n	8003262 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ff9e 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	2300      	movs	r3, #0
 80031dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	f012 0f01 	tst.w	r2, #1
 80031e6:	d003      	beq.n	80031f0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	f012 0f01 	tst.w	r2, #1
 80031ee:	d13f      	bne.n	8003270 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003200:	d13d      	bne.n	800327e <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	f412 7f80 	tst.w	r2, #256	; 0x100
 800320a:	d003      	beq.n	8003214 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003212:	d13b      	bne.n	800328c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	f012 0f40 	tst.w	r2, #64	; 0x40
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003224:	d139      	bne.n	800329a <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	f012 0f20 	tst.w	r2, #32
 800322e:	d003      	beq.n	8003238 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	f012 0f20 	tst.w	r2, #32
 8003236:	d137      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x18c>
}
 8003238:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	f7ff ff6b 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323e:	4620      	mov	r0, r4
 8003240:	f7ff ff6a 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
 8003244:	e781      	b.n	800314a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff ff64 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff ff63 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
 8003252:	e792      	b.n	800317a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff ff5d 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff ff5c 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
 8003260:	e7a3      	b.n	80031aa <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff ff56 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff ff55 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
 800326e:	e7b4      	b.n	80031da <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	4620      	mov	r0, r4
 8003278:	f7fd fce8 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
 800327c:	e7b8      	b.n	80031f0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003282:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f8b8 	bl	80033fa <HAL_TIMEx_BreakCallback>
 800328a:	e7ba      	b.n	8003202 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800328c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003290:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003292:	4620      	mov	r0, r4
 8003294:	f000 f8b2 	bl	80033fc <HAL_TIMEx_Break2Callback>
 8003298:	e7bc      	b.n	8003214 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800329a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800329e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ff3a 	bl	800311a <HAL_TIM_TriggerCallback>
 80032a6:	e7be      	b.n	8003226 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a8:	f06f 0220 	mvn.w	r2, #32
 80032ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f8a2 	bl	80033f8 <HAL_TIMEx_CommutCallback>
}
 80032b4:	e7c0      	b.n	8003238 <HAL_TIM_IRQHandler+0x11c>
	...

080032b8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ba:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <TIM_Base_SetConfig+0x6c>)
 80032bc:	4290      	cmp	r0, r2
 80032be:	d002      	beq.n	80032c6 <TIM_Base_SetConfig+0xe>
 80032c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032c4:	d103      	bne.n	80032ce <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032ca:	684a      	ldr	r2, [r1, #4]
 80032cc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	4a15      	ldr	r2, [pc, #84]	; (8003324 <TIM_Base_SetConfig+0x6c>)
 80032d0:	4290      	cmp	r0, r2
 80032d2:	d00a      	beq.n	80032ea <TIM_Base_SetConfig+0x32>
 80032d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0x32>
 80032da:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80032de:	4290      	cmp	r0, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0x32>
 80032e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e6:	4290      	cmp	r0, r2
 80032e8:	d103      	bne.n	80032f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	68ca      	ldr	r2, [r1, #12]
 80032f0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f6:	694a      	ldr	r2, [r1, #20]
 80032f8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80032fa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	688b      	ldr	r3, [r1, #8]
 80032fe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	680b      	ldr	r3, [r1, #0]
 8003302:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <TIM_Base_SetConfig+0x6c>)
 8003306:	4298      	cmp	r0, r3
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0x62>
 800330a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800330e:	4298      	cmp	r0, r3
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0x62>
 8003312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003316:	4298      	cmp	r0, r3
 8003318:	d101      	bne.n	800331e <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331a:	690b      	ldr	r3, [r1, #16]
 800331c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331e:	2301      	movs	r3, #1
 8003320:	6143      	str	r3, [r0, #20]
}
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00

08003328 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003328:	b360      	cbz	r0, 8003384 <HAL_TIM_Base_Init+0x5c>
{
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003332:	b313      	cbz	r3, 800337a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	2302      	movs	r3, #2
 8003336:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333a:	4621      	mov	r1, r4
 800333c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003340:	f7ff ffba 	bl	80032b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	2301      	movs	r3, #1
 8003346:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800334e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003352:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003356:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800335a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800335e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003362:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800336a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800336e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003372:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003376:	2000      	movs	r0, #0
}
 8003378:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800337a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800337e:	f7fd ff29 	bl	80011d4 <HAL_TIM_Base_MspInit>
 8003382:	e7d7      	b.n	8003334 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003384:	2001      	movs	r0, #1
}
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003388:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d02f      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8003390:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003392:	2301      	movs	r3, #1
 8003394:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800339e:	6802      	ldr	r2, [r0, #0]
 80033a0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a2:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033a4:	4d13      	ldr	r5, [pc, #76]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80033a6:	42aa      	cmp	r2, r5
 80033a8:	d01d      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ae:	680d      	ldr	r5, [r1, #0]
 80033b0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b2:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b4:	6803      	ldr	r3, [r0, #0]
 80033b6:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d006      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d003      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80033c2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d104      	bne.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ca:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	688a      	ldr	r2, [r1, #8]
 80033d0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033da:	2300      	movs	r3, #0
 80033dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80033e0:	4618      	mov	r0, r3
}
 80033e2:	bc30      	pop	{r4, r5}
 80033e4:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ea:	684d      	ldr	r5, [r1, #4]
 80033ec:	432b      	orrs	r3, r5
 80033ee:	e7dc      	b.n	80033aa <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80033f0:	2002      	movs	r0, #2
}
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00

080033f8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f8:	4770      	bx	lr

080033fa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033fa:	4770      	bx	lr

080033fc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033fc:	4770      	bx	lr
	...

08003400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003400:	b510      	push	{r4, lr}
 8003402:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003404:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003406:	6883      	ldr	r3, [r0, #8]
 8003408:	6902      	ldr	r2, [r0, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	6942      	ldr	r2, [r0, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	69c2      	ldr	r2, [r0, #28]
 8003412:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003414:	6808      	ldr	r0, [r1, #0]
 8003416:	4a8c      	ldr	r2, [pc, #560]	; (8003648 <UART_SetConfig+0x248>)
 8003418:	4002      	ands	r2, r0
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	6853      	ldr	r3, [r2, #4]
 8003422:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003426:	68e1      	ldr	r1, [r4, #12]
 8003428:	430b      	orrs	r3, r1
 800342a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800342c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	4b86      	ldr	r3, [pc, #536]	; (800364c <UART_SetConfig+0x24c>)
 8003432:	429a      	cmp	r2, r3
 8003434:	d001      	beq.n	800343a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003436:	6a23      	ldr	r3, [r4, #32]
 8003438:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800343a:	6893      	ldr	r3, [r2, #8]
 800343c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003440:	430b      	orrs	r3, r1
 8003442:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	4a82      	ldr	r2, [pc, #520]	; (8003650 <UART_SetConfig+0x250>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01c      	beq.n	8003486 <UART_SetConfig+0x86>
 800344c:	4a81      	ldr	r2, [pc, #516]	; (8003654 <UART_SetConfig+0x254>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02d      	beq.n	80034ae <UART_SetConfig+0xae>
 8003452:	4a7e      	ldr	r2, [pc, #504]	; (800364c <UART_SetConfig+0x24c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d043      	beq.n	80034e0 <UART_SetConfig+0xe0>
 8003458:	2210      	movs	r2, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800345a:	497c      	ldr	r1, [pc, #496]	; (800364c <UART_SetConfig+0x24c>)
 800345c:	428b      	cmp	r3, r1
 800345e:	d060      	beq.n	8003522 <UART_SetConfig+0x122>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003460:	69e0      	ldr	r0, [r4, #28]
 8003462:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003466:	f000 808c 	beq.w	8003582 <UART_SetConfig+0x182>
      }
    }
  }
  else
  {
    switch (clocksource)
 800346a:	2a08      	cmp	r2, #8
 800346c:	f200 80e5 	bhi.w	800363a <UART_SetConfig+0x23a>
 8003470:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003474:	00ca00b4 	.word	0x00ca00b4
 8003478:	00e300b2 	.word	0x00e300b2
 800347c:	00e300cd 	.word	0x00e300cd
 8003480:	00e300e3 	.word	0x00e300e3
 8003484:	00d0      	.short	0x00d0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003486:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800348a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	2a03      	cmp	r2, #3
 8003494:	d809      	bhi.n	80034aa <UART_SetConfig+0xaa>
 8003496:	e8df f002 	tbb	[pc, r2]
 800349a:	0402      	.short	0x0402
 800349c:	0638      	.short	0x0638
 800349e:	2201      	movs	r2, #1
 80034a0:	e7db      	b.n	800345a <UART_SetConfig+0x5a>
 80034a2:	2204      	movs	r2, #4
 80034a4:	e7d9      	b.n	800345a <UART_SetConfig+0x5a>
 80034a6:	2208      	movs	r2, #8
 80034a8:	e7d7      	b.n	800345a <UART_SetConfig+0x5a>
 80034aa:	2210      	movs	r2, #16
 80034ac:	e7d5      	b.n	800345a <UART_SetConfig+0x5a>
 80034ae:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80034b2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80034b6:	f002 020c 	and.w	r2, r2, #12
 80034ba:	2a0c      	cmp	r2, #12
 80034bc:	d80e      	bhi.n	80034dc <UART_SetConfig+0xdc>
 80034be:	e8df f002 	tbb	[pc, r2]
 80034c2:	0d07      	.short	0x0d07
 80034c4:	0d090d0d 	.word	0x0d090d0d
 80034c8:	0d260d0d 	.word	0x0d260d0d
 80034cc:	0d0d      	.short	0x0d0d
 80034ce:	0b          	.byte	0x0b
 80034cf:	00          	.byte	0x00
 80034d0:	2200      	movs	r2, #0
 80034d2:	e7c2      	b.n	800345a <UART_SetConfig+0x5a>
 80034d4:	2204      	movs	r2, #4
 80034d6:	e7c0      	b.n	800345a <UART_SetConfig+0x5a>
 80034d8:	2208      	movs	r2, #8
 80034da:	e7be      	b.n	800345a <UART_SetConfig+0x5a>
 80034dc:	2210      	movs	r2, #16
 80034de:	e7bc      	b.n	800345a <UART_SetConfig+0x5a>
 80034e0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80034e4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80034e8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80034ec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80034f0:	d00f      	beq.n	8003512 <UART_SetConfig+0x112>
 80034f2:	d805      	bhi.n	8003500 <UART_SetConfig+0x100>
 80034f4:	b17a      	cbz	r2, 8003516 <UART_SetConfig+0x116>
 80034f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80034fa:	d10e      	bne.n	800351a <UART_SetConfig+0x11a>
 80034fc:	2204      	movs	r2, #4
 80034fe:	e7ac      	b.n	800345a <UART_SetConfig+0x5a>
 8003500:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003504:	d10b      	bne.n	800351e <UART_SetConfig+0x11e>
 8003506:	2208      	movs	r2, #8
 8003508:	e7a7      	b.n	800345a <UART_SetConfig+0x5a>
 800350a:	2202      	movs	r2, #2
 800350c:	e7a5      	b.n	800345a <UART_SetConfig+0x5a>
 800350e:	2202      	movs	r2, #2
 8003510:	e7a3      	b.n	800345a <UART_SetConfig+0x5a>
 8003512:	2202      	movs	r2, #2
 8003514:	e7a1      	b.n	800345a <UART_SetConfig+0x5a>
 8003516:	2200      	movs	r2, #0
 8003518:	e79f      	b.n	800345a <UART_SetConfig+0x5a>
 800351a:	2210      	movs	r2, #16
 800351c:	e79d      	b.n	800345a <UART_SetConfig+0x5a>
 800351e:	2210      	movs	r2, #16
 8003520:	e79b      	b.n	800345a <UART_SetConfig+0x5a>
    switch (clocksource)
 8003522:	2a08      	cmp	r2, #8
 8003524:	d879      	bhi.n	800361a <UART_SetConfig+0x21a>
 8003526:	e8df f002 	tbb	[pc, r2]
 800352a:	7808      	.short	0x7808
 800352c:	7827782a 	.word	0x7827782a
 8003530:	7878      	.short	0x7878
 8003532:	05          	.byte	0x05
 8003533:	00          	.byte	0x00
 8003534:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003538:	e003      	b.n	8003542 <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7ff f839 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800353e:	2800      	cmp	r0, #0
 8003540:	d06d      	beq.n	800361e <UART_SetConfig+0x21e>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003542:	6862      	ldr	r2, [r4, #4]
 8003544:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003548:	4283      	cmp	r3, r0
 800354a:	d86a      	bhi.n	8003622 <UART_SetConfig+0x222>
 800354c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003550:	d869      	bhi.n	8003626 <UART_SetConfig+0x226>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003552:	0e01      	lsrs	r1, r0, #24
 8003554:	0200      	lsls	r0, r0, #8
 8003556:	0853      	lsrs	r3, r2, #1
 8003558:	18c0      	adds	r0, r0, r3
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f141 0100 	adc.w	r1, r1, #0
 8003562:	f7fc fe33 	bl	80001cc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003566:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <UART_SetConfig+0x258>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d85c      	bhi.n	800362a <UART_SetConfig+0x22a>
          huart->Instance->BRR = usartdiv;
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	60d8      	str	r0, [r3, #12]
 8003574:	2000      	movs	r0, #0
 8003576:	e043      	b.n	8003600 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 8003578:	f7fe fbc0 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
        break;
 800357c:	e7df      	b.n	800353e <UART_SetConfig+0x13e>
        pclk = (uint32_t) HSI_VALUE;
 800357e:	4837      	ldr	r0, [pc, #220]	; (800365c <UART_SetConfig+0x25c>)
 8003580:	e7df      	b.n	8003542 <UART_SetConfig+0x142>
    switch (clocksource)
 8003582:	2a08      	cmp	r2, #8
 8003584:	d853      	bhi.n	800362e <UART_SetConfig+0x22e>
 8003586:	e8df f002 	tbb	[pc, r2]
 800358a:	2107      	.short	0x2107
 800358c:	52245205 	.word	0x52245205
 8003590:	5252      	.short	0x5252
 8003592:	0b          	.byte	0x0b
 8003593:	00          	.byte	0x00
 8003594:	4831      	ldr	r0, [pc, #196]	; (800365c <UART_SetConfig+0x25c>)
 8003596:	e003      	b.n	80035a0 <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7ff f80a 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800359c:	2800      	cmp	r0, #0
 800359e:	d048      	beq.n	8003632 <UART_SetConfig+0x232>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a0:	6862      	ldr	r2, [r4, #4]
 80035a2:	0853      	lsrs	r3, r2, #1
 80035a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80035a8:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	f1a0 0210 	sub.w	r2, r0, #16
 80035b0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d83e      	bhi.n	8003636 <UART_SetConfig+0x236>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035b8:	b283      	uxth	r3, r0
 80035ba:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035be:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80035c2:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	60d8      	str	r0, [r3, #12]
 80035c8:	2000      	movs	r0, #0
 80035ca:	e019      	b.n	8003600 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7ff f802 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
        break;
 80035d0:	e7e4      	b.n	800359c <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7fe fb93 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
        break;
 80035d6:	e7e1      	b.n	800359c <UART_SetConfig+0x19c>
    switch (clocksource)
 80035d8:	4820      	ldr	r0, [pc, #128]	; (800365c <UART_SetConfig+0x25c>)
 80035da:	e002      	b.n	80035e2 <UART_SetConfig+0x1e2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7fe ffe8 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80035e0:	b368      	cbz	r0, 800363e <UART_SetConfig+0x23e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80035e8:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ec:	f1a0 0210 	sub.w	r2, r0, #16
 80035f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d824      	bhi.n	8003642 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	b280      	uxth	r0, r0
 80035fc:	60d8      	str	r0, [r3, #12]
 80035fe:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003604:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8003606:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7fe ffe4 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
        break;
 800360c:	e7e8      	b.n	80035e0 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7fe fb75 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
        break;
 8003612:	e7e5      	b.n	80035e0 <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8003614:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003618:	e7e3      	b.n	80035e2 <UART_SetConfig+0x1e2>
    switch (clocksource)
 800361a:	2001      	movs	r0, #1
 800361c:	e7f0      	b.n	8003600 <UART_SetConfig+0x200>
 800361e:	2000      	movs	r0, #0
 8003620:	e7ee      	b.n	8003600 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8003622:	2001      	movs	r0, #1
 8003624:	e7ec      	b.n	8003600 <UART_SetConfig+0x200>
 8003626:	2001      	movs	r0, #1
 8003628:	e7ea      	b.n	8003600 <UART_SetConfig+0x200>
          ret = HAL_ERROR;
 800362a:	2001      	movs	r0, #1
 800362c:	e7e8      	b.n	8003600 <UART_SetConfig+0x200>
    switch (clocksource)
 800362e:	2001      	movs	r0, #1
 8003630:	e7e6      	b.n	8003600 <UART_SetConfig+0x200>
 8003632:	2000      	movs	r0, #0
 8003634:	e7e4      	b.n	8003600 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8003636:	2001      	movs	r0, #1
 8003638:	e7e2      	b.n	8003600 <UART_SetConfig+0x200>
    switch (clocksource)
 800363a:	2001      	movs	r0, #1
 800363c:	e7e0      	b.n	8003600 <UART_SetConfig+0x200>
 800363e:	2000      	movs	r0, #0
 8003640:	e7de      	b.n	8003600 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8003642:	2001      	movs	r0, #1
 8003644:	e7dc      	b.n	8003600 <UART_SetConfig+0x200>
 8003646:	bf00      	nop
 8003648:	efff69f3 	.word	0xefff69f3
 800364c:	40008000 	.word	0x40008000
 8003650:	40013800 	.word	0x40013800
 8003654:	40004400 	.word	0x40004400
 8003658:	000ffcff 	.word	0x000ffcff
 800365c:	00f42400 	.word	0x00f42400

08003660 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003660:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003662:	f013 0f01 	tst.w	r3, #1
 8003666:	d006      	beq.n	8003676 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003668:	6802      	ldr	r2, [r0, #0]
 800366a:	6853      	ldr	r3, [r2, #4]
 800366c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003670:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003672:	430b      	orrs	r3, r1
 8003674:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003676:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003678:	f013 0f02 	tst.w	r3, #2
 800367c:	d006      	beq.n	800368c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800367e:	6802      	ldr	r2, [r0, #0]
 8003680:	6853      	ldr	r3, [r2, #4]
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003688:	430b      	orrs	r3, r1
 800368a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800368c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800368e:	f013 0f04 	tst.w	r3, #4
 8003692:	d006      	beq.n	80036a2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003694:	6802      	ldr	r2, [r0, #0]
 8003696:	6853      	ldr	r3, [r2, #4]
 8003698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800369e:	430b      	orrs	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036a4:	f013 0f08 	tst.w	r3, #8
 80036a8:	d006      	beq.n	80036b8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036aa:	6802      	ldr	r2, [r0, #0]
 80036ac:	6853      	ldr	r3, [r2, #4]
 80036ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036b2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036ba:	f013 0f10 	tst.w	r3, #16
 80036be:	d006      	beq.n	80036ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c0:	6802      	ldr	r2, [r0, #0]
 80036c2:	6893      	ldr	r3, [r2, #8]
 80036c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036d0:	f013 0f20 	tst.w	r3, #32
 80036d4:	d006      	beq.n	80036e4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d6:	6802      	ldr	r2, [r0, #0]
 80036d8:	6893      	ldr	r3, [r2, #8]
 80036da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036de:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ec:	6802      	ldr	r2, [r0, #0]
 80036ee:	6853      	ldr	r3, [r2, #4]
 80036f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003700:	d00b      	beq.n	800371a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003702:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003704:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003708:	d006      	beq.n	8003718 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800370a:	6802      	ldr	r2, [r0, #0]
 800370c:	6853      	ldr	r3, [r2, #4]
 800370e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003712:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003714:	430b      	orrs	r3, r1
 8003716:	6053      	str	r3, [r2, #4]
  }
}
 8003718:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800371a:	6802      	ldr	r2, [r0, #0]
 800371c:	6853      	ldr	r3, [r2, #4]
 800371e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003722:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003724:	430b      	orrs	r3, r1
 8003726:	6053      	str	r3, [r2, #4]
 8003728:	e7eb      	b.n	8003702 <UART_AdvFeatureConfig+0xa2>

0800372a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800372a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	460f      	mov	r7, r1
 8003732:	4616      	mov	r6, r2
 8003734:	4699      	mov	r9, r3
 8003736:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373a:	682c      	ldr	r4, [r5, #0]
 800373c:	69e4      	ldr	r4, [r4, #28]
 800373e:	ea37 0304 	bics.w	r3, r7, r4
 8003742:	bf0c      	ite	eq
 8003744:	f04f 0c01 	moveq.w	ip, #1
 8003748:	f04f 0c00 	movne.w	ip, #0
 800374c:	45b4      	cmp	ip, r6
 800374e:	d153      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003750:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003754:	d0f1      	beq.n	800373a <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fd fe49 	bl	80013ec <HAL_GetTick>
 800375a:	eba0 0009 	sub.w	r0, r0, r9
 800375e:	4540      	cmp	r0, r8
 8003760:	d82d      	bhi.n	80037be <UART_WaitOnFlagUntilTimeout+0x94>
 8003762:	f1b8 0f00 	cmp.w	r8, #0
 8003766:	d02a      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0x94>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f012 0f04 	tst.w	r2, #4
 8003770:	d0e3      	beq.n	800373a <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003778:	d0df      	beq.n	800373a <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800377a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377e:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003780:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	e852 3f00 	ldrex	r3, [r2]
 8003786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	e842 3100 	strex	r1, r3, [r2]
 800378e:	2900      	cmp	r1, #0
 8003790:	d1f6      	bne.n	8003780 <UART_WaitOnFlagUntilTimeout+0x56>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003792:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	f102 0308 	add.w	r3, r2, #8
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	3208      	adds	r2, #8
 80037a2:	e842 3100 	strex	r1, r3, [r2]
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d1f3      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 80037aa:	2320      	movs	r3, #32
 80037ac:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037ae:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b4:	2300      	movs	r3, #0
 80037b6:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 80037ba:	2003      	movs	r0, #3
 80037bc:	e01d      	b.n	80037fa <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037be:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	e852 3f00 	ldrex	r3, [r2]
 80037c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	e842 3100 	strex	r1, r3, [r2]
 80037cc:	2900      	cmp	r1, #0
 80037ce:	d1f6      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	f102 0308 	add.w	r3, r2, #8
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	3208      	adds	r2, #8
 80037e0:	e842 3100 	strex	r1, r3, [r2]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d1f3      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80037e8:	2320      	movs	r3, #32
 80037ea:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037ec:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80037ee:	2300      	movs	r3, #0
 80037f0:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 80037f4:	2003      	movs	r0, #3
 80037f6:	e000      	b.n	80037fa <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 80037f8:	2000      	movs	r0, #0
}
 80037fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080037fe <HAL_UART_Transmit>:
{
 80037fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003806:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003808:	2b20      	cmp	r3, #32
 800380a:	d156      	bne.n	80038ba <HAL_UART_Transmit+0xbc>
 800380c:	4604      	mov	r4, r0
 800380e:	460d      	mov	r5, r1
 8003810:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003812:	2900      	cmp	r1, #0
 8003814:	d055      	beq.n	80038c2 <HAL_UART_Transmit+0xc4>
 8003816:	2a00      	cmp	r2, #0
 8003818:	d055      	beq.n	80038c6 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800381a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800381e:	2b01      	cmp	r3, #1
 8003820:	d053      	beq.n	80038ca <HAL_UART_Transmit+0xcc>
 8003822:	2301      	movs	r3, #1
 8003824:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382e:	2321      	movs	r3, #33	; 0x21
 8003830:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003832:	f7fd fddb 	bl	80013ec <HAL_GetTick>
 8003836:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003838:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800383c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68a3      	ldr	r3, [r4, #8]
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003846:	d005      	beq.n	8003854 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8003848:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800384c:	2300      	movs	r3, #0
 800384e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003852:	e014      	b.n	800387e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	b113      	cbz	r3, 800385e <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8003858:	f04f 0800 	mov.w	r8, #0
 800385c:	e7f6      	b.n	800384c <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 800385e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003860:	2500      	movs	r5, #0
 8003862:	e7f3      	b.n	800384c <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003864:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003870:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003874:	b292      	uxth	r2, r2
 8003876:	3a01      	subs	r2, #1
 8003878:	b292      	uxth	r2, r2
 800387a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800387e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003882:	b29b      	uxth	r3, r3
 8003884:	b173      	cbz	r3, 80038a4 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	9600      	str	r6, [sp, #0]
 8003888:	463b      	mov	r3, r7
 800388a:	2200      	movs	r2, #0
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	4620      	mov	r0, r4
 8003890:	f7ff ff4b 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 8003894:	b9d8      	cbnz	r0, 80038ce <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8003896:	2d00      	cmp	r5, #0
 8003898:	d0e4      	beq.n	8003864 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	f815 2b01 	ldrb.w	r2, [r5], #1
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038a2:	e7e5      	b.n	8003870 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a4:	9600      	str	r6, [sp, #0]
 80038a6:	463b      	mov	r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	2140      	movs	r1, #64	; 0x40
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7ff ff3c 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 80038b2:	b970      	cbnz	r0, 80038d2 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80038b4:	2320      	movs	r3, #32
 80038b6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80038b8:	e000      	b.n	80038bc <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80038ba:	2002      	movs	r0, #2
}
 80038bc:	b002      	add	sp, #8
 80038be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80038c2:	2001      	movs	r0, #1
 80038c4:	e7fa      	b.n	80038bc <HAL_UART_Transmit+0xbe>
 80038c6:	2001      	movs	r0, #1
 80038c8:	e7f8      	b.n	80038bc <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80038ca:	2002      	movs	r0, #2
 80038cc:	e7f6      	b.n	80038bc <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80038ce:	2003      	movs	r0, #3
 80038d0:	e7f4      	b.n	80038bc <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e7f2      	b.n	80038bc <HAL_UART_Transmit+0xbe>

080038d6 <UART_CheckIdleState>:
{
 80038d6:	b530      	push	{r4, r5, lr}
 80038d8:	b083      	sub	sp, #12
 80038da:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80038e2:	f7fd fd83 	bl	80013ec <HAL_GetTick>
 80038e6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	f012 0f08 	tst.w	r2, #8
 80038f0:	d10d      	bne.n	800390e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f013 0f04 	tst.w	r3, #4
 80038fa:	d116      	bne.n	800392a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	2320      	movs	r3, #32
 80038fe:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	2000      	movs	r0, #0
 8003904:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003906:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 800390a:	b003      	add	sp, #12
 800390c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800390e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	4603      	mov	r3, r0
 8003916:	2200      	movs	r2, #0
 8003918:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff ff04 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 8003922:	2800      	cmp	r0, #0
 8003924:	d0e5      	beq.n	80038f2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8003926:	2003      	movs	r0, #3
 8003928:	e7ef      	b.n	800390a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	462b      	mov	r3, r5
 8003932:	2200      	movs	r2, #0
 8003934:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003938:	4620      	mov	r0, r4
 800393a:	f7ff fef6 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 800393e:	2800      	cmp	r0, #0
 8003940:	d0dc      	beq.n	80038fc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8003942:	2003      	movs	r0, #3
 8003944:	e7e1      	b.n	800390a <UART_CheckIdleState+0x34>

08003946 <HAL_UART_Init>:
  if (huart == NULL)
 8003946:	b368      	cbz	r0, 80039a4 <HAL_UART_Init+0x5e>
{
 8003948:	b510      	push	{r4, lr}
 800394a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800394c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800394e:	b303      	cbz	r3, 8003992 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	2324      	movs	r3, #36	; 0x24
 8003952:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fd4e 	bl	8003400 <UART_SetConfig>
 8003964:	2801      	cmp	r0, #1
 8003966:	d013      	beq.n	8003990 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800396a:	b9bb      	cbnz	r3, 800399c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	6853      	ldr	r3, [r2, #4]
 8003970:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003974:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6893      	ldr	r3, [r2, #8]
 800397a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800397e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800398a:	4620      	mov	r0, r4
 800398c:	f7ff ffa3 	bl	80038d6 <UART_CheckIdleState>
}
 8003990:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003992:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003996:	f7fd fc4d 	bl	8001234 <HAL_UART_MspInit>
 800399a:	e7d9      	b.n	8003950 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff fe5f 	bl	8003660 <UART_AdvFeatureConfig>
 80039a2:	e7e3      	b.n	800396c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80039a4:	2001      	movs	r0, #1
}
 80039a6:	4770      	bx	lr

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4d0d      	ldr	r5, [pc, #52]	; (80039e0 <__libc_init_array+0x38>)
 80039ac:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <__libc_init_array+0x3c>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	2600      	movs	r6, #0
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	4d0b      	ldr	r5, [pc, #44]	; (80039e8 <__libc_init_array+0x40>)
 80039ba:	4c0c      	ldr	r4, [pc, #48]	; (80039ec <__libc_init_array+0x44>)
 80039bc:	f000 f820 	bl	8003a00 <_init>
 80039c0:	1b64      	subs	r4, r4, r5
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	2600      	movs	r6, #0
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	08003a84 	.word	0x08003a84
 80039e4:	08003a84 	.word	0x08003a84
 80039e8:	08003a84 	.word	0x08003a84
 80039ec:	08003a88 	.word	0x08003a88

080039f0 <memset>:
 80039f0:	4402      	add	r2, r0
 80039f2:	4603      	mov	r3, r0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d100      	bne.n	80039fa <memset+0xa>
 80039f8:	4770      	bx	lr
 80039fa:	f803 1b01 	strb.w	r1, [r3], #1
 80039fe:	e7f9      	b.n	80039f4 <memset+0x4>

08003a00 <_init>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr

08003a0c <_fini>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr
