
AMS-CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006218  08006218  00016218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062ec  080062ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f4  080062f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080062fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000010  0800630c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800630c  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001663e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d23  00000000  00000000  0003667e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000393a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010bbe  00000000  00000000  0003b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005c3a  00000000  00000000  0004c4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00052108  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005280  00000000  00000000  00052158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006200 	.word	0x08006200

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08006200 	.word	0x08006200

080001cc <__aeabi_dmul>:
 80001cc:	b570      	push	{r4, r5, r6, lr}
 80001ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001da:	bf1d      	ittte	ne
 80001dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e0:	ea94 0f0c 	teqne	r4, ip
 80001e4:	ea95 0f0c 	teqne	r5, ip
 80001e8:	f000 f8de 	bleq	80003a8 <__aeabi_dmul+0x1dc>
 80001ec:	442c      	add	r4, r5
 80001ee:	ea81 0603 	eor.w	r6, r1, r3
 80001f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fe:	bf18      	it	ne
 8000200:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800020c:	d038      	beq.n	8000280 <__aeabi_dmul+0xb4>
 800020e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000212:	f04f 0500 	mov.w	r5, #0
 8000216:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000222:	f04f 0600 	mov.w	r6, #0
 8000226:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022a:	f09c 0f00 	teq	ip, #0
 800022e:	bf18      	it	ne
 8000230:	f04e 0e01 	orrne.w	lr, lr, #1
 8000234:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000238:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800023c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000240:	d204      	bcs.n	800024c <__aeabi_dmul+0x80>
 8000242:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000246:	416d      	adcs	r5, r5
 8000248:	eb46 0606 	adc.w	r6, r6, r6
 800024c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000250:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000254:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000258:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800025c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000260:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000264:	bf88      	it	hi
 8000266:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026a:	d81e      	bhi.n	80002aa <__aeabi_dmul+0xde>
 800026c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000270:	bf08      	it	eq
 8000272:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000276:	f150 0000 	adcs.w	r0, r0, #0
 800027a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000284:	ea46 0101 	orr.w	r1, r6, r1
 8000288:	ea40 0002 	orr.w	r0, r0, r2
 800028c:	ea81 0103 	eor.w	r1, r1, r3
 8000290:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000294:	bfc2      	ittt	gt
 8000296:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029e:	bd70      	popgt	{r4, r5, r6, pc}
 80002a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a4:	f04f 0e00 	mov.w	lr, #0
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f300 80ab 	bgt.w	8000404 <__aeabi_dmul+0x238>
 80002ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b2:	bfde      	ittt	le
 80002b4:	2000      	movle	r0, #0
 80002b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ba:	bd70      	pople	{r4, r5, r6, pc}
 80002bc:	f1c4 0400 	rsb	r4, r4, #0
 80002c0:	3c20      	subs	r4, #32
 80002c2:	da35      	bge.n	8000330 <__aeabi_dmul+0x164>
 80002c4:	340c      	adds	r4, #12
 80002c6:	dc1b      	bgt.n	8000300 <__aeabi_dmul+0x134>
 80002c8:	f104 0414 	add.w	r4, r4, #20
 80002cc:	f1c4 0520 	rsb	r5, r4, #32
 80002d0:	fa00 f305 	lsl.w	r3, r0, r5
 80002d4:	fa20 f004 	lsr.w	r0, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ec:	fa21 f604 	lsr.w	r6, r1, r4
 80002f0:	eb42 0106 	adc.w	r1, r2, r6
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f1c4 040c 	rsb	r4, r4, #12
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f304 	lsl.w	r3, r0, r4
 800030c:	fa20 f005 	lsr.w	r0, r0, r5
 8000310:	fa01 f204 	lsl.w	r2, r1, r4
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f205 	lsl.w	r2, r0, r5
 8000338:	ea4e 0e02 	orr.w	lr, lr, r2
 800033c:	fa20 f304 	lsr.w	r3, r0, r4
 8000340:	fa01 f205 	lsl.w	r2, r1, r5
 8000344:	ea43 0302 	orr.w	r3, r3, r2
 8000348:	fa21 f004 	lsr.w	r0, r1, r4
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	fa21 f204 	lsr.w	r2, r1, r4
 8000354:	ea20 0002 	bic.w	r0, r0, r2
 8000358:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f094 0f00 	teq	r4, #0
 800036c:	d10f      	bne.n	800038e <__aeabi_dmul+0x1c2>
 800036e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000372:	0040      	lsls	r0, r0, #1
 8000374:	eb41 0101 	adc.w	r1, r1, r1
 8000378:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037c:	bf08      	it	eq
 800037e:	3c01      	subeq	r4, #1
 8000380:	d0f7      	beq.n	8000372 <__aeabi_dmul+0x1a6>
 8000382:	ea41 0106 	orr.w	r1, r1, r6
 8000386:	f095 0f00 	teq	r5, #0
 800038a:	bf18      	it	ne
 800038c:	4770      	bxne	lr
 800038e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000392:	0052      	lsls	r2, r2, #1
 8000394:	eb43 0303 	adc.w	r3, r3, r3
 8000398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3d01      	subeq	r5, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1c6>
 80003a2:	ea43 0306 	orr.w	r3, r3, r6
 80003a6:	4770      	bx	lr
 80003a8:	ea94 0f0c 	teq	r4, ip
 80003ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b0:	bf18      	it	ne
 80003b2:	ea95 0f0c 	teqne	r5, ip
 80003b6:	d00c      	beq.n	80003d2 <__aeabi_dmul+0x206>
 80003b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003bc:	bf18      	it	ne
 80003be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c2:	d1d1      	bne.n	8000368 <__aeabi_dmul+0x19c>
 80003c4:	ea81 0103 	eor.w	r1, r1, r3
 80003c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
 80003d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d6:	bf06      	itte	eq
 80003d8:	4610      	moveq	r0, r2
 80003da:	4619      	moveq	r1, r3
 80003dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e0:	d019      	beq.n	8000416 <__aeabi_dmul+0x24a>
 80003e2:	ea94 0f0c 	teq	r4, ip
 80003e6:	d102      	bne.n	80003ee <__aeabi_dmul+0x222>
 80003e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ec:	d113      	bne.n	8000416 <__aeabi_dmul+0x24a>
 80003ee:	ea95 0f0c 	teq	r5, ip
 80003f2:	d105      	bne.n	8000400 <__aeabi_dmul+0x234>
 80003f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f8:	bf1c      	itt	ne
 80003fa:	4610      	movne	r0, r2
 80003fc:	4619      	movne	r1, r3
 80003fe:	d10a      	bne.n	8000416 <__aeabi_dmul+0x24a>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800040c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041e:	bd70      	pop	{r4, r5, r6, pc}

08000420 <__aeabi_drsub>:
 8000420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000424:	e002      	b.n	800042c <__adddf3>
 8000426:	bf00      	nop

08000428 <__aeabi_dsub>:
 8000428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800042c <__adddf3>:
 800042c:	b530      	push	{r4, r5, lr}
 800042e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000432:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	bf1f      	itttt	ne
 8000442:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000446:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000452:	f000 80e2 	beq.w	800061a <__adddf3+0x1ee>
 8000456:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045e:	bfb8      	it	lt
 8000460:	426d      	neglt	r5, r5
 8000462:	dd0c      	ble.n	800047e <__adddf3+0x52>
 8000464:	442c      	add	r4, r5
 8000466:	ea80 0202 	eor.w	r2, r0, r2
 800046a:	ea81 0303 	eor.w	r3, r1, r3
 800046e:	ea82 0000 	eor.w	r0, r2, r0
 8000472:	ea83 0101 	eor.w	r1, r3, r1
 8000476:	ea80 0202 	eor.w	r2, r0, r2
 800047a:	ea81 0303 	eor.w	r3, r1, r3
 800047e:	2d36      	cmp	r5, #54	; 0x36
 8000480:	bf88      	it	hi
 8000482:	bd30      	pophi	{r4, r5, pc}
 8000484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000488:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800048c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000494:	d002      	beq.n	800049c <__adddf3+0x70>
 8000496:	4240      	negs	r0, r0
 8000498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x84>
 80004aa:	4252      	negs	r2, r2
 80004ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b0:	ea94 0f05 	teq	r4, r5
 80004b4:	f000 80a7 	beq.w	8000606 <__adddf3+0x1da>
 80004b8:	f1a4 0401 	sub.w	r4, r4, #1
 80004bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c0:	db0d      	blt.n	80004de <__adddf3+0xb2>
 80004c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ca:	1880      	adds	r0, r0, r2
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d4:	1880      	adds	r0, r0, r2
 80004d6:	fa43 f305 	asr.w	r3, r3, r5
 80004da:	4159      	adcs	r1, r3
 80004dc:	e00e      	b.n	80004fc <__adddf3+0xd0>
 80004de:	f1a5 0520 	sub.w	r5, r5, #32
 80004e2:	f10e 0e20 	add.w	lr, lr, #32
 80004e6:	2a01      	cmp	r2, #1
 80004e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ec:	bf28      	it	cs
 80004ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	18c0      	adds	r0, r0, r3
 80004f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	d507      	bpl.n	8000512 <__adddf3+0xe6>
 8000502:	f04f 0e00 	mov.w	lr, #0
 8000506:	f1dc 0c00 	rsbs	ip, ip, #0
 800050a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000516:	d31b      	bcc.n	8000550 <__adddf3+0x124>
 8000518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800051c:	d30c      	bcc.n	8000538 <__adddf3+0x10c>
 800051e:	0849      	lsrs	r1, r1, #1
 8000520:	ea5f 0030 	movs.w	r0, r0, rrx
 8000524:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000528:	f104 0401 	add.w	r4, r4, #1
 800052c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000534:	f080 809a 	bcs.w	800066c <__adddf3+0x240>
 8000538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800053c:	bf08      	it	eq
 800053e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000542:	f150 0000 	adcs.w	r0, r0, #0
 8000546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054a:	ea41 0105 	orr.w	r1, r1, r5
 800054e:	bd30      	pop	{r4, r5, pc}
 8000550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000554:	4140      	adcs	r0, r0
 8000556:	eb41 0101 	adc.w	r1, r1, r1
 800055a:	3c01      	subs	r4, #1
 800055c:	bf28      	it	cs
 800055e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000562:	d2e9      	bcs.n	8000538 <__adddf3+0x10c>
 8000564:	f091 0f00 	teq	r1, #0
 8000568:	bf04      	itt	eq
 800056a:	4601      	moveq	r1, r0
 800056c:	2000      	moveq	r0, #0
 800056e:	fab1 f381 	clz	r3, r1
 8000572:	bf08      	it	eq
 8000574:	3320      	addeq	r3, #32
 8000576:	f1a3 030b 	sub.w	r3, r3, #11
 800057a:	f1b3 0220 	subs.w	r2, r3, #32
 800057e:	da0c      	bge.n	800059a <__adddf3+0x16e>
 8000580:	320c      	adds	r2, #12
 8000582:	dd08      	ble.n	8000596 <__adddf3+0x16a>
 8000584:	f102 0c14 	add.w	ip, r2, #20
 8000588:	f1c2 020c 	rsb	r2, r2, #12
 800058c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000590:	fa21 f102 	lsr.w	r1, r1, r2
 8000594:	e00c      	b.n	80005b0 <__adddf3+0x184>
 8000596:	f102 0214 	add.w	r2, r2, #20
 800059a:	bfd8      	it	le
 800059c:	f1c2 0c20 	rsble	ip, r2, #32
 80005a0:	fa01 f102 	lsl.w	r1, r1, r2
 80005a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a8:	bfdc      	itt	le
 80005aa:	ea41 010c 	orrle.w	r1, r1, ip
 80005ae:	4090      	lslle	r0, r2
 80005b0:	1ae4      	subs	r4, r4, r3
 80005b2:	bfa2      	ittt	ge
 80005b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b8:	4329      	orrge	r1, r5
 80005ba:	bd30      	popge	{r4, r5, pc}
 80005bc:	ea6f 0404 	mvn.w	r4, r4
 80005c0:	3c1f      	subs	r4, #31
 80005c2:	da1c      	bge.n	80005fe <__adddf3+0x1d2>
 80005c4:	340c      	adds	r4, #12
 80005c6:	dc0e      	bgt.n	80005e6 <__adddf3+0x1ba>
 80005c8:	f104 0414 	add.w	r4, r4, #20
 80005cc:	f1c4 0220 	rsb	r2, r4, #32
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f302 	lsl.w	r3, r1, r2
 80005d8:	ea40 0003 	orr.w	r0, r0, r3
 80005dc:	fa21 f304 	lsr.w	r3, r1, r4
 80005e0:	ea45 0103 	orr.w	r1, r5, r3
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	f1c4 040c 	rsb	r4, r4, #12
 80005ea:	f1c4 0220 	rsb	r2, r4, #32
 80005ee:	fa20 f002 	lsr.w	r0, r0, r2
 80005f2:	fa01 f304 	lsl.w	r3, r1, r4
 80005f6:	ea40 0003 	orr.w	r0, r0, r3
 80005fa:	4629      	mov	r1, r5
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f094 0f00 	teq	r4, #0
 800060a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060e:	bf06      	itte	eq
 8000610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000614:	3401      	addeq	r4, #1
 8000616:	3d01      	subne	r5, #1
 8000618:	e74e      	b.n	80004b8 <__adddf3+0x8c>
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf18      	it	ne
 8000620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000624:	d029      	beq.n	800067a <__adddf3+0x24e>
 8000626:	ea94 0f05 	teq	r4, r5
 800062a:	bf08      	it	eq
 800062c:	ea90 0f02 	teqeq	r0, r2
 8000630:	d005      	beq.n	800063e <__adddf3+0x212>
 8000632:	ea54 0c00 	orrs.w	ip, r4, r0
 8000636:	bf04      	itt	eq
 8000638:	4619      	moveq	r1, r3
 800063a:	4610      	moveq	r0, r2
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	ea91 0f03 	teq	r1, r3
 8000642:	bf1e      	ittt	ne
 8000644:	2100      	movne	r1, #0
 8000646:	2000      	movne	r0, #0
 8000648:	bd30      	popne	{r4, r5, pc}
 800064a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064e:	d105      	bne.n	800065c <__adddf3+0x230>
 8000650:	0040      	lsls	r0, r0, #1
 8000652:	4149      	adcs	r1, r1
 8000654:	bf28      	it	cs
 8000656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd30      	pop	{r4, r5, pc}
 800065c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000660:	bf3c      	itt	cc
 8000662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000666:	bd30      	popcc	{r4, r5, pc}
 8000668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800066c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000674:	f04f 0000 	mov.w	r0, #0
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067e:	bf1a      	itte	ne
 8000680:	4619      	movne	r1, r3
 8000682:	4610      	movne	r0, r2
 8000684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000688:	bf1c      	itt	ne
 800068a:	460b      	movne	r3, r1
 800068c:	4602      	movne	r2, r0
 800068e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000692:	bf06      	itte	eq
 8000694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000698:	ea91 0f03 	teqeq	r1, r3
 800069c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	bf00      	nop

080006a4 <__aeabi_ui2d>:
 80006a4:	f090 0f00 	teq	r0, #0
 80006a8:	bf04      	itt	eq
 80006aa:	2100      	moveq	r1, #0
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b8:	f04f 0500 	mov.w	r5, #0
 80006bc:	f04f 0100 	mov.w	r1, #0
 80006c0:	e750      	b.n	8000564 <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_i2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e73e      	b.n	8000564 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_f2d>:
 80006e8:	0042      	lsls	r2, r0, #1
 80006ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f6:	bf1f      	itttt	ne
 80006f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000704:	4770      	bxne	lr
 8000706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070a:	bf08      	it	eq
 800070c:	4770      	bxeq	lr
 800070e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000712:	bf04      	itt	eq
 8000714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	e71c      	b.n	8000564 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_ul2d>:
 800072c:	ea50 0201 	orrs.w	r2, r0, r1
 8000730:	bf08      	it	eq
 8000732:	4770      	bxeq	lr
 8000734:	b530      	push	{r4, r5, lr}
 8000736:	f04f 0500 	mov.w	r5, #0
 800073a:	e00a      	b.n	8000752 <__aeabi_l2d+0x16>

0800073c <__aeabi_l2d>:
 800073c:	ea50 0201 	orrs.w	r2, r0, r1
 8000740:	bf08      	it	eq
 8000742:	4770      	bxeq	lr
 8000744:	b530      	push	{r4, r5, lr}
 8000746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074a:	d502      	bpl.n	8000752 <__aeabi_l2d+0x16>
 800074c:	4240      	negs	r0, r0
 800074e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000752:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000756:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075e:	f43f aed8 	beq.w	8000512 <__adddf3+0xe6>
 8000762:	f04f 0203 	mov.w	r2, #3
 8000766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076a:	bf18      	it	ne
 800076c:	3203      	addne	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077a:	f1c2 0320 	rsb	r3, r2, #32
 800077e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	fa01 fe03 	lsl.w	lr, r1, r3
 800078a:	ea40 000e 	orr.w	r0, r0, lr
 800078e:	fa21 f102 	lsr.w	r1, r1, r2
 8000792:	4414      	add	r4, r2
 8000794:	e6bd      	b.n	8000512 <__adddf3+0xe6>
 8000796:	bf00      	nop

08000798 <__aeabi_d2uiz>:
 8000798:	004a      	lsls	r2, r1, #1
 800079a:	d211      	bcs.n	80007c0 <__aeabi_d2uiz+0x28>
 800079c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a0:	d211      	bcs.n	80007c6 <__aeabi_d2uiz+0x2e>
 80007a2:	d50d      	bpl.n	80007c0 <__aeabi_d2uiz+0x28>
 80007a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007ac:	d40e      	bmi.n	80007cc <__aeabi_d2uiz+0x34>
 80007ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ca:	d102      	bne.n	80007d2 <__aeabi_d2uiz+0x3a>
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	4770      	bx	lr
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b974 	b.w	8000ad8 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9d08      	ldr	r5, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	468e      	mov	lr, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14d      	bne.n	80008b2 <__udivmoddi4+0xaa>
 8000816:	428a      	cmp	r2, r1
 8000818:	4694      	mov	ip, r2
 800081a:	d969      	bls.n	80008f0 <__udivmoddi4+0xe8>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b152      	cbz	r2, 8000838 <__udivmoddi4+0x30>
 8000822:	fa01 f302 	lsl.w	r3, r1, r2
 8000826:	f1c2 0120 	rsb	r1, r2, #32
 800082a:	fa20 f101 	lsr.w	r1, r0, r1
 800082e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000832:	ea41 0e03 	orr.w	lr, r1, r3
 8000836:	4094      	lsls	r4, r2
 8000838:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800083c:	0c21      	lsrs	r1, r4, #16
 800083e:	fbbe f6f8 	udiv	r6, lr, r8
 8000842:	fa1f f78c 	uxth.w	r7, ip
 8000846:	fb08 e316 	mls	r3, r8, r6, lr
 800084a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800084e:	fb06 f107 	mul.w	r1, r6, r7
 8000852:	4299      	cmp	r1, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x64>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f106 30ff 	add.w	r0, r6, #4294967295
 800085e:	f080 811f 	bcs.w	8000aa0 <__udivmoddi4+0x298>
 8000862:	4299      	cmp	r1, r3
 8000864:	f240 811c 	bls.w	8000aa0 <__udivmoddi4+0x298>
 8000868:	3e02      	subs	r6, #2
 800086a:	4463      	add	r3, ip
 800086c:	1a5b      	subs	r3, r3, r1
 800086e:	b2a4      	uxth	r4, r4
 8000870:	fbb3 f0f8 	udiv	r0, r3, r8
 8000874:	fb08 3310 	mls	r3, r8, r0, r3
 8000878:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800087c:	fb00 f707 	mul.w	r7, r0, r7
 8000880:	42a7      	cmp	r7, r4
 8000882:	d90a      	bls.n	800089a <__udivmoddi4+0x92>
 8000884:	eb1c 0404 	adds.w	r4, ip, r4
 8000888:	f100 33ff 	add.w	r3, r0, #4294967295
 800088c:	f080 810a 	bcs.w	8000aa4 <__udivmoddi4+0x29c>
 8000890:	42a7      	cmp	r7, r4
 8000892:	f240 8107 	bls.w	8000aa4 <__udivmoddi4+0x29c>
 8000896:	4464      	add	r4, ip
 8000898:	3802      	subs	r0, #2
 800089a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800089e:	1be4      	subs	r4, r4, r7
 80008a0:	2600      	movs	r6, #0
 80008a2:	b11d      	cbz	r5, 80008ac <__udivmoddi4+0xa4>
 80008a4:	40d4      	lsrs	r4, r2
 80008a6:	2300      	movs	r3, #0
 80008a8:	e9c5 4300 	strd	r4, r3, [r5]
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d909      	bls.n	80008ca <__udivmoddi4+0xc2>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	f000 80ef 	beq.w	8000a9a <__udivmoddi4+0x292>
 80008bc:	2600      	movs	r6, #0
 80008be:	e9c5 0100 	strd	r0, r1, [r5]
 80008c2:	4630      	mov	r0, r6
 80008c4:	4631      	mov	r1, r6
 80008c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ca:	fab3 f683 	clz	r6, r3
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d14a      	bne.n	8000968 <__udivmoddi4+0x160>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d302      	bcc.n	80008dc <__udivmoddi4+0xd4>
 80008d6:	4282      	cmp	r2, r0
 80008d8:	f200 80f9 	bhi.w	8000ace <__udivmoddi4+0x2c6>
 80008dc:	1a84      	subs	r4, r0, r2
 80008de:	eb61 0303 	sbc.w	r3, r1, r3
 80008e2:	2001      	movs	r0, #1
 80008e4:	469e      	mov	lr, r3
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d0e0      	beq.n	80008ac <__udivmoddi4+0xa4>
 80008ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ee:	e7dd      	b.n	80008ac <__udivmoddi4+0xa4>
 80008f0:	b902      	cbnz	r2, 80008f4 <__udivmoddi4+0xec>
 80008f2:	deff      	udf	#255	; 0xff
 80008f4:	fab2 f282 	clz	r2, r2
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	f040 8092 	bne.w	8000a22 <__udivmoddi4+0x21a>
 80008fe:	eba1 010c 	sub.w	r1, r1, ip
 8000902:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000906:	fa1f fe8c 	uxth.w	lr, ip
 800090a:	2601      	movs	r6, #1
 800090c:	0c20      	lsrs	r0, r4, #16
 800090e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000912:	fb07 1113 	mls	r1, r7, r3, r1
 8000916:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091a:	fb0e f003 	mul.w	r0, lr, r3
 800091e:	4288      	cmp	r0, r1
 8000920:	d908      	bls.n	8000934 <__udivmoddi4+0x12c>
 8000922:	eb1c 0101 	adds.w	r1, ip, r1
 8000926:	f103 38ff 	add.w	r8, r3, #4294967295
 800092a:	d202      	bcs.n	8000932 <__udivmoddi4+0x12a>
 800092c:	4288      	cmp	r0, r1
 800092e:	f200 80cb 	bhi.w	8000ac8 <__udivmoddi4+0x2c0>
 8000932:	4643      	mov	r3, r8
 8000934:	1a09      	subs	r1, r1, r0
 8000936:	b2a4      	uxth	r4, r4
 8000938:	fbb1 f0f7 	udiv	r0, r1, r7
 800093c:	fb07 1110 	mls	r1, r7, r0, r1
 8000940:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000944:	fb0e fe00 	mul.w	lr, lr, r0
 8000948:	45a6      	cmp	lr, r4
 800094a:	d908      	bls.n	800095e <__udivmoddi4+0x156>
 800094c:	eb1c 0404 	adds.w	r4, ip, r4
 8000950:	f100 31ff 	add.w	r1, r0, #4294967295
 8000954:	d202      	bcs.n	800095c <__udivmoddi4+0x154>
 8000956:	45a6      	cmp	lr, r4
 8000958:	f200 80bb 	bhi.w	8000ad2 <__udivmoddi4+0x2ca>
 800095c:	4608      	mov	r0, r1
 800095e:	eba4 040e 	sub.w	r4, r4, lr
 8000962:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000966:	e79c      	b.n	80008a2 <__udivmoddi4+0x9a>
 8000968:	f1c6 0720 	rsb	r7, r6, #32
 800096c:	40b3      	lsls	r3, r6
 800096e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000972:	ea4c 0c03 	orr.w	ip, ip, r3
 8000976:	fa20 f407 	lsr.w	r4, r0, r7
 800097a:	fa01 f306 	lsl.w	r3, r1, r6
 800097e:	431c      	orrs	r4, r3
 8000980:	40f9      	lsrs	r1, r7
 8000982:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000986:	fa00 f306 	lsl.w	r3, r0, r6
 800098a:	fbb1 f8f9 	udiv	r8, r1, r9
 800098e:	0c20      	lsrs	r0, r4, #16
 8000990:	fa1f fe8c 	uxth.w	lr, ip
 8000994:	fb09 1118 	mls	r1, r9, r8, r1
 8000998:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800099c:	fb08 f00e 	mul.w	r0, r8, lr
 80009a0:	4288      	cmp	r0, r1
 80009a2:	fa02 f206 	lsl.w	r2, r2, r6
 80009a6:	d90b      	bls.n	80009c0 <__udivmoddi4+0x1b8>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b0:	f080 8088 	bcs.w	8000ac4 <__udivmoddi4+0x2bc>
 80009b4:	4288      	cmp	r0, r1
 80009b6:	f240 8085 	bls.w	8000ac4 <__udivmoddi4+0x2bc>
 80009ba:	f1a8 0802 	sub.w	r8, r8, #2
 80009be:	4461      	add	r1, ip
 80009c0:	1a09      	subs	r1, r1, r0
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009c8:	fb09 1110 	mls	r1, r9, r0, r1
 80009cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d4:	458e      	cmp	lr, r1
 80009d6:	d908      	bls.n	80009ea <__udivmoddi4+0x1e2>
 80009d8:	eb1c 0101 	adds.w	r1, ip, r1
 80009dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009e0:	d26c      	bcs.n	8000abc <__udivmoddi4+0x2b4>
 80009e2:	458e      	cmp	lr, r1
 80009e4:	d96a      	bls.n	8000abc <__udivmoddi4+0x2b4>
 80009e6:	3802      	subs	r0, #2
 80009e8:	4461      	add	r1, ip
 80009ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ee:	fba0 9402 	umull	r9, r4, r0, r2
 80009f2:	eba1 010e 	sub.w	r1, r1, lr
 80009f6:	42a1      	cmp	r1, r4
 80009f8:	46c8      	mov	r8, r9
 80009fa:	46a6      	mov	lr, r4
 80009fc:	d356      	bcc.n	8000aac <__udivmoddi4+0x2a4>
 80009fe:	d053      	beq.n	8000aa8 <__udivmoddi4+0x2a0>
 8000a00:	b15d      	cbz	r5, 8000a1a <__udivmoddi4+0x212>
 8000a02:	ebb3 0208 	subs.w	r2, r3, r8
 8000a06:	eb61 010e 	sbc.w	r1, r1, lr
 8000a0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000a0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000a12:	40f1      	lsrs	r1, r6
 8000a14:	431f      	orrs	r7, r3
 8000a16:	e9c5 7100 	strd	r7, r1, [r5]
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	4631      	mov	r1, r6
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	f1c2 0320 	rsb	r3, r2, #32
 8000a26:	40d8      	lsrs	r0, r3
 8000a28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a30:	4091      	lsls	r1, r2
 8000a32:	4301      	orrs	r1, r0
 8000a34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a38:	fa1f fe8c 	uxth.w	lr, ip
 8000a3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a40:	fb07 3610 	mls	r6, r7, r0, r3
 8000a44:	0c0b      	lsrs	r3, r1, #16
 8000a46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	fa04 f402 	lsl.w	r4, r4, r2
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x260>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5e:	d22f      	bcs.n	8000ac0 <__udivmoddi4+0x2b8>
 8000a60:	429e      	cmp	r6, r3
 8000a62:	d92d      	bls.n	8000ac0 <__udivmoddi4+0x2b8>
 8000a64:	3802      	subs	r0, #2
 8000a66:	4463      	add	r3, ip
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	b289      	uxth	r1, r1
 8000a6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a70:	fb07 3316 	mls	r3, r7, r6, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb06 f30e 	mul.w	r3, r6, lr
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x28a>
 8000a80:	eb1c 0101 	adds.w	r1, ip, r1
 8000a84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a88:	d216      	bcs.n	8000ab8 <__udivmoddi4+0x2b0>
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d914      	bls.n	8000ab8 <__udivmoddi4+0x2b0>
 8000a8e:	3e02      	subs	r6, #2
 8000a90:	4461      	add	r1, ip
 8000a92:	1ac9      	subs	r1, r1, r3
 8000a94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a98:	e738      	b.n	800090c <__udivmoddi4+0x104>
 8000a9a:	462e      	mov	r6, r5
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	e705      	b.n	80008ac <__udivmoddi4+0xa4>
 8000aa0:	4606      	mov	r6, r0
 8000aa2:	e6e3      	b.n	800086c <__udivmoddi4+0x64>
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	e6f8      	b.n	800089a <__udivmoddi4+0x92>
 8000aa8:	454b      	cmp	r3, r9
 8000aaa:	d2a9      	bcs.n	8000a00 <__udivmoddi4+0x1f8>
 8000aac:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	e7a3      	b.n	8000a00 <__udivmoddi4+0x1f8>
 8000ab8:	4646      	mov	r6, r8
 8000aba:	e7ea      	b.n	8000a92 <__udivmoddi4+0x28a>
 8000abc:	4620      	mov	r0, r4
 8000abe:	e794      	b.n	80009ea <__udivmoddi4+0x1e2>
 8000ac0:	4640      	mov	r0, r8
 8000ac2:	e7d1      	b.n	8000a68 <__udivmoddi4+0x260>
 8000ac4:	46d0      	mov	r8, sl
 8000ac6:	e77b      	b.n	80009c0 <__udivmoddi4+0x1b8>
 8000ac8:	3b02      	subs	r3, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	e732      	b.n	8000934 <__udivmoddi4+0x12c>
 8000ace:	4630      	mov	r0, r6
 8000ad0:	e709      	b.n	80008e6 <__udivmoddi4+0xde>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e742      	b.n	800095e <__udivmoddi4+0x156>

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <send_CAN>:
		data64 |= data[i]<<(i*8);
	}
	return data64;
}

HAL_StatusTypeDef send_CAN(uint32_t addres, uint8_t *TxBuffer){		// send 8 Bytes
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	static uint32_t TxMailbox[20];
	static CAN_TxHeaderTypeDef TxHeader;
	TxHeader.ExtId = addres;   			// ID of the message
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <send_CAN+0x44>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6053      	str	r3, [r2, #4]
	TxHeader.DLC = 8;         			// Data Length Code (number of bytes in data field)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <send_CAN+0x44>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_EXT; 			// Extended ID type
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <send_CAN+0x44>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; 		// Data frame, not remote frame
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <send_CAN+0x44>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE; // Disable time stamp
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <send_CAN+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	751a      	strb	r2, [r3, #20]
    // Transmit CAN message
	//HAL_CAN_WakeUp(&hcan1);
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxBuffer, TxMailbox);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <send_CAN+0x48>)
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	4905      	ldr	r1, [pc, #20]	; (8000b20 <send_CAN+0x44>)
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <send_CAN+0x4c>)
 8000b0c:	f002 f94f 	bl	8002dae <HAL_CAN_AddTxMessage>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
    return status;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000002c 	.word	0x2000002c
 8000b24:	20000044 	.word	0x20000044
 8000b28:	200002e0 	.word	0x200002e0

08000b2c <send_CAN_IVT_nbytes>:

HAL_StatusTypeDef send_CAN_IVT_nbytes(uint32_t addres, uint8_t *TxBuffer, uint8_t length){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	4613      	mov	r3, r2
 8000b38:	71fb      	strb	r3, [r7, #7]
	static uint32_t TxMailbox[20];
	static CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = addres;   			// ID of the message
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <send_CAN_IVT_nbytes+0x48>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = length;         		// Data Length Code (number of bytes in data field)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <send_CAN_IVT_nbytes+0x48>)
 8000b44:	6113      	str	r3, [r2, #16]
	TxHeader.IDE = CAN_ID_STD; 			// Extended ID type
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <send_CAN_IVT_nbytes+0x48>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; 		// Data frame, not remote frame
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <send_CAN_IVT_nbytes+0x48>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE; // Disable time stamp
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <send_CAN_IVT_nbytes+0x48>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	751a      	strb	r2, [r3, #20]
    // Transmit CAN message
	//HAL_CAN_WakeUp(&hcan1);
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxBuffer, TxMailbox);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <send_CAN_IVT_nbytes+0x4c>)
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	4905      	ldr	r1, [pc, #20]	; (8000b74 <send_CAN_IVT_nbytes+0x48>)
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <send_CAN_IVT_nbytes+0x50>)
 8000b60:	f002 f925 	bl	8002dae <HAL_CAN_AddTxMessage>
 8000b64:	4603      	mov	r3, r0
 8000b66:	75fb      	strb	r3, [r7, #23]
    return status;
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000094 	.word	0x20000094
 8000b78:	200000ac 	.word	0x200000ac
 8000b7c:	200002e0 	.word	0x200002e0

08000b80 <read_CAN>:

uint32_t read_CAN(uint8_t *RxData){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	// Check if a message is received in CAN RX FIFO 0
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4815      	ldr	r0, [pc, #84]	; (8000be0 <read_CAN+0x60>)
 8000b8c:	f002 faf1 	bl	8003172 <HAL_CAN_GetRxFifoFillLevel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <read_CAN+0x2e>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000b96:	f107 020c 	add.w	r2, r7, #12
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <read_CAN+0x60>)
 8000ba0:	f002 f9d5 	bl	8002f4e <HAL_CAN_GetRxMessage>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <read_CAN+0x2e>
		// Process the received message
	    return RxHeader.ExtId;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	e013      	b.n	8000bd6 <read_CAN+0x56>
	  }
	}
	// Check if a message is received in CAN RX FIFO 1
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8000bae:	2101      	movs	r1, #1
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <read_CAN+0x60>)
 8000bb2:	f002 fade 	bl	8003172 <HAL_CAN_GetRxFifoFillLevel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00b      	beq.n	8000bd4 <read_CAN+0x54>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8000bbc:	f107 020c 	add.w	r2, r7, #12
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <read_CAN+0x60>)
 8000bc6:	f002 f9c2 	bl	8002f4e <HAL_CAN_GetRxMessage>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <read_CAN+0x54>
		// Process the received message
	    return RxHeader.StdId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	e000      	b.n	8000bd6 <read_CAN+0x56>
	  }
	}
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002e0 	.word	0x200002e0

08000be4 <FIFO_ovf>:

uint8_t FIFO_ovf(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	// check if FIFO is full
	if ((HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 3) || (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) >= 3)) {
 8000be8:	2100      	movs	r1, #0
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <FIFO_ovf+0x2c>)
 8000bec:	f002 fac1 	bl	8003172 <HAL_CAN_GetRxFifoFillLevel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d806      	bhi.n	8000c04 <FIFO_ovf+0x20>
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <FIFO_ovf+0x2c>)
 8000bfa:	f002 faba 	bl	8003172 <HAL_CAN_GetRxFifoFillLevel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d901      	bls.n	8000c08 <FIFO_ovf+0x24>
		return 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <FIFO_ovf+0x26>
	}else{
		return 0;
 8000c08:	2300      	movs	r3, #0
	}
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200002e0 	.word	0x200002e0

08000c14 <send_data2ECU>:

HAL_StatusTypeDef send_data2ECU(uint16_t GPIO_Input){		// 8 Bytes for TxData, LSB first
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	uint8_t can_data[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};		// LSB first
 8000c1e:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <send_data2ECU+0x94>)
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c28:	e883 0003 	stmia.w	r3, {r0, r1}
	can_data[0] |= get_battery_status_code(GPIO_Input);
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fe92 	bl	8001958 <get_battery_status_code>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	7b3b      	ldrb	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	733b      	strb	r3, [r7, #12]
	can_data[1] |= get_battery_error_code();
 8000c40:	f000 fee4 	bl	8001a0c <get_battery_error_code>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	737b      	strb	r3, [r7, #13]
	uint16_t total_volt = battery_values.totalVoltage;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <send_data2ECU+0x98>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	82fb      	strh	r3, [r7, #22]
	can_data[2] = total_volt&0xFF;
 8000c56:	8afb      	ldrh	r3, [r7, #22]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	73bb      	strb	r3, [r7, #14]
	can_data[3] = total_volt>>8;
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
	uint16_t actualCurrent = battery_values.actualCurrent;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <send_data2ECU+0x98>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	82bb      	strh	r3, [r7, #20]
	can_data[4] = (uint8_t)(actualCurrent/1000);
 8000c6c:	8abb      	ldrh	r3, [r7, #20]
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <send_data2ECU+0x9c>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	099b      	lsrs	r3, r3, #6
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	743b      	strb	r3, [r7, #16]
	can_data[5] = volt2celsius(battery_values.highestCellTemp);
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <send_data2ECU+0x98>)
 8000c7e:	891b      	ldrh	r3, [r3, #8]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 ff99 	bl	8001bb8 <volt2celsius>
 8000c86:	4603      	mov	r3, r0
 8000c88:	747b      	strb	r3, [r7, #17]
	can_data[6] = 100;		// SoC TBD
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	74bb      	strb	r3, [r7, #18]

	return send_CAN(ADDR_ECU_TX, can_data);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	f44f 7044 	mov.w	r0, #784	; 0x310
 8000c98:	f7ff ff20 	bl	8000adc <send_CAN>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08006218 	.word	0x08006218
 8000cac:	200000fc 	.word	0x200000fc
 8000cb0:	10624dd3 	.word	0x10624dd3

08000cb4 <ISA_IVT_Init>:

HAL_StatusTypeDef ISA_IVT_Init(){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// set sensor mode to STOP
	uint8_t can_data0[] = {SET_MODE, 0x00, 0x01, 0x00, 0x00};
 8000cc0:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <ISA_IVT_Init+0x144>)
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cca:	6018      	str	r0, [r3, #0]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	7019      	strb	r1, [r3, #0]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data0, 5);
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f240 4011 	movw	r0, #1041	; 0x411
 8000cdc:	f7ff ff26 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(5);
 8000cee:	2005      	movs	r0, #5
 8000cf0:	f001 fe30 	bl	8002954 <HAL_Delay>

	// set current measurement to CYCLIC 100 Hz
	uint8_t can_data1[] = {(MUX_SETCONFIG|IVT_NCURRENT), CYCLIC, (CYCLETIME>>8)&0xFF, CYCLETIME&0xFF};
 8000cf4:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <ISA_IVT_Init+0x148>)
 8000cf6:	61fb      	str	r3, [r7, #28]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data1, 4);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f240 4011 	movw	r0, #1041	; 0x411
 8000d04:	f7ff ff12 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d10:	4313      	orrs	r3, r2
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(5);
 8000d16:	2005      	movs	r0, #5
 8000d18:	f001 fe1c 	bl	8002954 <HAL_Delay>

	// disable Voltage Measurement
	uint8_t can_data2[] = {(MUX_SETCONFIG|IVT_NU1), DISABLED, 0x00, 0x00};
 8000d1c:	2321      	movs	r3, #33	; 0x21
 8000d1e:	61bb      	str	r3, [r7, #24]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data2, 4);
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	2204      	movs	r2, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	f240 4011 	movw	r0, #1041	; 0x411
 8000d2c:	f7ff fefe 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(5);
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f001 fe08 	bl	8002954 <HAL_Delay>
	uint8_t can_data3[] = {(MUX_SETCONFIG|IVT_NU2), DISABLED, 0x00, 0x00};
 8000d44:	2322      	movs	r3, #34	; 0x22
 8000d46:	617b      	str	r3, [r7, #20]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data3, 4);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f240 4011 	movw	r0, #1041	; 0x411
 8000d54:	f7ff feea 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d60:	4313      	orrs	r3, r2
 8000d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(5);
 8000d66:	2005      	movs	r0, #5
 8000d68:	f001 fdf4 	bl	8002954 <HAL_Delay>
	uint8_t can_data4[] = {(MUX_SETCONFIG|IVT_NU3), DISABLED, 0x00, 0x00};
 8000d6c:	2323      	movs	r3, #35	; 0x23
 8000d6e:	613b      	str	r3, [r7, #16]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data4, 4);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2204      	movs	r2, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	f240 4011 	movw	r0, #1041	; 0x411
 8000d7c:	f7ff fed6 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(5);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f001 fde0 	bl	8002954 <HAL_Delay>

	// set current counter
	uint8_t can_data5[] = {(MUX_SETCONFIG|IVT_NQ), CYCLIC, (CYCLETIME>>8)&0xFF, CYCLETIME&0xFF};
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <ISA_IVT_Init+0x14c>)
 8000d96:	60fb      	str	r3, [r7, #12]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data5, 4);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f240 4011 	movw	r0, #1041	; 0x411
 8000da4:	f7ff fec2 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000db0:	4313      	orrs	r3, r2
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(5);
 8000db6:	2005      	movs	r0, #5
 8000db8:	f001 fdcc 	bl	8002954 <HAL_Delay>
	//uint8_t can_data6[] = {0x32};
	//status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data6, 1);
	//HAL_Delay(1000);

	// set sensor mode to RUN
	HAL_Delay(100);
 8000dbc:	2064      	movs	r0, #100	; 0x64
 8000dbe:	f001 fdc9 	bl	8002954 <HAL_Delay>
	uint8_t can_datan[] = {SET_MODE, 0x01, 0x01, 0x00, 0x00};
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <ISA_IVT_Init+0x150>)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dca:	6018      	str	r0, [r3, #0]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	7019      	strb	r1, [r3, #0]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_datan, 5);
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2205      	movs	r2, #5
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f240 4011 	movw	r0, #1041	; 0x411
 8000dda:	f7ff fea7 	bl	8000b2c <send_CAN_IVT_nbytes>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000de6:	4313      	orrs	r3, r2
 8000de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8000dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	08006220 	.word	0x08006220
 8000dfc:	e8030220 	.word	0xe8030220
 8000e00:	e8030226 	.word	0xe8030226
 8000e04:	08006228 	.word	0x08006228

08000e08 <CAN_receive_packet>:

void CAN_receive_packet(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t RxData[8];
	uint32_t addres = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
	addres = read_CAN(RxData);
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff feb3 	bl	8000b80 <read_CAN>
 8000e1a:	60f8      	str	r0, [r7, #12]
	if(addres == ADDR_ECU_TX){
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8000e22:	d10b      	bne.n	8000e3c <CAN_receive_packet+0x34>
		set_relays(RxData[0]);
 8000e24:	793b      	ldrb	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 ffde 	bl	8001de8 <set_relays>
		if(RxData[0] & BATTERY_SW_RESET){
 8000e2c:	793b      	ldrb	r3, [r7, #4]
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d03b      	beq.n	8000eae <CAN_receive_packet+0xa6>
			SDC_reset();
 8000e36:	f000 ff43 	bl	8001cc0 <SDC_reset>
 8000e3a:	e038      	b.n	8000eae <CAN_receive_packet+0xa6>
		}
	}else if(addres == IVT_MSG_RESPONSE){
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f240 5211 	movw	r2, #1297	; 0x511
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d030      	beq.n	8000ea8 <CAN_receive_packet+0xa0>
		return;
	}else if(addres == IVT_MSG_RESULT_I){
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f240 5221 	movw	r2, #1313	; 0x521
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d110      	bne.n	8000e72 <CAN_receive_packet+0x6a>
		if(RxData[0] == IVT_NCURRENT){
 8000e50:	793b      	ldrb	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d12b      	bne.n	8000eae <CAN_receive_packet+0xa6>
			battery_values.actualCurrent = RxData[5] | RxData[4]<<8 | RxData[3]<<16 | RxData[2]<<24;
 8000e56:	7a7b      	ldrb	r3, [r7, #9]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	7a3b      	ldrb	r3, [r7, #8]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	041b      	lsls	r3, r3, #16
 8000e64:	431a      	orrs	r2, r3
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	061b      	lsls	r3, r3, #24
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <CAN_receive_packet+0xac>)
 8000e6e:	6113      	str	r3, [r2, #16]
 8000e70:	e01d      	b.n	8000eae <CAN_receive_packet+0xa6>
		}
	}else if(addres == IVT_MSG_RESULT_T){
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f240 5225 	movw	r2, #1317	; 0x525
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d017      	beq.n	8000eac <CAN_receive_packet+0xa4>
		return;
	}else if(addres == IVT_MSG_RESULT_AS){
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f240 5227 	movw	r2, #1319	; 0x527
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d113      	bne.n	8000eae <CAN_receive_packet+0xa6>
		if(RxData[0] == IVT_NQ){
 8000e86:	793b      	ldrb	r3, [r7, #4]
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d110      	bne.n	8000eae <CAN_receive_packet+0xa6>
			battery_values.CurrentCounter = RxData[5] | RxData[4]<<8 | RxData[3]<<16 | RxData[2]<<24;
 8000e8c:	7a7b      	ldrb	r3, [r7, #9]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	431a      	orrs	r2, r3
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	041b      	lsls	r3, r3, #16
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	061b      	lsls	r3, r3, #24
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <CAN_receive_packet+0xac>)
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	e002      	b.n	8000eae <CAN_receive_packet+0xa6>
		return;
 8000ea8:	bf00      	nop
 8000eaa:	e000      	b.n	8000eae <CAN_receive_packet+0xa6>
		return;
 8000eac:	bf00      	nop
		}
	}
}
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000fc 	.word	0x200000fc

08000eb8 <delay_1us>:
static const uint8_t CFGAR[] = {0xF9, 0x00, 0xF0, 0xFF, 0x00, 0x00};		// data for CRFA, ADCOPT = 1, REFON = 1, GPIOx = 1
static const uint8_t CFGBR[] = {0x0F, 0x80, 0x00, 0x00, 0x00, 0x00};		// data for CRFB, MUTE = 1, GPIOx = 1
static const uint8_t RDCV[] = {RDCVA, RDCVB, RDCVC, RDCVD, RDCVE, RDCVF};	// Read Voltages Register
static const uint8_t RDAUX[] = {RDAUXA, RDAUXB, RDAUXC, RDAUXD};			// Read Temp Register

void delay_1us(){	// delay 960ns + pin delay 45ns = 1050ns
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
	for(volatile uint32_t i=0; i<5; i++);	// 100ns per cycle
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e002      	b.n	8000eca <delay_1us+0x12>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d9f9      	bls.n	8000ec4 <delay_1us+0xc>
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <wake_up>:

void wake_up(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<NUM_OF_CLIENTS+2; i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	e017      	b.n	8000f1c <wake_up+0x3c>
		GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <wake_up+0x60>)
 8000eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef2:	619a      	str	r2, [r3, #24]
		delay_1us();
 8000ef4:	f7ff ffe0 	bl	8000eb8 <delay_1us>
		GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <wake_up+0x60>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	619a      	str	r2, [r3, #24]
		for(uint16_t i=0; i<400;i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	80bb      	strh	r3, [r7, #4]
 8000f02:	e004      	b.n	8000f0e <wake_up+0x2e>
			delay_1us();
 8000f04:	f7ff ffd8 	bl	8000eb8 <delay_1us>
		for(uint16_t i=0; i<400;i++){
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f14:	d3f6      	bcc.n	8000f04 <wake_up+0x24>
	for(uint8_t i=0; i<NUM_OF_CLIENTS+2; i++){
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	d9e4      	bls.n	8000eec <wake_up+0xc>
		}
	}
	for(volatile uint32_t i=0; i<100; i++);	// 100ns per cycle, 10us, communication ready time
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	e002      	b.n	8000f2e <wake_up+0x4e>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b63      	cmp	r3, #99	; 0x63
 8000f32:	d9f9      	bls.n	8000f28 <wake_up+0x48>
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	48000400 	.word	0x48000400

08000f44 <SPI_Transceive>:

HAL_StatusTypeDef SPI_Transceive(uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
	GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <SPI_Transceive+0x40>)
 8000f54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f58:	619a      	str	r2, [r3, #24]
	delay_1us();
 8000f5a:	f7ff ffad 	bl	8000eb8 <delay_1us>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, 200);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	22c8      	movs	r2, #200	; 0xc8
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <SPI_Transceive+0x44>)
 8000f6a:	f003 fe06 	bl	8004b7a <HAL_SPI_TransmitReceive>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	75fb      	strb	r3, [r7, #23]
	GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SPI_Transceive+0x40>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	619a      	str	r2, [r3, #24]
	return status;
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	48000400 	.word	0x48000400
 8000f88:	20000308 	.word	0x20000308

08000f8c <generatePEC>:
	uint16_t dat[] = {0x0001};
    return (uint16_t)(HAL_CRC_Calculate(&hcrc, (uint32_t *)dat, 1)) & 0xFE;
}
*/
// Function to generate 15-bit packet error code
uint16_t generatePEC(uint8_t data[], size_t length) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b08b      	sub	sp, #44	; 0x2c
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    // Initial value of PEC
    uint16_t pec = 0x0010;
 8000f96:	2310      	movs	r3, #16
 8000f98:	84fb      	strh	r3, [r7, #38]	; 0x26
    // Characteristic polynomial: x^15 + x^14 + x^10 + x^8 + x^7 + x^4 + x^3 + 1
    for (size_t i = 0; i < length; ++i) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
 8000f9e:	e0b6      	b.n	800110e <generatePEC+0x182>
            for (int bit = 7; bit >= 0; --bit) {
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	e0ac      	b.n	8001100 <generatePEC+0x174>
                uint16_t in0 = ((data[i] >> bit) & 0x01) ^ ((pec >> 14) & 0x01);
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fba:	0b9b      	lsrs	r3, r3, #14
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4053      	eors	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	837b      	strh	r3, [r7, #26]
                uint16_t in3 = in0 ^ ((pec >> 2) & 0x01);
 8000fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fde:	4053      	eors	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	833b      	strh	r3, [r7, #24]
                uint16_t in4 = in0 ^ ((pec >> 3) & 0x01);
 8000fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ff6:	4053      	eors	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	82fb      	strh	r3, [r7, #22]
                uint16_t in7 = in0 ^ ((pec >> 6) & 0x01);
 8000ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ffe:	099b      	lsrs	r3, r3, #6
 8001000:	b29b      	uxth	r3, r3
 8001002:	b21b      	sxth	r3, r3
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	b21a      	sxth	r2, r3
 800100a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800100e:	4053      	eors	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	82bb      	strh	r3, [r7, #20]
                uint16_t in8 = in0 ^ ((pec >> 7) & 0x01);
 8001014:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001016:	09db      	lsrs	r3, r3, #7
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21b      	sxth	r3, r3
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	b21a      	sxth	r2, r3
 8001022:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001026:	4053      	eors	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	827b      	strh	r3, [r7, #18]
                uint16_t in10 = in0 ^ ((pec >> 9) & 0x01);
 800102c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800102e:	0a5b      	lsrs	r3, r3, #9
 8001030:	b29b      	uxth	r3, r3
 8001032:	b21b      	sxth	r3, r3
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b21a      	sxth	r2, r3
 800103a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800103e:	4053      	eors	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	823b      	strh	r3, [r7, #16]
                uint16_t in14 = in0 ^ ((pec >> 13) & 0x01);
 8001044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001046:	0b5b      	lsrs	r3, r3, #13
 8001048:	b29b      	uxth	r3, r3
 800104a:	b21b      	sxth	r3, r3
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	b21a      	sxth	r2, r3
 8001052:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001056:	4053      	eors	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	81fb      	strh	r3, [r7, #14]
                pec <<= 1;
 800105c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0x3FFF) | (in14 << 14);
 8001062:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001066:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800106a:	b21a      	sxth	r2, r3
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	039b      	lsls	r3, r3, #14
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0xFBFF) | (in10 << 10);
 8001078:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800107c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001080:	b21a      	sxth	r2, r3
 8001082:	8a3b      	ldrh	r3, [r7, #16]
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21b      	sxth	r3, r3
 800108c:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0xFEFF) | (in8 << 8);
 800108e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001096:	b21a      	sxth	r2, r3
 8001098:	8a7b      	ldrh	r3, [r7, #18]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0xFF7F) | (in7 << 7);
 80010a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	8abb      	ldrh	r3, [r7, #20]
 80010b0:	01db      	lsls	r3, r3, #7
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0xFFEF) | (in4 << 4);
 80010ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010be:	f023 0310 	bic.w	r3, r3, #16
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	8afb      	ldrh	r3, [r7, #22]
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0xFFF7) | (in3 << 3);
 80010d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010d4:	f023 0308 	bic.w	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	8b3b      	ldrh	r3, [r7, #24]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	84fb      	strh	r3, [r7, #38]	; 0x26
                pec = (pec & 0xFFFE) | (in0 << 0);
 80010e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	84fb      	strh	r3, [r7, #38]	; 0x26
            for (int bit = 7; bit >= 0; --bit) {
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f6bf af4f 	bge.w	8000fa6 <generatePEC+0x1a>
    for (size_t i = 0; i < length; ++i) {
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	3301      	adds	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
 800110e:	6a3a      	ldr	r2, [r7, #32]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	f4ff af44 	bcc.w	8000fa0 <generatePEC+0x14>
            }
        }
    pec <<=1;
 8001118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	84fb      	strh	r3, [r7, #38]	; 0x26
    return pec;
 800111e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <Command>:


HAL_StatusTypeDef Command(uint16_t command){	// checked
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[4];
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	733b      	strb	r3, [r7, #12]
	crc_data[1] = command&0xFF;
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	737b      	strb	r3, [r7, #13]
	uint16_t crc = generatePEC(crc_data, 2);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff1d 	bl	8000f8c <generatePEC>
 8001152:	4603      	mov	r3, r0
 8001154:	82fb      	strh	r3, [r7, #22]
	tx_data[0] = command>>8;
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	b29b      	uxth	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	743b      	strb	r3, [r7, #16]
	tx_data[1] = command&0xFF;
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	747b      	strb	r3, [r7, #17]
	tx_data[2] = crc>>8;
 8001166:	8afb      	ldrh	r3, [r7, #22]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	74bb      	strb	r3, [r7, #18]
	tx_data[3] = crc&0xFF;
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	74fb      	strb	r3, [r7, #19]
	uint8_t rx_data[4];
	return SPI_Transceive(tx_data, rx_data, 4);
 8001176:	f107 0108 	add.w	r1, r7, #8
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2204      	movs	r2, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fedf 	bl	8000f44 <SPI_Transceive>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <Write_Registergroup>:

HAL_StatusTypeDef Write_Registergroup(uint16_t command, uint8_t *data){		// write data to every single client, data length: 6*NUM_OF_CLIENTS
 8001190:	b580      	push	{r7, lr}
 8001192:	b0a8      	sub	sp, #160	; 0xa0
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[4+NUM_OF_CLIENTS*8];
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	crc_data[1] = command&0xFF;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint16_t crc = generatePEC(crc_data, 2);
 80011b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fee8 	bl	8000f8c <generatePEC>
 80011bc:	4603      	mov	r3, r0
 80011be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	tx_data[0] = command>>8;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	tx_data[1] = command&0xFF;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	tx_data[2] = crc>>8;
 80011d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	tx_data[3] = crc&0xFF;
 80011e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80011f4:	e052      	b.n	800129c <Write_Registergroup+0x10c>
		for(uint16_t j=0; j<6; j++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80011fc:	e01d      	b.n	800123a <Write_Registergroup+0xaa>
			tx_data[4+i*8+j] = data[i*6+j];
 80011fe:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	461a      	mov	r2, r3
 800120c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001210:	4413      	add	r3, r2
 8001212:	461a      	mov	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	441a      	add	r2, r3
 8001218:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1d19      	adds	r1, r3, #4
 8001220:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001224:	440b      	add	r3, r1
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	33a0      	adds	r3, #160	; 0xa0
 800122a:	443b      	add	r3, r7
 800122c:	f803 2c4c 	strb.w	r2, [r3, #-76]
		for(uint16_t j=0; j<6; j++){
 8001230:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001234:	3301      	adds	r3, #1
 8001236:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800123a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800123e:	2b05      	cmp	r3, #5
 8001240:	d9dd      	bls.n	80011fe <Write_Registergroup+0x6e>
		}
		uint16_t crc = generatePEC(&data[i*6], 6);
 8001242:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	461a      	mov	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	2106      	movs	r1, #6
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fe98 	bl	8000f8c <generatePEC>
 800125c:	4603      	mov	r3, r0
 800125e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		tx_data[4+i*8+6] = crc>>8;
 8001262:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b29a      	uxth	r2, r3
 800126a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	330a      	adds	r3, #10
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	33a0      	adds	r3, #160	; 0xa0
 8001276:	443b      	add	r3, r7
 8001278:	f803 2c4c 	strb.w	r2, [r3, #-76]
		tx_data[4+i*8+7] = crc&0xFF;
 800127c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	330b      	adds	r3, #11
 8001284:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	33a0      	adds	r3, #160	; 0xa0
 800128c:	443b      	add	r3, r7
 800128e:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8001292:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001296:	3301      	adds	r3, #1
 8001298:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800129c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	d9a8      	bls.n	80011f6 <Write_Registergroup+0x66>
	}
	uint8_t rx_data[sizeof(tx_data)];
	return SPI_Transceive(tx_data, rx_data, sizeof(tx_data));
 80012a4:	f107 010c 	add.w	r1, r7, #12
 80012a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ac:	2244      	movs	r2, #68	; 0x44
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe48 	bl	8000f44 <SPI_Transceive>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	37a0      	adds	r7, #160	; 0xa0
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <Read_Registergroup>:

HAL_StatusTypeDef Read_Registergroup(uint16_t command, uint8_t *buffer){		// checked, read data for every single client, data length: 6*NUM_OF_CLIENTS
 80012be:	b580      	push	{r7, lr}
 80012c0:	b0a8      	sub	sp, #160	; 0xa0
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[4+NUM_OF_CLIENTS*8];
	for(uint16_t i=0; i<sizeof(tx_data)-4; i++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80012d0:	e00c      	b.n	80012ec <Read_Registergroup+0x2e>
		tx_data[i+4] = DUMMY;
 80012d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80012d6:	3304      	adds	r3, #4
 80012d8:	33a0      	adds	r3, #160	; 0xa0
 80012da:	443b      	add	r3, r7
 80012dc:	22aa      	movs	r2, #170	; 0xaa
 80012de:	f803 2c50 	strb.w	r2, [r3, #-80]
	for(uint16_t i=0; i<sizeof(tx_data)-4; i++){
 80012e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80012ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80012f0:	2b3f      	cmp	r3, #63	; 0x3f
 80012f2:	d9ee      	bls.n	80012d2 <Read_Registergroup+0x14>
	}
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	crc_data[1] = command&0xFF;
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t crc = generatePEC(crc_data, 2);
 8001308:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800130c:	2102      	movs	r1, #2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe3c 	bl	8000f8c <generatePEC>
 8001314:	4603      	mov	r3, r0
 8001316:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	tx_data[0] = command>>8;
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	tx_data[1] = command&0xFF;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	tx_data[2] = crc>>8;
 800132e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	tx_data[3] = crc&0xFF;
 800133c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t rx_data[sizeof(tx_data)];
	HAL_StatusTypeDef status = SPI_Transceive(tx_data, rx_data, sizeof(tx_data));		// read data
 8001346:	f107 0108 	add.w	r1, r7, #8
 800134a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800134e:	2244      	movs	r2, #68	; 0x44
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fdf7 	bl	8000f44 <SPI_Transceive>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint16_t not_valid;
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 800135c:	2300      	movs	r3, #0
 800135e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001362:	e05a      	b.n	800141a <Read_Registergroup+0x15c>
		crc = generatePEC(&rx_data[4+i*8], 6);
 8001364:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	3304      	adds	r3, #4
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	4413      	add	r3, r2
 8001372:	2106      	movs	r1, #6
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe09 	bl	8000f8c <generatePEC>
 800137a:	4603      	mov	r3, r0
 800137c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		not_valid = (rx_data[10+i*8]<<8 | rx_data[11+i*8])-crc;		// check crc
 8001380:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	330a      	adds	r3, #10
 8001388:	33a0      	adds	r3, #160	; 0xa0
 800138a:	443b      	add	r3, r7
 800138c:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	330b      	adds	r3, #11
 800139c:	33a0      	adds	r3, #160	; 0xa0
 800139e:	443b      	add	r3, r7
 80013a0:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		for(uint16_t j=0; j<6; j++){			// write to buffer
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80013bc:	e01e      	b.n	80013fc <Read_Registergroup+0x13e>
			buffer[i*6+j] = rx_data[4+i*8+j];
 80013be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	1d1a      	adds	r2, r3, #4
 80013c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80013ca:	18d1      	adds	r1, r2, r3
 80013cc:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	461a      	mov	r2, r3
 80013da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80013de:	4413      	add	r3, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	f101 02a0 	add.w	r2, r1, #160	; 0xa0
 80013ea:	443a      	add	r2, r7
 80013ec:	f812 2c98 	ldrb.w	r2, [r2, #-152]
 80013f0:	701a      	strb	r2, [r3, #0]
		for(uint16_t j=0; j<6; j++){			// write to buffer
 80013f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80013f6:	3301      	adds	r3, #1
 80013f8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80013fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001400:	2b05      	cmp	r3, #5
 8001402:	d9dc      	bls.n	80013be <Read_Registergroup+0x100>
		}
		if(not_valid){
 8001404:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <Read_Registergroup+0x152>
			return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e00a      	b.n	8001426 <Read_Registergroup+0x168>
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8001410:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001414:	3301      	adds	r3, #1
 8001416:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800141a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800141e:	2b07      	cmp	r3, #7
 8001420:	d9a0      	bls.n	8001364 <Read_Registergroup+0xa6>
		}
	}
	return status;
 8001422:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001426:	4618      	mov	r0, r3
 8001428:	37a0      	adds	r7, #160	; 0xa0
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <Read_Voltages>:

HAL_StatusTypeDef Read_Voltages(uint8_t *buffer){		// checked, NUM_OF_CLIENTS * 36
 8001430:	b580      	push	{r7, lr}
 8001432:	b092      	sub	sp, #72	; 0x48
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t sbuffer[NUM_OF_CLIENTS*6];		// short buffer for a single transmission
	wake_up();
 800143e:	f7ff fd4f 	bl	8000ee0 <wake_up>
	Command(ADCV);
 8001442:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001446:	f7ff fe71 	bl	800112c <Command>
	HAL_Delay(3);
 800144a:	2003      	movs	r0, #3
 800144c:	f001 fa82 	bl	8002954 <HAL_Delay>
	for(uint16_t i=0; i<6; i++){
 8001450:	2300      	movs	r3, #0
 8001452:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001456:	e067      	b.n	8001528 <Read_Voltages+0xf8>
		//wake_up();		// used for debug
		status = Read_Registergroup(RDCV[i], sbuffer);
 8001458:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800145c:	4a37      	ldr	r2, [pc, #220]	; (800153c <Read_Voltages+0x10c>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	b29b      	uxth	r3, r3
 8001462:	f107 020c 	add.w	r2, r7, #12
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff28 	bl	80012be <Read_Registergroup>
 800146e:	4603      	mov	r3, r0
 8001470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if(status==HAL_OK){
 8001474:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001478:	2b00      	cmp	r3, #0
 800147a:	d13e      	bne.n	80014fa <Read_Voltages+0xca>
			for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){
 800147c:	2300      	movs	r3, #0
 800147e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001482:	e035      	b.n	80014f0 <Read_Voltages+0xc0>
				for(uint16_t k=0;k<6; k++){
 8001484:	2300      	movs	r3, #0
 8001486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800148a:	e028      	b.n	80014de <Read_Voltages+0xae>
					buffer[j*36+i*6+k] = sbuffer[j*6+k];
 800148c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	461a      	mov	r2, r3
 800149a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800149e:	18d1      	adds	r1, r2, r3
 80014a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	18c2      	adds	r2, r0, r3
 80014bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	f101 0248 	add.w	r2, r1, #72	; 0x48
 80014cc:	443a      	add	r2, r7
 80014ce:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 80014d2:	701a      	strb	r2, [r3, #0]
				for(uint16_t k=0;k<6; k++){
 80014d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80014d8:	3301      	adds	r3, #1
 80014da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80014de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d9d2      	bls.n	800148c <Read_Voltages+0x5c>
			for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){
 80014e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80014f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	d9c5      	bls.n	8001484 <Read_Voltages+0x54>
 80014f8:	e011      	b.n	800151e <Read_Voltages+0xee>
				}
			}
		}else{
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*36); j++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80014fe:	e007      	b.n	8001510 <Read_Voltages+0xe0>
				buffer[j] = 0;
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*36); j++){
 800150a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800150c:	3301      	adds	r3, #1
 800150e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001510:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001512:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001516:	d3f3      	bcc.n	8001500 <Read_Voltages+0xd0>
			}
			return status;
 8001518:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800151c:	e00a      	b.n	8001534 <Read_Voltages+0x104>
	for(uint16_t i=0; i<6; i++){
 800151e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001522:	3301      	adds	r3, #1
 8001524:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001528:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800152c:	2b05      	cmp	r3, #5
 800152e:	d993      	bls.n	8001458 <Read_Voltages+0x28>
		}
	}
	return status;
 8001530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001534:	4618      	mov	r0, r3
 8001536:	3748      	adds	r7, #72	; 0x48
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08006298 	.word	0x08006298

08001540 <Read_Temp>:

HAL_StatusTypeDef Read_Temp(uint8_t *buffer){		// buffer NUM_OF_CLIENTS * 20
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	; 0x50
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sbuffer[NUM_OF_CLIENTS*6];		// short buffer for a single transmission
	wake_up();
 8001548:	f7ff fcca 	bl	8000ee0 <wake_up>
	Command(ADAX);
 800154c:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 8001550:	f7ff fdec 	bl	800112c <Command>
	HAL_Delay(3);
 8001554:	2003      	movs	r0, #3
 8001556:	f001 f9fd 	bl	8002954 <HAL_Delay>
	for(uint16_t i=0; i<4; i++){
 800155a:	2300      	movs	r3, #0
 800155c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001560:	e0af      	b.n	80016c2 <Read_Temp+0x182>
		//wake_up();		// used for debug
		status = Read_Registergroup(RDAUX[i], sbuffer);
 8001562:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001566:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <Read_Temp+0x210>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	b29b      	uxth	r3, r3
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fea3 	bl	80012be <Read_Registergroup>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if(status==HAL_OK){
 800157e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8082 	bne.w	800168c <Read_Temp+0x14c>
			if(i<3){		// Register AUXA - AUXC
 8001588:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800158c:	2b02      	cmp	r3, #2
 800158e:	d83e      	bhi.n	800160e <Read_Temp+0xce>
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 6 Bytes
 8001590:	2300      	movs	r3, #0
 8001592:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001596:	e035      	b.n	8001604 <Read_Temp+0xc4>
					for(uint16_t k=0;k<6; k++){
 8001598:	2300      	movs	r3, #0
 800159a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800159e:	e028      	b.n	80015f2 <Read_Temp+0xb2>
						buffer[j*20+i*6+k] = sbuffer[j*6+k];
 80015a0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	461a      	mov	r2, r3
 80015ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015b2:	18d1      	adds	r1, r2, r3
 80015b4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	18c2      	adds	r2, r0, r3
 80015d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015d4:	4413      	add	r3, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	f101 0250 	add.w	r2, r1, #80	; 0x50
 80015e0:	443a      	add	r2, r7
 80015e2:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80015e6:	701a      	strb	r2, [r3, #0]
					for(uint16_t k=0;k<6; k++){
 80015e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015ec:	3301      	adds	r3, #1
 80015ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80015f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d9d2      	bls.n	80015a0 <Read_Temp+0x60>
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 6 Bytes
 80015fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015fe:	3301      	adds	r3, #1
 8001600:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001604:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001608:	2b07      	cmp	r3, #7
 800160a:	d9c5      	bls.n	8001598 <Read_Temp+0x58>
 800160c:	e054      	b.n	80016b8 <Read_Temp+0x178>
					}
				}
			}else{			// Register AUXD
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 2 Bytes
 800160e:	2300      	movs	r3, #0
 8001610:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001614:	e035      	b.n	8001682 <Read_Temp+0x142>
					for(uint16_t k=0;k<2; k++){
 8001616:	2300      	movs	r3, #0
 8001618:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800161c:	e028      	b.n	8001670 <Read_Temp+0x130>
						buffer[j*20+i*6+k] = sbuffer[j*6+k];
 800161e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	461a      	mov	r2, r3
 800162c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001630:	18d1      	adds	r1, r2, r3
 8001632:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4618      	mov	r0, r3
 8001640:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	18c2      	adds	r2, r0, r3
 800164e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001652:	4413      	add	r3, r2
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	f101 0250 	add.w	r2, r1, #80	; 0x50
 800165e:	443a      	add	r2, r7
 8001660:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8001664:	701a      	strb	r2, [r3, #0]
					for(uint16_t k=0;k<2; k++){
 8001666:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800166a:	3301      	adds	r3, #1
 800166c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001670:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001674:	2b01      	cmp	r3, #1
 8001676:	d9d2      	bls.n	800161e <Read_Temp+0xde>
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 2 Bytes
 8001678:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800167c:	3301      	adds	r3, #1
 800167e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001686:	2b07      	cmp	r3, #7
 8001688:	d9c5      	bls.n	8001616 <Read_Temp+0xd6>
 800168a:	e015      	b.n	80016b8 <Read_Temp+0x178>
					}
				}
			}
		}else{
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*20); j++){
 800168c:	2300      	movs	r3, #0
 800168e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001692:	e00a      	b.n	80016aa <Read_Temp+0x16a>
				buffer[j] = 0;
 8001694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*20); j++){
 80016a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016a4:	3301      	adds	r3, #1
 80016a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80016aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016ae:	2b9f      	cmp	r3, #159	; 0x9f
 80016b0:	d9f0      	bls.n	8001694 <Read_Temp+0x154>
			}
			return status;
 80016b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016b6:	e047      	b.n	8001748 <Read_Temp+0x208>
	for(uint16_t i=0; i<4; i++){
 80016b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80016bc:	3301      	adds	r3, #1
 80016be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80016c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	f67f af4b 	bls.w	8001562 <Read_Temp+0x22>
		}
	}
	// delete reference voltage and gpio9 => values 5 and 9
	uint16_t j=12;
 80016cc:	230c      	movs	r3, #12
 80016ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	for(uint16_t i=10; i<16*NUM_OF_CLIENTS; i++){
 80016d2:	230a      	movs	r3, #10
 80016d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80016d6:	e032      	b.n	800173e <Read_Temp+0x1fe>
		buffer[i] = buffer[j];
 80016d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	441a      	add	r2, r3
 80016e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	440b      	add	r3, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
		if((j%20==9) || (j%20==17)){
 80016ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <Read_Temp+0x214>)
 80016f0:	fba3 1302 	umull	r1, r3, r3, r2
 80016f4:	0919      	lsrs	r1, r3, #4
 80016f6:	460b      	mov	r3, r1
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	2b09      	cmp	r3, #9
 8001704:	d00d      	beq.n	8001722 <Read_Temp+0x1e2>
 8001706:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <Read_Temp+0x214>)
 800170c:	fba3 1302 	umull	r1, r3, r3, r2
 8001710:	0919      	lsrs	r1, r3, #4
 8001712:	460b      	mov	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b11      	cmp	r3, #17
 8001720:	d105      	bne.n	800172e <Read_Temp+0x1ee>
			j+=3;
 8001722:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001726:	3303      	adds	r3, #3
 8001728:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800172c:	e004      	b.n	8001738 <Read_Temp+0x1f8>
		}else{
			j++;
 800172e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001732:	3301      	adds	r3, #1
 8001734:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	for(uint16_t i=10; i<16*NUM_OF_CLIENTS; i++){
 8001738:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800173a:	3301      	adds	r3, #1
 800173c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800173e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001740:	2b7f      	cmp	r3, #127	; 0x7f
 8001742:	d9c9      	bls.n	80016d8 <Read_Temp+0x198>
		}
	}
	return status;
 8001744:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001748:	4618      	mov	r0, r3
 800174a:	3750      	adds	r7, #80	; 0x50
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	080062a0 	.word	0x080062a0
 8001754:	cccccccd 	.word	0xcccccccd

08001758 <ADBMS_HW_Init>:
		status|= Command(MUTE);
	}
	return status;
}

HAL_StatusTypeDef ADBMS_HW_Init(){
 8001758:	b580      	push	{r7, lr}
 800175a:	b0b4      	sub	sp, #208	; 0xd0
 800175c:	af00      	add	r7, sp, #0
	uint8_t config_data_A[NUM_OF_CLIENTS*6];
	uint8_t config_data_B[NUM_OF_CLIENTS*6];
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 800175e:	2300      	movs	r3, #0
 8001760:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8001764:	e035      	b.n	80017d2 <ADBMS_HW_Init+0x7a>
		for(uint16_t j=0; j<6; j++){
 8001766:	2300      	movs	r3, #0
 8001768:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800176c:	e028      	b.n	80017c0 <ADBMS_HW_Init+0x68>
			config_data_A[i*6+j] = CFGAR[j];
 800176e:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8001772:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	461a      	mov	r2, r3
 8001780:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001784:	4413      	add	r3, r2
 8001786:	4a72      	ldr	r2, [pc, #456]	; (8001950 <ADBMS_HW_Init+0x1f8>)
 8001788:	5c52      	ldrb	r2, [r2, r1]
 800178a:	33d0      	adds	r3, #208	; 0xd0
 800178c:	443b      	add	r3, r7
 800178e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			config_data_B[i*6+j] = CFGBR[j];
 8001792:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8001796:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	461a      	mov	r2, r3
 80017a4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80017a8:	4413      	add	r3, r2
 80017aa:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <ADBMS_HW_Init+0x1fc>)
 80017ac:	5c52      	ldrb	r2, [r2, r1]
 80017ae:	33d0      	adds	r3, #208	; 0xd0
 80017b0:	443b      	add	r3, r7
 80017b2:	f803 2c6c 	strb.w	r2, [r3, #-108]
		for(uint16_t j=0; j<6; j++){
 80017b6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80017ba:	3301      	adds	r3, #1
 80017bc:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 80017c0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d9d2      	bls.n	800176e <ADBMS_HW_Init+0x16>
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 80017c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80017cc:	3301      	adds	r3, #1
 80017ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80017d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80017d6:	2b07      	cmp	r3, #7
 80017d8:	d9c5      	bls.n	8001766 <ADBMS_HW_Init+0xe>
		}
	}
	wake_up();
 80017da:	f7ff fb81 	bl	8000ee0 <wake_up>
	HAL_Delay(1);		// timeout for stability
 80017de:	2001      	movs	r0, #1
 80017e0:	f001 f8b8 	bl	8002954 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	status |= Command(MUTE);
 80017ea:	2028      	movs	r0, #40	; 0x28
 80017ec:	f7ff fc9e 	bl	800112c <Command>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80017f8:	4313      	orrs	r3, r2
 80017fa:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	status |= Write_Registergroup(WRCFGA, config_data_A);
 80017fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001802:	4619      	mov	r1, r3
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff fcc3 	bl	8001190 <Write_Registergroup>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001812:	4313      	orrs	r3, r2
 8001814:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	status |= Write_Registergroup(WRCFGB, config_data_B);
 8001818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800181c:	4619      	mov	r1, r3
 800181e:	2024      	movs	r0, #36	; 0x24
 8001820:	f7ff fcb6 	bl	8001190 <Write_Registergroup>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800182c:	4313      	orrs	r3, r2
 800182e:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	uint8_t read_data_A[NUM_OF_CLIENTS*6];
	uint8_t read_data_B[NUM_OF_CLIENTS*6];
	status |= Read_Registergroup(RDCFGA, read_data_A);
 8001832:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001836:	4619      	mov	r1, r3
 8001838:	2002      	movs	r0, #2
 800183a:	f7ff fd40 	bl	80012be <Read_Registergroup>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001846:	4313      	orrs	r3, r2
 8001848:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	status |= Read_Registergroup(RDCFGB, read_data_B);
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	2026      	movs	r0, #38	; 0x26
 8001852:	f7ff fd34 	bl	80012be <Read_Registergroup>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800185e:	4313      	orrs	r3, r2
 8001860:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5

	if(status != HAL_OK){
 8001864:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <ADBMS_HW_Init+0x11a>
		return status;
 800186c:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001870:	e069      	b.n	8001946 <ADBMS_HW_Init+0x1ee>
	}
	uint8_t not_valid = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8001878:	2300      	movs	r3, #0
 800187a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800187e:	e057      	b.n	8001930 <ADBMS_HW_Init+0x1d8>
		for(uint16_t j=1; j<6; j++){
 8001880:	2301      	movs	r3, #1
 8001882:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001886:	e04a      	b.n	800191e <ADBMS_HW_Init+0x1c6>
			not_valid += (config_data_A[i*6+j] - read_data_A[i*6+j]);
 8001888:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	461a      	mov	r2, r3
 8001896:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800189a:	4413      	add	r3, r2
 800189c:	33d0      	adds	r3, #208	; 0xd0
 800189e:	443b      	add	r3, r7
 80018a0:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 80018a4:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	461a      	mov	r2, r3
 80018b2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80018b6:	4413      	add	r3, r2
 80018b8:	33d0      	adds	r3, #208	; 0xd0
 80018ba:	443b      	add	r3, r7
 80018bc:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80018c0:	1acb      	subs	r3, r1, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80018c8:	4413      	add	r3, r2
 80018ca:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			not_valid += (config_data_B[i*6+j] - read_data_B[i*6+j]);
 80018ce:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	461a      	mov	r2, r3
 80018dc:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80018e0:	4413      	add	r3, r2
 80018e2:	33d0      	adds	r3, #208	; 0xd0
 80018e4:	443b      	add	r3, r7
 80018e6:	f813 1c6c 	ldrb.w	r1, [r3, #-108]
 80018ea:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	461a      	mov	r2, r3
 80018f8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80018fc:	4413      	add	r3, r2
 80018fe:	33d0      	adds	r3, #208	; 0xd0
 8001900:	443b      	add	r3, r7
 8001902:	f813 3ccc 	ldrb.w	r3, [r3, #-204]
 8001906:	1acb      	subs	r3, r1, r3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800190e:	4413      	add	r3, r2
 8001910:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		for(uint16_t j=1; j<6; j++){
 8001914:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001918:	3301      	adds	r3, #1
 800191a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800191e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001922:	2b05      	cmp	r3, #5
 8001924:	d9b0      	bls.n	8001888 <ADBMS_HW_Init+0x130>
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8001926:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800192a:	3301      	adds	r3, #1
 800192c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8001930:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001934:	2b07      	cmp	r3, #7
 8001936:	d9a3      	bls.n	8001880 <ADBMS_HW_Init+0x128>
		}
	}
	if(not_valid){
 8001938:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <ADBMS_HW_Init+0x1ec>
		return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <ADBMS_HW_Init+0x1ee>
	}else{
		return HAL_OK;
 8001944:	2300      	movs	r3, #0
	}
}
 8001946:	4618      	mov	r0, r3
 8001948:	37d0      	adds	r7, #208	; 0xd0
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	08006288 	.word	0x08006288
 8001954:	08006290 	.word	0x08006290

08001958 <get_battery_status_code>:

	battery_values.status = 0;
	battery_values.error = 0;
}

uint8_t get_battery_status_code(uint16_t GPIO_Input){
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	uint8_t status_code = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
	status_code |= (battery_values.error&0x1F)==0 ? STATUS_BATTERY_OK : 0;
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <get_battery_status_code+0x98>)
 8001968:	7bdb      	ldrb	r3, [r3, #15]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4313      	orrs	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	73fb      	strb	r3, [r7, #15]
	status_code |= (GPIO_Input&Charger_Con_Pin)==Charger_Con_Pin ? STATUS_CHARGING : 0;
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	125b      	asrs	r3, r3, #9
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	4313      	orrs	r3, r2
 8001996:	b25b      	sxtb	r3, r3
 8001998:	73fb      	strb	r3, [r7, #15]
	// status MB temp
	status_code |= (GPIO_Input&V_FB_AIR_positive_Pin)==V_FB_AIR_positive_Pin ? STATUS_AIR_POSITIVE : 0;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	b25b      	sxtb	r3, r3
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
	status_code |= (GPIO_Input&V_FB_AIR_negative_Pin)==V_FB_AIR_negative_Pin ? STATUS_AIR_NEGATIVE : 0;
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4313      	orrs	r3, r2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	73fb      	strb	r3, [r7, #15]
	status_code |= (GPIO_Input&V_FB_PC_Relay_Pin)==V_FB_PC_Relay_Pin ? STATUS_PRECHARGE : 0;
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	b25a      	sxtb	r2, r3
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	73fb      	strb	r3, [r7, #15]
	battery_values.status = status_code;
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <get_battery_status_code+0x98>)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	7393      	strb	r3, [r2, #14]
	return status_code;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200000fc 	.word	0x200000fc

080019f4 <battery_reset_error_flags>:

void battery_reset_error_flags(){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	battery_values.error = 0;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <battery_reset_error_flags+0x14>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	73da      	strb	r2, [r3, #15]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	200000fc 	.word	0x200000fc

08001a0c <get_battery_error_code>:

uint8_t get_battery_error_code(){
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	return battery_values.error;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <get_battery_error_code+0x14>)
 8001a12:	7bdb      	ldrb	r3, [r3, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200000fc 	.word	0x200000fc

08001a24 <set_battery_error_flag>:

void set_battery_error_flag(uint8_t mask){
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	battery_values.error |= mask;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <set_battery_error_flag+0x24>)
 8001a30:	7bda      	ldrb	r2, [r3, #15]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <set_battery_error_flag+0x24>)
 8001a3a:	73da      	strb	r2, [r3, #15]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	200000fc 	.word	0x200000fc

08001a4c <calc_Battery_values>:
	}else{
		battery_values.status &= ~mask;
	}
}

BatterySystemTypeDef* calc_Battery_values(uint8_t *volt_buffer, uint8_t *temp_buffer){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	uint16_t *volt_data = (uint16_t*)(volt_buffer);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	613b      	str	r3, [r7, #16]
	uint16_t *temp_data = (uint16_t*)(temp_buffer);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]

	// get total, mean, min, max
	uint32_t total = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
	uint16_t min = 50000;
 8001a62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001a66:	837b      	strh	r3, [r7, #26]
	uint16_t max = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	833b      	strh	r3, [r7, #24]
	for(uint16_t i = 0; i<(18*NUM_OF_CLIENTS); i++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	82fb      	strh	r3, [r7, #22]
 8001a70:	e02d      	b.n	8001ace <calc_Battery_values+0x82>
		if((i != 142) && (i != 143)){		// 2 zellen nicht bestückt
 8001a72:	8afb      	ldrh	r3, [r7, #22]
 8001a74:	2b8e      	cmp	r3, #142	; 0x8e
 8001a76:	d027      	beq.n	8001ac8 <calc_Battery_values+0x7c>
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	2b8f      	cmp	r3, #143	; 0x8f
 8001a7c:	d024      	beq.n	8001ac8 <calc_Battery_values+0x7c>
			total += volt_data[i];
 8001a7e:	8afb      	ldrh	r3, [r7, #22]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
			if(volt_data[i] < min){
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	8b7a      	ldrh	r2, [r7, #26]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d905      	bls.n	8001aac <calc_Battery_values+0x60>
				min = volt_data[i];
 8001aa0:	8afb      	ldrh	r3, [r7, #22]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	837b      	strh	r3, [r7, #26]
			}
			if(volt_data[i] > max){
 8001aac:	8afb      	ldrh	r3, [r7, #22]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	8b3a      	ldrh	r2, [r7, #24]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d205      	bcs.n	8001ac8 <calc_Battery_values+0x7c>
				max = volt_data[i];
 8001abc:	8afb      	ldrh	r3, [r7, #22]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	833b      	strh	r3, [r7, #24]
	for(uint16_t i = 0; i<(18*NUM_OF_CLIENTS); i++){
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	3301      	adds	r3, #1
 8001acc:	82fb      	strh	r3, [r7, #22]
 8001ace:	8afb      	ldrh	r3, [r7, #22]
 8001ad0:	2b8f      	cmp	r3, #143	; 0x8f
 8001ad2:	d9ce      	bls.n	8001a72 <calc_Battery_values+0x26>
			}
		}
	}
	battery_values.meanCellVoltage = (uint16_t)(total / (18*NUM_OF_CLIENTS-2));		// 2 zellen nicht bestückt
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <calc_Battery_values+0x15c>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	09db      	lsrs	r3, r3, #7
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <calc_Battery_values+0x160>)
 8001ae2:	80da      	strh	r2, [r3, #6]
	battery_values.totalVoltage = (uint16_t)(total /= 1000); 		// total voltage in 0.1V/bit
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <calc_Battery_values+0x164>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <calc_Battery_values+0x160>)
 8001af6:	801a      	strh	r2, [r3, #0]
	battery_values.lowestCellVoltage = min;
 8001af8:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <calc_Battery_values+0x160>)
 8001afa:	8b7b      	ldrh	r3, [r7, #26]
 8001afc:	8093      	strh	r3, [r2, #4]
	battery_values.highestCellVoltage = max;
 8001afe:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <calc_Battery_values+0x160>)
 8001b00:	8b3b      	ldrh	r3, [r7, #24]
 8001b02:	8053      	strh	r3, [r2, #2]

	total = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
	min = 50000;
 8001b08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001b0c:	837b      	strh	r3, [r7, #26]
	max = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	833b      	strh	r3, [r7, #24]
	for(uint16_t i = 0; i<(8*NUM_OF_CLIENTS); i++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	82bb      	strh	r3, [r7, #20]
 8001b16:	e02d      	b.n	8001b74 <calc_Battery_values+0x128>
		if((i != 1) && (i != 26)){		// temp sensor 1 defekt
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d027      	beq.n	8001b6e <calc_Battery_values+0x122>
 8001b1e:	8abb      	ldrh	r3, [r7, #20]
 8001b20:	2b1a      	cmp	r3, #26
 8001b22:	d024      	beq.n	8001b6e <calc_Battery_values+0x122>
			total += temp_data[i];
 8001b24:	8abb      	ldrh	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	61fb      	str	r3, [r7, #28]
			if(temp_data[i] < min){
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	8b7a      	ldrh	r2, [r7, #26]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d905      	bls.n	8001b52 <calc_Battery_values+0x106>
				min = temp_data[i];
 8001b46:	8abb      	ldrh	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	837b      	strh	r3, [r7, #26]
			}
			if(temp_data[i] > max){
 8001b52:	8abb      	ldrh	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	8b3a      	ldrh	r2, [r7, #24]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d205      	bcs.n	8001b6e <calc_Battery_values+0x122>
				max = temp_data[i];
 8001b62:	8abb      	ldrh	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4413      	add	r3, r2
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	833b      	strh	r3, [r7, #24]
	for(uint16_t i = 0; i<(8*NUM_OF_CLIENTS); i++){
 8001b6e:	8abb      	ldrh	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	82bb      	strh	r3, [r7, #20]
 8001b74:	8abb      	ldrh	r3, [r7, #20]
 8001b76:	2b3f      	cmp	r3, #63	; 0x3f
 8001b78:	d9ce      	bls.n	8001b18 <calc_Battery_values+0xcc>
			}
		}
	}
	battery_values.meanCellTemp = (uint16_t)(total / (8*NUM_OF_CLIENTS-2));		// 1 sensor defekt
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <calc_Battery_values+0x168>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <calc_Battery_values+0x160>)
 8001b8a:	819a      	strh	r2, [r3, #12]
	battery_values.highestCellTemp = min;
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <calc_Battery_values+0x160>)
 8001b8e:	8b7b      	ldrh	r3, [r7, #26]
 8001b90:	8113      	strh	r3, [r2, #8]
	battery_values.lowestCellTemp = max;
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <calc_Battery_values+0x160>)
 8001b94:	8b3b      	ldrh	r3, [r7, #24]
 8001b96:	8153      	strh	r3, [r2, #10]
	return &battery_values;
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <calc_Battery_values+0x160>)
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e6c2b449 	.word	0xe6c2b449
 8001bac:	200000fc 	.word	0x200000fc
 8001bb0:	10624dd3 	.word	0x10624dd3
 8001bb4:	84210843 	.word	0x84210843

08001bb8 <volt2celsius>:

uint8_t volt2celsius(uint16_t volt_100uV){		// convert volt to celsius with polynom
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b09c      	sub	sp, #112	; 0x70
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	if(volt_100uV > 23000){
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	f645 12d8 	movw	r2, #23000	; 0x59d8
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <volt2celsius+0x18>
		return 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e041      	b.n	8001c54 <volt2celsius+0x9c>
	}else if(volt_100uV < 2000){
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bd6:	d201      	bcs.n	8001bdc <volt2celsius+0x24>
		return 100;
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	e03b      	b.n	8001c54 <volt2celsius+0x9c>
	}
	// Coefficients of the polynomial: a0, a1, ..., a10
    double coefficients[11] = {1.65728946e+02, -5.76649020e-02, 1.80075051e-05, -3.95278974e-09, 5.86752736e-13, -5.93033515e-17, 4.07565006e-21, -1.87118391e-25, 5.48516319e-30, -9.27411410e-35, 6.87565181e-40};
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <volt2celsius+0xa4>)
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	4611      	mov	r1, r2
 8001be4:	2258      	movs	r2, #88	; 0x58
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 faf4 	bl	80061d4 <memcpy>

    // Calculate the polynomial value
    double result = coefficients[10];
 8001bec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bf0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for (int8_t i = 9; i >= 0; i--) {
 8001bf4:	2309      	movs	r3, #9
 8001bf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bfa:	e020      	b.n	8001c3e <volt2celsius+0x86>
        result = result * volt_100uV + coefficients[i];
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fd60 	bl	80006c4 <__aeabi_i2d>
 8001c04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c08:	f7fe fae0 	bl	80001cc <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	3370      	adds	r3, #112	; 0x70
 8001c1c:	443b      	add	r3, r7
 8001c1e:	3b68      	subs	r3, #104	; 0x68
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fc02 	bl	800042c <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for (int8_t i = 9; i >= 0; i--) {
 8001c30:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c3e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dada      	bge.n	8001bfc <volt2celsius+0x44>
    }
    return (uint16_t)(result);		// in °C
 8001c46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c4a:	f7fe fda5 	bl	8000798 <__aeabi_d2uiz>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3770      	adds	r7, #112	; 0x70
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08006230 	.word	0x08006230

08001c60 <refresh_SDC>:

Battery_StatusTypeDef refresh_SDC(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	if(SDC_IN_GPIO_Port->IDR & SDC_IN_Pin){
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
		set_battery_error_flag(ERROR_SDC);
		return BATTERY_ERROR;
	*/
	if ((battery_values.error&0x1F) == 0){
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <refresh_SDC+0x54>)
 8001c66:	7bdb      	ldrb	r3, [r3, #15]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <refresh_SDC+0x1e>
		// SDC OK
		// reset tim7 timeout counter
		TIM7->CNT = 0;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <refresh_SDC+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
		error_counter = 0;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <refresh_SDC+0x5c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e016      	b.n	8001cac <refresh_SDC+0x4c>
	}else{
		// SDC error
		error_counter++;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <refresh_SDC+0x5c>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <refresh_SDC+0x5c>)
 8001c88:	701a      	strb	r2, [r3, #0]
		if(error_counter >= 3){
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <refresh_SDC+0x5c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d90c      	bls.n	8001cac <refresh_SDC+0x4c>
			SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
 8001c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9a:	619a      	str	r2, [r3, #24]
			set_battery_error_flag(ERROR_SDC);
 8001c9c:	2008      	movs	r0, #8
 8001c9e:	f7ff fec1 	bl	8001a24 <set_battery_error_flag>
			set_relays(0);								// open AIR relais
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f8a0 	bl	8001de8 <set_relays>
			return BATTERY_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <refresh_SDC+0x4e>
		}
	}
	return BATTERY_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200000fc 	.word	0x200000fc
 8001cb8:	40001400 	.word	0x40001400
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <SDC_reset>:

Battery_StatusTypeDef SDC_reset(){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0f2      	sub	sp, #456	; 0x1c8
 8001cc4:	af00      	add	r7, sp, #0
	if(SDC_IN_GPIO_Port->IDR & SDC_IN_Pin){
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
		return BATTERY_ERROR;
	}
	*/
	error_counter = 2;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <SDC_reset+0x94>)
 8001cc8:	2202      	movs	r2, #2
 8001cca:	701a      	strb	r2, [r3, #0]
	uint8_t volt_buffer[36*NUM_OF_CLIENTS];
	uint8_t temp_buffer[20*NUM_OF_CLIENTS];
	HAL_StatusTypeDef status_hw;
	status_hw = ADBMS_HW_Init();
 8001ccc:	f7ff fd44 	bl	8001758 <ADBMS_HW_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	status_hw |= Read_Voltages(volt_buffer);
 8001cd6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fba8 	bl	8001430 <Read_Voltages>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	status_hw |= Read_Temp(temp_buffer);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fc25 	bl	8001540 <Read_Temp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	status_hw |= check_battery(volt_buffer, temp_buffer);
 8001d04:	1d3a      	adds	r2, r7, #4
 8001d06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f825 	bl	8001d5c <check_battery>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	// SDC on / off
	if(status_hw == HAL_OK){
 8001d20:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <SDC_reset+0x7c>
		TIM7->CNT = 0;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <SDC_reset+0x98>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin;	// SDC high
 8001d2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d36:	619a      	str	r2, [r3, #24]
		// reset tim7 timeout counter
		return BATTERY_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e005      	b.n	8001d48 <SDC_reset+0x88>
	}else{
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
 8001d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d44:	619a      	str	r2, [r3, #24]
		return BATTERY_ERROR;
 8001d46:	2301      	movs	r3, #1
	}
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000000 	.word	0x20000000
 8001d58:	40001400 	.word	0x40001400

08001d5c <check_battery>:

Battery_StatusTypeDef check_battery(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = Read_Voltages(battery_values.volt_buffer);
 8001d62:	481e      	ldr	r0, [pc, #120]	; (8001ddc <check_battery+0x80>)
 8001d64:	f7ff fb64 	bl	8001430 <Read_Voltages>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
	status |= Read_Temp(battery_values.temp_buffer);
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <check_battery+0x84>)
 8001d6e:	f7ff fbe7 	bl	8001540 <Read_Temp>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	71fb      	strb	r3, [r7, #7]

	if(status){
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <check_battery+0x2e>
		set_battery_error_flag(ERROR_SPI|ERROR_BATTERY);
 8001d82:	2011      	movs	r0, #17
 8001d84:	f7ff fe4e 	bl	8001a24 <set_battery_error_flag>
 8001d88:	e021      	b.n	8001dce <check_battery+0x72>
	}else{
		calc_Battery_values(battery_values.volt_buffer, battery_values.temp_buffer);
 8001d8a:	4915      	ldr	r1, [pc, #84]	; (8001de0 <check_battery+0x84>)
 8001d8c:	4813      	ldr	r0, [pc, #76]	; (8001ddc <check_battery+0x80>)
 8001d8e:	f7ff fe5d 	bl	8001a4c <calc_Battery_values>
		// check limits
		if((battery_values.highestCellVoltage > MAX_VOLT) || (battery_values.lowestCellVoltage < MIN_VOLT)){
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <check_battery+0x88>)
 8001d94:	885b      	ldrh	r3, [r3, #2]
 8001d96:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d805      	bhi.n	8001daa <check_battery+0x4e>
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <check_battery+0x88>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	f247 522f 	movw	r2, #29999	; 0x752f
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d802      	bhi.n	8001db0 <check_battery+0x54>
			set_battery_error_flag(ERROR_VOLT|ERROR_BATTERY);
 8001daa:	2005      	movs	r0, #5
 8001dac:	f7ff fe3a 	bl	8001a24 <set_battery_error_flag>
		}
		if((battery_values.highestCellTemp < MAX_TEMP) || (battery_values.lowestCellTemp > MIN_TEMP)){
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <check_battery+0x88>)
 8001db2:	891b      	ldrh	r3, [r3, #8]
 8001db4:	f241 72e2 	movw	r2, #6114	; 0x17e2
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d905      	bls.n	8001dc8 <check_battery+0x6c>
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <check_battery+0x88>)
 8001dbe:	895b      	ldrh	r3, [r3, #10]
 8001dc0:	f244 1255 	movw	r2, #16725	; 0x4155
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d902      	bls.n	8001dce <check_battery+0x72>
			set_battery_error_flag(ERROR_TEMP|ERROR_BATTERY);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f7ff fe2b 	bl	8001a24 <set_battery_error_flag>
		}
	}
	return refresh_SDC();;
 8001dce:	f7ff ff47 	bl	8001c60 <refresh_SDC>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000114 	.word	0x20000114
 8001de0:	20000234 	.word	0x20000234
 8001de4:	200000fc 	.word	0x200000fc

08001de8 <set_relays>:

void set_relays(uint8_t CAN_Data){
 8001de8:	b4b0      	push	{r4, r5, r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4601      	mov	r1, r0
 8001df0:	71f9      	strb	r1, [r7, #7]
	static uint64_t last_value = 0;
	if(last_value != CAN_Data){
 8001df2:	79f9      	ldrb	r1, [r7, #7]
 8001df4:	2000      	movs	r0, #0
 8001df6:	460a      	mov	r2, r1
 8001df8:	4603      	mov	r3, r0
 8001dfa:	491d      	ldr	r1, [pc, #116]	; (8001e70 <set_relays+0x88>)
 8001dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e00:	428b      	cmp	r3, r1
 8001e02:	bf08      	it	eq
 8001e04:	4282      	cmpeq	r2, r0
 8001e06:	d026      	beq.n	8001e56 <set_relays+0x6e>
		if(CAN_Data & AIR_POSITIVE){
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <set_relays+0x32>
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin;	// high
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <set_relays+0x8c>)
 8001e14:	2210      	movs	r2, #16
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	e003      	b.n	8001e22 <set_relays+0x3a>
		}else{
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin<<16;	// low
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <set_relays+0x8c>)
 8001e1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e20:	619a      	str	r2, [r3, #24]
		}
		if(CAN_Data & AIR_NEGATIVE){
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <set_relays+0x4c>
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin;	// high
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <set_relays+0x8c>)
 8001e2e:	2220      	movs	r2, #32
 8001e30:	619a      	str	r2, [r3, #24]
 8001e32:	e003      	b.n	8001e3c <set_relays+0x54>
		}else{
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin<<16;	// low
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <set_relays+0x8c>)
 8001e36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e3a:	619a      	str	r2, [r3, #24]
		}
		if(CAN_Data & PRECHARGE_RELAY){
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <set_relays+0x66>
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin;	// high
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <set_relays+0x8c>)
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	619a      	str	r2, [r3, #24]
 8001e4c:	e003      	b.n	8001e56 <set_relays+0x6e>
		}else{
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin<<16;	// low
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <set_relays+0x8c>)
 8001e50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e54:	619a      	str	r2, [r3, #24]
		}
	}
	last_value = CAN_Data;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	4615      	mov	r5, r2
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <set_relays+0x88>)
 8001e60:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bcb0      	pop	{r4, r5, r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200002d8 	.word	0x200002d8
 8001e74:	48000400 	.word	0x48000400

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7e:	f000 fcf4 	bl	800286a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e82:	f000 f86b 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e86:	f000 fa2f 	bl	80022e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e8a:	f000 f9fd 	bl	8002288 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001e8e:	f000 f8c7 	bl	8002020 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001e92:	f000 f949 	bl	8002128 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001e96:	f000 f985 	bl	80021a4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001e9a:	f000 f9bd 	bl	8002218 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // User Variables
  uint16_t GPIOA_Input = 0x0000;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	80fb      	strh	r3, [r7, #6]

  //>> Current measurement init
  ISA_IVT_Init();
 8001ea2:	f7fe ff07 	bl	8000cb4 <ISA_IVT_Init>

  //>> SDC reset
  set_relays(0);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff ff9e 	bl	8001de8 <set_relays>
  SDC_reset();
 8001eac:	f7ff ff08 	bl	8001cc0 <SDC_reset>
    /* USER CODE BEGIN 3 */
	//>> Performance Monitor
	//HAL_IWDG_Refresh(&hiwdg);

	//>> GPIOs lesen
	GPIOA_Input = GPIOA->IDR;
 8001eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	80fb      	strh	r3, [r7, #6]

	//>> check 10 Hz Flag, timer 6
    if ((TIM6->SR & TIM_SR_UIF) != 0) {
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <main+0xd8>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d041      	beq.n	8001f48 <main+0xd0>
        TIM6->SR &= ~TIM_SR_UIF;	// Clear the overflow flag
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <main+0xd8>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <main+0xd8>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6113      	str	r3, [r2, #16]
    	// This code runs every 100ms
        battery_reset_error_flags();
 8001ed0:	f7ff fd90 	bl	80019f4 <battery_reset_error_flags>

    	//>> Check-Batterie
    	if(!check_battery()){
 8001ed4:	f7ff ff42 	bl	8001d5c <check_battery>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <main+0x72>
    		User_LED_GPIO_Port->ODR ^= User_LED_Pin; // Toggle user LED if battery is ok
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <main+0xdc>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <main+0xdc>)
 8001ee4:	f083 0308 	eor.w	r3, r3, #8
 8001ee8:	6153      	str	r3, [r2, #20]
    	}

    	//>> charging logic
    	if(GPIOA_Input & Charger_Con_Pin){		// charger connected
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00b      	beq.n	8001f0c <main+0x94>
    		if((battery_values.status&STATUS_CHARGING) == 0){
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <main+0xe0>)
 8001ef6:	7b9b      	ldrb	r3, [r3, #14]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <main+0xaa>
    			//set_relays(AIR_POSITIVE | AIR_NEGATIVE);	// close AIR relais
    		}else{
    			//if(balancing((uint16_t*)(volt_buffer))){
    				Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin;	// high
 8001f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	e00a      	b.n	8001f22 <main+0xaa>
    			//}else{
    			//	Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin<<16;	// low
    			//}
    		}
    	}else{
    		if((battery_values.status&STATUS_CHARGING) == STATUS_CHARGING){
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <main+0xe0>)
 8001f0e:	7b9b      	ldrb	r3, [r3, #14]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <main+0xaa>
				Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin<<16;	// low
 8001f18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f20:	619a      	str	r2, [r3, #24]
				//set_relays(0);		// open AIR relais
			}
    	}

    	//>> send CAN information
    	send_data2ECU(GPIOA_Input);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fe75 	bl	8000c14 <send_data2ECU>

    	//>> Serial Monitor
    	SerialMonitor(all_values, (uint8_t*)(&battery_values), sizeof(battery_values));
 8001f2a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <main+0xe0>)
 8001f30:	20a3      	movs	r0, #163	; 0xa3
 8001f32:	f000 fa61 	bl	80023f8 <SerialMonitor>

    	//>> check can overflow
    	if(FIFO_ovf()){
 8001f36:	f7fe fe55 	bl	8000be4 <FIFO_ovf>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0b7      	beq.n	8001eb0 <main+0x38>
    		set_battery_error_flag(ERROR_CAN);
 8001f40:	2020      	movs	r0, #32
 8001f42:	f7ff fd6f 	bl	8001a24 <set_battery_error_flag>
 8001f46:	e7b3      	b.n	8001eb0 <main+0x38>
    	}

    }else{		// outside 10Hz timer 6
    	//>> receive one CAN command
    	CAN_receive_packet();
 8001f48:	f7fe ff5e 	bl	8000e08 <CAN_receive_packet>
	GPIOA_Input = GPIOA->IDR;
 8001f4c:	e7b0      	b.n	8001eb0 <main+0x38>
 8001f4e:	bf00      	nop
 8001f50:	40001000 	.word	0x40001000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	200000fc 	.word	0x200000fc

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b096      	sub	sp, #88	; 0x58
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2244      	movs	r2, #68	; 0x44
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f940 	bl	80061f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f70:	463b      	mov	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f82:	f001 fbd1 	bl	8003728 <HAL_PWREx_ControlVoltageScaling>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f8c:	f000 fa2a 	bl	80023e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f90:	f001 fbac 	bl	80036ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <SystemClock_Config+0xc0>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <SystemClock_Config+0xc0>)
 8001f9c:	f023 0318 	bic.w	r3, r3, #24
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fa4:	2314      	movs	r3, #20
 8001fa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fac:	2301      	movs	r3, #1
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 fbfb 	bl	80037d4 <HAL_RCC_OscConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fe4:	f000 f9fe 	bl	80023e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	230f      	movs	r3, #15
 8001fea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fec:	2303      	movs	r3, #3
 8001fee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2103      	movs	r1, #3
 8002000:	4618      	mov	r0, r3
 8002002:	f001 fffb 	bl	8003ffc <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800200c:	f000 f9ea 	bl	80023e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002010:	f002 fc0e 	bl	8004830 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002014:	bf00      	nop
 8002016:	3758      	adds	r7, #88	; 0x58
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000

08002020 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <MX_CAN1_Init+0x100>)
 8002028:	4a3e      	ldr	r2, [pc, #248]	; (8002124 <MX_CAN1_Init+0x104>)
 800202a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800202c:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <MX_CAN1_Init+0x100>)
 800202e:	2220      	movs	r2, #32
 8002030:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <MX_CAN1_Init+0x100>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <MX_CAN1_Init+0x100>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <MX_CAN1_Init+0x100>)
 8002040:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002044:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <MX_CAN1_Init+0x100>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <MX_CAN1_Init+0x100>)
 800204e:	2200      	movs	r2, #0
 8002050:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <MX_CAN1_Init+0x100>)
 8002054:	2200      	movs	r2, #0
 8002056:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <MX_CAN1_Init+0x100>)
 800205a:	2201      	movs	r2, #1
 800205c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <MX_CAN1_Init+0x100>)
 8002060:	2201      	movs	r2, #1
 8002062:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <MX_CAN1_Init+0x100>)
 8002066:	2200      	movs	r2, #0
 8002068:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <MX_CAN1_Init+0x100>)
 800206c:	2200      	movs	r2, #0
 800206e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002070:	482b      	ldr	r0, [pc, #172]	; (8002120 <MX_CAN1_Init+0x100>)
 8002072:	f000 fc93 	bl	800299c <HAL_CAN_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800207c:	f000 f9b2 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef sFilterConfig;
  // Configure Filter for ECU on FIFO 0
  sFilterConfig.FilterBank = 0; // Use first filter bank
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002088:	2301      	movs	r3, #1
 800208a:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterIdHigh = ((ADDR_ECU_RX >> 13)& 0xFFFF);
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterIdLow =  ((ADDR_ECU_RX << 3) & 0xFFF8);
 8002090:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002094:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8002096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdLow = 0xFFF8;
 800209c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80020a0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterActivation = ENABLE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.SlaveStartFilterBank = 14; // Only necessary for dual CAN setups
 80020aa:	230e      	movs	r3, #14
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_StatusTypeDef init_status = HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	481b      	ldr	r0, [pc, #108]	; (8002120 <MX_CAN1_Init+0x100>)
 80020b4:	f000 fd6d 	bl	8002b92 <HAL_CAN_ConfigFilter>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  // Configure Filter for IVS on FIFO 1
  sFilterConfig.FilterBank = 1; // Use second filter bank
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMode = 	CAN_FILTERMODE_IDLIST;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterScale = 	CAN_FILTERSCALE_16BIT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterIdHigh = 		IVT_MSG_RESPONSE << 5;
 80020ca:	f24a 2320 	movw	r3, #41504	; 0xa220
 80020ce:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterIdLow =  		IVT_MSG_RESULT_I << 5;
 80020d0:	f24a 4320 	movw	r3, #42016	; 0xa420
 80020d4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdHigh = 	IVT_MSG_RESULT_T << 5;
 80020d6:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
 80020da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdLow = 	IVT_MSG_RESULT_AS << 5;
 80020dc:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
 80020e0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterActivation = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24

  init_status |= HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_CAN1_Init+0x100>)
 80020f0:	f000 fd4f 	bl	8002b92 <HAL_CAN_ConfigFilter>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  init_status |= HAL_CAN_Start(&hcan1); //start CAN
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <MX_CAN1_Init+0x100>)
 8002104:	f000 fe0f 	bl	8002d26 <HAL_CAN_Start>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002110:	4313      	orrs	r3, r2
 8002112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE END CAN1_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	3730      	adds	r7, #48	; 0x30
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002e0 	.word	0x200002e0
 8002124:	40006400 	.word	0x40006400

08002128 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <MX_SPI1_Init+0x74>)
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <MX_SPI1_Init+0x78>)
 8002130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <MX_SPI1_Init+0x74>)
 8002134:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <MX_SPI1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <MX_SPI1_Init+0x74>)
 8002142:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002146:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_SPI1_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <MX_SPI1_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <MX_SPI1_Init+0x74>)
 8002156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <MX_SPI1_Init+0x74>)
 800215e:	2230      	movs	r2, #48	; 0x30
 8002160:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_SPI1_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <MX_SPI1_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <MX_SPI1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <MX_SPI1_Init+0x74>)
 8002176:	2207      	movs	r2, #7
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <MX_SPI1_Init+0x74>)
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <MX_SPI1_Init+0x74>)
 8002182:	2200      	movs	r2, #0
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_SPI1_Init+0x74>)
 8002188:	f002 fc54 	bl	8004a34 <HAL_SPI_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002192:	f000 f927 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000308 	.word	0x20000308
 80021a0:	40013000 	.word	0x40013000

080021a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <MX_TIM6_Init+0x70>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021bc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80021c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021ca:	2264      	movs	r2, #100	; 0x64
 80021cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021d4:	480e      	ldr	r0, [pc, #56]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021d6:	f003 f847 	bl	8005268 <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80021e0:	f000 f900 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	; (8002210 <MX_TIM6_Init+0x6c>)
 80021f2:	f003 fa89 	bl	8005708 <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80021fc:	f000 f8f2 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  HAL_TIM_Base_Start(&htim6);		// start timer6 for 10Hz flag
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <MX_TIM6_Init+0x6c>)
 8002202:	f003 f889 	bl	8005318 <HAL_TIM_Base_Start>

  /* USER CODE END TIM6_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000036c 	.word	0x2000036c
 8002214:	40001000 	.word	0x40001000

08002218 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM7_Init+0x68>)
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <MX_TIM7_Init+0x6c>)
 800222c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64000;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MX_TIM7_Init+0x68>)
 8002230:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002234:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_TIM7_Init+0x68>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <MX_TIM7_Init+0x68>)
 800223e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002242:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_TIM7_Init+0x68>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_TIM7_Init+0x68>)
 800224c:	f003 f80c 	bl	8005268 <HAL_TIM_Base_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002256:	f000 f8c5 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <MX_TIM7_Init+0x68>)
 8002268:	f003 fa4e 	bl	8005708 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002272:	f000 f8b7 	bl	80023e4 <Error_Handler>

  //HAL_TIM_Base_Start_IT(&htim7);		// start timer7 for 500ms timeout

  /* USER CODE END TIM7_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200003b8 	.word	0x200003b8
 8002284:	40001400 	.word	0x40001400

08002288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <MX_USART2_UART_Init+0x5c>)
 8002290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 8002294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022cc:	f003 faa0 	bl	8005810 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022d6:	f000 f885 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000404 	.word	0x20000404
 80022e4:	40004400 	.word	0x40004400

080022e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <MX_GPIO_Init+0xe0>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <MX_GPIO_Init+0xe0>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230a:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <MX_GPIO_Init+0xe0>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <MX_GPIO_Init+0xe0>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <MX_GPIO_Init+0xe0>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <MX_GPIO_Init+0xe0>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <MX_GPIO_Init+0xe0>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <MX_GPIO_Init+0xe0>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <MX_GPIO_Init+0xe0>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISO_SPI_CS2_Pin|ISO_SPI_CS1_Pin, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	2103      	movs	r1, #3
 800234a:	4820      	ldr	r0, [pc, #128]	; (80023cc <MX_GPIO_Init+0xe4>)
 800234c:	f001 f9b6 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDC_Out_Pin|Charge_EN_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235a:	f001 f9af 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, User_LED_Pin|Drive_AIR_positive_Pin|Drive_AIR_negative_Pin|Drive_Precharge_Relay_Pin
 800235e:	2200      	movs	r2, #0
 8002360:	21f8      	movs	r1, #248	; 0xf8
 8002362:	481a      	ldr	r0, [pc, #104]	; (80023cc <MX_GPIO_Init+0xe4>)
 8002364:	f001 f9aa 	bl	80036bc <HAL_GPIO_WritePin>
                          |Reserve_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SDC_IN_Pin V_FB_AIR_negative_Pin V_FB_AIR_positive_Pin V_FB_PC_Relay_Pin
                           Charger_Con_Pin */
  GPIO_InitStruct.Pin = SDC_IN_Pin|V_FB_AIR_negative_Pin|V_FB_AIR_positive_Pin|V_FB_PC_Relay_Pin
 8002368:	f240 431b 	movw	r3, #1051	; 0x41b
 800236c:	60fb      	str	r3, [r7, #12]
                          |Charger_Con_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f001 f832 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISO_SPI_CS2_Pin ISO_SPI_CS1_Pin User_LED_Pin Drive_AIR_positive_Pin
                           Drive_AIR_negative_Pin Drive_Precharge_Relay_Pin Reserve_Pin */
  GPIO_InitStruct.Pin = ISO_SPI_CS2_Pin|ISO_SPI_CS1_Pin|User_LED_Pin|Drive_AIR_positive_Pin
 8002384:	23fb      	movs	r3, #251	; 0xfb
 8002386:	60fb      	str	r3, [r7, #12]
                          |Drive_AIR_negative_Pin|Drive_Precharge_Relay_Pin|Reserve_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002388:	2301      	movs	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	4619      	mov	r1, r3
 800239a:	480c      	ldr	r0, [pc, #48]	; (80023cc <MX_GPIO_Init+0xe4>)
 800239c:	f001 f824 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDC_Out_Pin Charge_EN_Pin */
  GPIO_InitStruct.Pin = SDC_Out_Pin|Charge_EN_Pin;
 80023a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f001 f814 	bl	80033e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c0:	bf00      	nop
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000400 	.word	0x48000400

080023d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  {
    // TIM7 overflow callback
	//GPIOA->BSRR = SDC_Out_Pin<<16;	// SDC low
	//set_battery_error_flag(ERROR_SDC);
  }
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
  {
	  send_data2ECU(0);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fc13 	bl	8000c14 <send_data2ECU>
	  // watchdog occurs after 100 ms
	  HAL_Delay(1000);
 80023ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f2:	f000 faaf 	bl	8002954 <HAL_Delay>
	  send_data2ECU(0);
 80023f6:	e7f7      	b.n	80023e8 <Error_Handler+0x4>

080023f8 <SerialMonitor>:
		buffer[i*2] = buffer[i*2+1];
		buffer[i*2+1] = low_byte;
	}
}

void SerialMonitor(Serial_Commmand_type command, uint8_t* data, uint16_t size){
 80023f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023fc:	b089      	sub	sp, #36	; 0x24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	6039      	str	r1, [r7, #0]
 8002404:	71fb      	strb	r3, [r7, #7]
 8002406:	4613      	mov	r3, r2
 8002408:	80bb      	strh	r3, [r7, #4]
	if((command&0xF0)==0xA0){
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002410:	2ba0      	cmp	r3, #160	; 0xa0
 8002412:	d149      	bne.n	80024a8 <SerialMonitor+0xb0>
 8002414:	466b      	mov	r3, sp
 8002416:	461e      	mov	r6, r3
		uint8_t send_buffer[size];
 8002418:	88b9      	ldrh	r1, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	3b01      	subs	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	b28b      	uxth	r3, r1
 8002422:	2200      	movs	r2, #0
 8002424:	4698      	mov	r8, r3
 8002426:	4691      	mov	r9, r2
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002438:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800243c:	b28b      	uxth	r3, r1
 800243e:	2200      	movs	r2, #0
 8002440:	461c      	mov	r4, r3
 8002442:	4615      	mov	r5, r2
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	00eb      	lsls	r3, r5, #3
 800244e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002452:	00e2      	lsls	r2, r4, #3
 8002454:	460b      	mov	r3, r1
 8002456:	3307      	adds	r3, #7
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	ebad 0d03 	sub.w	sp, sp, r3
 8002460:	466b      	mov	r3, sp
 8002462:	3300      	adds	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
		for(uint16_t i=0; i<size>>1; i++){	// switch high and low byte per 16 bit value
			send_buffer[i*2] = data[i*2+1];
			send_buffer[i*2+1] = data[i*2];
		}
		*/
		uint8_t start[] = {0xFF, command};
 8002466:	23ff      	movs	r3, #255	; 0xff
 8002468:	753b      	strb	r3, [r7, #20]
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	757b      	strb	r3, [r7, #21]
		uint8_t stop[] = {0xFF, command|0xB0};
 800246e:	23ff      	movs	r3, #255	; 0xff
 8002470:	743b      	strb	r3, [r7, #16]
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002478:	b2db      	uxtb	r3, r3
 800247a:	747b      	strb	r3, [r7, #17]
		HAL_UART_Transmit(&huart2, start, 2, 100);
 800247c:	f107 0114 	add.w	r1, r7, #20
 8002480:	2364      	movs	r3, #100	; 0x64
 8002482:	2202      	movs	r2, #2
 8002484:	4810      	ldr	r0, [pc, #64]	; (80024c8 <SerialMonitor+0xd0>)
 8002486:	f003 fa11 	bl	80058ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, data, size, 100);
 800248a:	88ba      	ldrh	r2, [r7, #4]
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	480d      	ldr	r0, [pc, #52]	; (80024c8 <SerialMonitor+0xd0>)
 8002492:	f003 fa0b 	bl	80058ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, stop, 2, 100);
 8002496:	f107 0110 	add.w	r1, r7, #16
 800249a:	2364      	movs	r3, #100	; 0x64
 800249c:	2202      	movs	r2, #2
 800249e:	480a      	ldr	r0, [pc, #40]	; (80024c8 <SerialMonitor+0xd0>)
 80024a0:	f003 fa04 	bl	80058ac <HAL_UART_Transmit>
 80024a4:	46b5      	mov	sp, r6
	}else{
		uint8_t code[] = {0xFF, command};
		HAL_UART_Transmit(&huart2, code, 2, 100);
	}
}
 80024a6:	e00a      	b.n	80024be <SerialMonitor+0xc6>
		uint8_t code[] = {0xFF, command};
 80024a8:	23ff      	movs	r3, #255	; 0xff
 80024aa:	733b      	strb	r3, [r7, #12]
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&huart2, code, 2, 100);
 80024b0:	f107 010c 	add.w	r1, r7, #12
 80024b4:	2364      	movs	r3, #100	; 0x64
 80024b6:	2202      	movs	r2, #2
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <SerialMonitor+0xd0>)
 80024ba:	f003 f9f7 	bl	80058ac <HAL_UART_Transmit>
}
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024c8:	20000404 	.word	0x20000404

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_MspInit+0x44>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_MspInit+0x44>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6613      	str	r3, [r2, #96]	; 0x60
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_MspInit+0x44>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_MspInit+0x44>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_MspInit+0x44>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_MspInit+0x44>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a18      	ldr	r2, [pc, #96]	; (8002594 <HAL_CAN_MspInit+0x80>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d129      	bne.n	800258a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_CAN_MspInit+0x84>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <HAL_CAN_MspInit+0x84>)
 800253c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_CAN_MspInit+0x84>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_CAN_MspInit+0x84>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_CAN_MspInit+0x84>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_CAN_MspInit+0x84>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = RXCAN_Pin|TXCAN_Pin;
 8002566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002578:	2309      	movs	r3, #9
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002586:	f000 ff2f 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40006400 	.word	0x40006400
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_SPI_MspInit+0xa0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d139      	bne.n	8002632 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_SPI_MspInit+0xa4>)
 80025c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_SPI_MspInit+0xa4>)
 80025c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_SPI_MspInit+0xa4>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_SPI_MspInit+0xa4>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_SPI_MspInit+0xa4>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_SPI_MspInit+0xa4>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ISO_SPI_SCLK_Pin|ISO_SPI_MOSI_Pin;
 80025ee:	23a0      	movs	r3, #160	; 0xa0
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fe:	2305      	movs	r3, #5
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f000 feec 	bl	80033e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISO_SPI_MISO_Pin;
 8002610:	2340      	movs	r3, #64	; 0x40
 8002612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002618:	2301      	movs	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002620:	2305      	movs	r3, #5
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262e:	f000 fedb 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40013000 	.word	0x40013000
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_TIM_Base_MspInit+0x68>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10c      	bne.n	8002670 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800266e:	e018      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_TIM_Base_MspInit+0x70>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d113      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002680:	f043 0320 	orr.w	r3, r3, #32
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2037      	movs	r0, #55	; 0x37
 8002698:	f000 fe6f 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800269c:	2037      	movs	r0, #55	; 0x37
 800269e:	f000 fe88 	bl	80033b2 <HAL_NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40001000 	.word	0x40001000
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40001400 	.word	0x40001400

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b09e      	sub	sp, #120	; 0x78
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	2254      	movs	r2, #84	; 0x54
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 fd89 	bl	80061f0 <memset>
  if(huart->Instance==USART2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a28      	ldr	r2, [pc, #160]	; (8002784 <HAL_UART_MspInit+0xcc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d148      	bne.n	800277a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026e8:	2302      	movs	r3, #2
 80026ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 fea5 	bl	8004444 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002700:	f7ff fe70 	bl	80023e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_UART_MspInit+0xd0>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_UART_MspInit+0xd0>)
 800270a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270e:	6593      	str	r3, [r2, #88]	; 0x58
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_UART_MspInit+0xd0>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_UART_MspInit+0xd0>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_UART_MspInit+0xd0>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_UART_MspInit+0xd0>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002734:	2304      	movs	r3, #4
 8002736:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002744:	2307      	movs	r3, #7
 8002746:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002748:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f000 fe49 	bl	80033e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002768:	2303      	movs	r3, #3
 800276a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f000 fe37 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800277a:	bf00      	nop
 800277c:	3778      	adds	r7, #120	; 0x78
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40004400 	.word	0x40004400
 8002788:	40021000 	.word	0x40021000

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <NMI_Handler+0x4>

08002792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <MemManage_Handler+0x4>

0800279e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <UsageFault_Handler+0x4>

080027aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d8:	f000 f89c 	bl	8002914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <TIM7_IRQHandler+0x10>)
 80027e6:	f002 fde3 	bl	80053b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200003b8 	.word	0x200003b8

080027f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SystemInit+0x20>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <SystemInit+0x20>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002850 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800281c:	f7ff ffea 	bl	80027f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <LoopForever+0x6>)
  ldr r1, =_edata
 8002822:	490d      	ldr	r1, [pc, #52]	; (8002858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <LoopForever+0xe>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002838:	4c0a      	ldr	r4, [pc, #40]	; (8002864 <LoopForever+0x16>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002846:	f003 fca1 	bl	800618c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800284a:	f7ff fb15 	bl	8001e78 <main>

0800284e <LoopForever>:

LoopForever:
    b LoopForever
 800284e:	e7fe      	b.n	800284e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002850:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002858:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800285c:	080062fc 	.word	0x080062fc
  ldr r2, =_sbss
 8002860:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002864:	2000048c 	.word	0x2000048c

08002868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC1_IRQHandler>

0800286a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 fd75 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f80e 	bl	800289c <HAL_InitTick>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	71fb      	strb	r3, [r7, #7]
 800288a:	e001      	b.n	8002890 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800288c:	f7ff fe1e 	bl	80024cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002890:	79fb      	ldrb	r3, [r7, #7]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <HAL_InitTick+0x6c>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d023      	beq.n	80028f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_InitTick+0x70>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_InitTick+0x6c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fd81 	bl	80033ce <HAL_SYSTICK_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d809      	bhi.n	80028ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 fd4b 	bl	800337a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_InitTick+0x74>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e007      	b.n	80028fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e004      	b.n	80028fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e001      	b.n	80028fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000000c 	.word	0x2000000c
 800290c:	20000004 	.word	0x20000004
 8002910:	20000008 	.word	0x20000008

08002914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_IncTick+0x20>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_IncTick+0x24>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_IncTick+0x24>)
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2000000c 	.word	0x2000000c
 8002938:	20000488 	.word	0x20000488

0800293c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return uwTick;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_GetTick+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000488 	.word	0x20000488

08002954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff ffee 	bl	800293c <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d005      	beq.n	800297a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_Delay+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297a:	bf00      	nop
 800297c:	f7ff ffde 	bl	800293c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d8f7      	bhi.n	800297c <HAL_Delay+0x28>
  {
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000000c 	.word	0x2000000c

0800299c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0ed      	b.n	8002b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fdaa 	bl	8002514 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d0:	f7ff ffb4 	bl	800293c <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029d6:	e012      	b.n	80029fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029d8:	f7ff ffb0 	bl	800293c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b0a      	cmp	r3, #10
 80029e4:	d90b      	bls.n	80029fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2205      	movs	r2, #5
 80029f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0c5      	b.n	8002b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0e5      	beq.n	80029d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0202 	bic.w	r2, r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a1c:	f7ff ff8e 	bl	800293c <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a22:	e012      	b.n	8002a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a24:	f7ff ff8a 	bl	800293c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b0a      	cmp	r3, #10
 8002a30:	d90b      	bls.n	8002a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e09f      	b.n	8002b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7e1b      	ldrb	r3, [r3, #24]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d108      	bne.n	8002a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e007      	b.n	8002a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e5b      	ldrb	r3, [r3, #25]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d108      	bne.n	8002a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e007      	b.n	8002aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7e9b      	ldrb	r3, [r3, #26]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d108      	bne.n	8002ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0220 	orr.w	r2, r2, #32
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e007      	b.n	8002ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0220 	bic.w	r2, r2, #32
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7edb      	ldrb	r3, [r3, #27]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0210 	bic.w	r2, r2, #16
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e007      	b.n	8002b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0210 	orr.w	r2, r2, #16
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7f1b      	ldrb	r3, [r3, #28]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d108      	bne.n	8002b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e007      	b.n	8002b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0208 	bic.w	r2, r2, #8
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7f5b      	ldrb	r3, [r3, #29]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0204 	orr.w	r2, r2, #4
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e007      	b.n	8002b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	ea42 0103 	orr.w	r1, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	1e5a      	subs	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d003      	beq.n	8002bb8 <HAL_CAN_ConfigFilter+0x26>
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 80aa 	bne.w	8002d0c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d123      	bne.n	8002c3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3248      	adds	r2, #72	; 0x48
 8002c1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c30:	6979      	ldr	r1, [r7, #20]
 8002c32:	3348      	adds	r3, #72	; 0x48
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d122      	bne.n	8002c88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3248      	adds	r2, #72	; 0x48
 8002c68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c7e:	6979      	ldr	r1, [r7, #20]
 8002c80:	3348      	adds	r3, #72	; 0x48
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ca2:	e007      	b.n	8002cb4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002cce:	e007      	b.n	8002ce0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e006      	b.n	8002d1a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d12e      	bne.n	8002d98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d52:	f7ff fdf3 	bl	800293c <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d58:	e012      	b.n	8002d80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d5a:	f7ff fdef 	bl	800293c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b0a      	cmp	r3, #10
 8002d66:	d90b      	bls.n	8002d80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2205      	movs	r2, #5
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e012      	b.n	8002da6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e5      	bne.n	8002d5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e006      	b.n	8002da6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b089      	sub	sp, #36	; 0x24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d003      	beq.n	8002dda <HAL_CAN_AddTxMessage+0x2c>
 8002dd2:	7ffb      	ldrb	r3, [r7, #31]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	f040 80ad 	bne.w	8002f34 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8095 	beq.w	8002f24 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	0e1b      	lsrs	r3, r3, #24
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e04:	2201      	movs	r2, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e00f      	b.n	8002e52 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	440b      	add	r3, r1
 8002e50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3318      	adds	r3, #24
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	440b      	add	r3, r1
 8002e62:	3304      	adds	r3, #4
 8002e64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	7d1b      	ldrb	r3, [r3, #20]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d111      	bne.n	8002e92 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3318      	adds	r3, #24
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6811      	ldr	r1, [r2, #0]
 8002e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3318      	adds	r3, #24
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3304      	adds	r3, #4
 8002e90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3307      	adds	r3, #7
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	061a      	lsls	r2, r3, #24
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3306      	adds	r3, #6
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3305      	adds	r3, #5
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	4313      	orrs	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	3204      	adds	r2, #4
 8002eb2:	7812      	ldrb	r2, [r2, #0]
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	6811      	ldr	r1, [r2, #0]
 8002eba:	ea43 0200 	orr.w	r2, r3, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ec8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3303      	adds	r3, #3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	061a      	lsls	r2, r3, #24
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	4610      	mov	r0, r2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6811      	ldr	r1, [r2, #0]
 8002ef0:	ea43 0200 	orr.w	r2, r3, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002efe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3318      	adds	r3, #24
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	6811      	ldr	r1, [r2, #0]
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	440b      	add	r3, r1
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e00e      	b.n	8002f42 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e006      	b.n	8002f42 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f62:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d003      	beq.n	8002f72 <HAL_CAN_GetRxMessage+0x24>
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	f040 80f3 	bne.w	8003158 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10e      	bne.n	8002f96 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e7      	b.n	8003166 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0d8      	b.n	8003166 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	331b      	adds	r3, #27
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4413      	add	r3, r2
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0204 	and.w	r2, r3, #4
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	331b      	adds	r3, #27
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4413      	add	r3, r2
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e00b      	b.n	8003004 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	331b      	adds	r3, #27
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4413      	add	r3, r2
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	331b      	adds	r3, #27
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	4413      	add	r3, r2
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0202 	and.w	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	331b      	adds	r3, #27
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	331b      	adds	r3, #27
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b2da      	uxtb	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	331b      	adds	r3, #27
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4413      	add	r3, r2
 800306c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4413      	add	r3, r2
 8003082:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0a1a      	lsrs	r2, r3, #8
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4413      	add	r3, r2
 800309c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0c1a      	lsrs	r2, r3, #16
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3302      	adds	r3, #2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e1a      	lsrs	r2, r3, #24
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3303      	adds	r3, #3
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	0a1a      	lsrs	r2, r3, #8
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	3305      	adds	r3, #5
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	4413      	add	r3, r2
 8003102:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0c1a      	lsrs	r2, r3, #16
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	3306      	adds	r3, #6
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	4413      	add	r3, r2
 800311c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	0e1a      	lsrs	r2, r3, #24
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	3307      	adds	r3, #7
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0220 	orr.w	r2, r2, #32
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e007      	b.n	8003154 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0220 	orr.w	r2, r2, #32
 8003152:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e006      	b.n	8003166 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003186:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003188:	7afb      	ldrb	r3, [r7, #11]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800318e:	7afb      	ldrb	r3, [r7, #11]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d10f      	bne.n	80031b4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e005      	b.n	80031b4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80031b4:	68fb      	ldr	r3, [r7, #12]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	; (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	; (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff3e 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff8e 	bl	80032b8 <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5d 	bl	8003264 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff31 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa2 	bl	8003320 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f6:	e148      	b.n	800368a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 813a 	beq.w	8003684 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d005      	beq.n	8003428 <HAL_GPIO_Init+0x40>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d130      	bne.n	800348a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800345e:	2201      	movs	r2, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0201 	and.w	r2, r3, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d017      	beq.n	80034c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d123      	bne.n	800351a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	6939      	ldr	r1, [r7, #16]
 8003516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0203 	and.w	r2, r3, #3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8094 	beq.w	8003684 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355c:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <HAL_GPIO_Init+0x2c0>)
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <HAL_GPIO_Init+0x2c0>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6613      	str	r3, [r2, #96]	; 0x60
 8003568:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x2c0>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003574:	4a4d      	ldr	r2, [pc, #308]	; (80036ac <HAL_GPIO_Init+0x2c4>)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800359e:	d00d      	beq.n	80035bc <HAL_GPIO_Init+0x1d4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <HAL_GPIO_Init+0x2c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <HAL_GPIO_Init+0x1d0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_GPIO_Init+0x2cc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_GPIO_Init+0x1cc>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e004      	b.n	80035be <HAL_GPIO_Init+0x1d6>
 80035b4:	2307      	movs	r3, #7
 80035b6:	e002      	b.n	80035be <HAL_GPIO_Init+0x1d6>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_GPIO_Init+0x1d6>
 80035bc:	2300      	movs	r3, #0
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	f002 0203 	and.w	r2, r2, #3
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	4093      	lsls	r3, r2
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035ce:	4937      	ldr	r1, [pc, #220]	; (80036ac <HAL_GPIO_Init+0x2c4>)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003600:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800362a:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003654:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f aeaf 	bne.w	80033f8 <HAL_GPIO_Init+0x10>
  }
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40010000 	.word	0x40010000
 80036b0:	48000400 	.word	0x48000400
 80036b4:	48000800 	.word	0x48000800
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_PWREx_GetVoltageRange+0x18>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40007000 	.word	0x40007000

08003728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003736:	d130      	bne.n	800379a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d038      	beq.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2232      	movs	r2, #50	; 0x32
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	3301      	adds	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800376c:	e002      	b.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3b01      	subs	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003780:	d102      	bne.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f2      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003794:	d110      	bne.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e00f      	b.n	80037ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d007      	beq.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b0:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40007000 	.word	0x40007000
 80037cc:	20000004 	.word	0x20000004
 80037d0:	431bde83 	.word	0x431bde83

080037d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f000 bc02 	b.w	8003fec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e8:	4b96      	ldr	r3, [pc, #600]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f2:	4b94      	ldr	r3, [pc, #592]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80e4 	beq.w	80039d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_RCC_OscConfig+0x4c>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	f040 808b 	bne.w	800392e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b01      	cmp	r3, #1
 800381c:	f040 8087 	bne.w	800392e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003820:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x64>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e3d9      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	4b81      	ldr	r3, [pc, #516]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_RCC_OscConfig+0x7e>
 8003848:	4b7e      	ldr	r3, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003850:	e005      	b.n	800385e <HAL_RCC_OscConfig+0x8a>
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385e:	4293      	cmp	r3, r2
 8003860:	d223      	bcs.n	80038aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fd8c 	bl	8004384 <RCC_SetFlashLatencyFromMSIRange>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e3ba      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800387c:	f043 0308 	orr.w	r3, r3, #8
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b70      	ldr	r3, [pc, #448]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	496d      	ldr	r1, [pc, #436]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003894:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	4968      	ldr	r1, [pc, #416]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
 80038a8:	e025      	b.n	80038f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a65      	ldr	r2, [pc, #404]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b63      	ldr	r3, [pc, #396]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4960      	ldr	r1, [pc, #384]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c8:	4b5e      	ldr	r3, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	495b      	ldr	r1, [pc, #364]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd4c 	bl	8004384 <RCC_SetFlashLatencyFromMSIRange>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e37a      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f6:	f000 fc81 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	4950      	ldr	r1, [pc, #320]	; (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <HAL_RCC_OscConfig+0x278>)
 8003914:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe ffbe 	bl	800289c <HAL_InitTick>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d052      	beq.n	80039d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	e35e      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d032      	beq.n	800399c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003936:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a42      	ldr	r2, [pc, #264]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003942:	f7fe fffb 	bl	800293c <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800394a:	f7fe fff7 	bl	800293c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e347      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800396e:	f043 0308 	orr.w	r3, r3, #8
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4930      	ldr	r1, [pc, #192]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003986:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	492b      	ldr	r1, [pc, #172]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
 800399a:	e01a      	b.n	80039d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a8:	f7fe ffc8 	bl	800293c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b0:	f7fe ffc4 	bl	800293c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e314      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c2:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1dc>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d073      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_OscConfig+0x21c>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d10e      	bne.n	8003a08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d063      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x2f0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d15f      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e2f1      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x24c>
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e025      	b.n	8003a6c <HAL_RCC_OscConfig+0x298>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a28:	d114      	bne.n	8003a54 <HAL_RCC_OscConfig+0x280>
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a02      	ldr	r2, [pc, #8]	; (8003a44 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e013      	b.n	8003a6c <HAL_RCC_OscConfig+0x298>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	080062a4 	.word	0x080062a4
 8003a4c:	20000004 	.word	0x20000004
 8003a50:	20000008 	.word	0x20000008
 8003a54:	4ba0      	ldr	r3, [pc, #640]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a9f      	ldr	r2, [pc, #636]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b9d      	ldr	r3, [pc, #628]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a9c      	ldr	r2, [pc, #624]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe ff62 	bl	800293c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe ff5e 	bl	800293c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e2ae      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2a8>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe ff4e 	bl	800293c <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe ff4a 	bl	800293c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e29a      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab6:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2d0>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d060      	beq.n	8003b94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x310>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d119      	bne.n	8003b12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d116      	bne.n	8003b12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae4:	4b7c      	ldr	r3, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_OscConfig+0x328>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e277      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	4973      	ldr	r1, [pc, #460]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b10:	e040      	b.n	8003b94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d023      	beq.n	8003b62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6e      	ldr	r2, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fe ff09 	bl	800293c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe ff05 	bl	800293c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e255      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	495f      	ldr	r1, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
 8003b60:	e018      	b.n	8003b94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5c      	ldr	r2, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fee5 	bl	800293c <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fe fee1 	bl	800293c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e231      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03c      	beq.n	8003c1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bae:	4a4a      	ldr	r2, [pc, #296]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fec0 	bl	800293c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7fe febc 	bl	800293c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e20c      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ef      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x3ec>
 8003be0:	e01b      	b.n	8003c1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be8:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fea3 	bl	800293c <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fe9f 	bl	800293c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e1ef      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ef      	bne.n	8003bfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80a6 	beq.w	8003d74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10d      	bne.n	8003c54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c42:	6593      	str	r3, [r2, #88]	; 0x58
 8003c44:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c50:	2301      	movs	r3, #1
 8003c52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCC_OscConfig+0x508>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d118      	bne.n	8003c92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c60:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCC_OscConfig+0x508>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_RCC_OscConfig+0x508>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fe66 	bl	800293c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fe fe62 	bl	800293c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1b2      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <HAL_RCC_OscConfig+0x508>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x4d8>
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003caa:	e029      	b.n	8003d00 <HAL_RCC_OscConfig+0x52c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d115      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x50c>
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	4a03      	ldr	r2, [pc, #12]	; (8003cd8 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x52c>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	4b9a      	ldr	r3, [pc, #616]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a99      	ldr	r2, [pc, #612]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf0:	4b96      	ldr	r3, [pc, #600]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	4a95      	ldr	r2, [pc, #596]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003cf8:	f023 0304 	bic.w	r3, r3, #4
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d016      	beq.n	8003d36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe fe18 	bl	800293c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fe fe14 	bl	800293c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e162      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ed      	beq.n	8003d10 <HAL_RCC_OscConfig+0x53c>
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fe fe01 	bl	800293c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe fdfd 	bl	800293c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e14b      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d54:	4b7d      	ldr	r3, [pc, #500]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ed      	bne.n	8003d3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d62:	7ffb      	ldrb	r3, [r7, #31]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d68:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d03c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d88:	4b70      	ldr	r3, [pc, #448]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8e:	4a6f      	ldr	r2, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe fdd0 	bl	800293c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da0:	f7fe fdcc 	bl	800293c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e11c      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003db2:	4b66      	ldr	r3, [pc, #408]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ef      	beq.n	8003da0 <HAL_RCC_OscConfig+0x5cc>
 8003dc0:	e01b      	b.n	8003dfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc8:	4a60      	ldr	r2, [pc, #384]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fdb3 	bl	800293c <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dda:	f7fe fdaf 	bl	800293c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0ff      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dec:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ef      	bne.n	8003dda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80f3 	beq.w	8003fea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f040 80c9 	bne.w	8003fa0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e0e:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0203 	and.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d12c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d123      	bne.n	8003e7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d11b      	bne.n	8003e7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d113      	bne.n	8003e7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d109      	bne.n	8003e7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d06b      	beq.n	8003f54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d062      	beq.n	8003f48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e82:	4b32      	ldr	r3, [pc, #200]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0ac      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e9e:	f7fe fd4d 	bl	800293c <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fe fd49 	bl	800293c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e099      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCC_OscConfig+0x77c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ede:	0212      	lsls	r2, r2, #8
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ee6:	0852      	lsrs	r2, r2, #1
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0552      	lsls	r2, r2, #21
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ef2:	0852      	lsrs	r2, r2, #1
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0652      	lsls	r2, r2, #25
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003efe:	06d2      	lsls	r2, r2, #27
 8003f00:	430a      	orrs	r2, r1
 8003f02:	4912      	ldr	r1, [pc, #72]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f20:	f7fe fd0c 	bl	800293c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe fd08 	bl	800293c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e058      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_RCC_OscConfig+0x778>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f46:	e050      	b.n	8003fea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e04f      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d144      	bne.n	8003fea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f78:	f7fe fce0 	bl	800293c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe fcdc 	bl	800293c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e02c      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x7ac>
 8003f9e:	e024      	b.n	8003fea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fcc3 	bl	800293c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe fcbf 	bl	800293c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e00f      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4905      	ldr	r1, [pc, #20]	; (8003ff4 <HAL_RCC_OscConfig+0x820>)
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x824>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
 8003fe4:	e001      	b.n	8003fea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	feeefffc 	.word	0xfeeefffc

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0e7      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b75      	ldr	r3, [pc, #468]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0207 	bic.w	r2, r3, #7
 8004026:	4970      	ldr	r1, [pc, #448]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b6e      	ldr	r3, [pc, #440]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cf      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	429a      	cmp	r2, r3
 800405a:	d908      	bls.n	800406e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4960      	ldr	r1, [pc, #384]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d04c      	beq.n	8004114 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b5a      	ldr	r3, [pc, #360]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d121      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0a6      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409a:	4b54      	ldr	r3, [pc, #336]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d115      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e09a      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b2:	4b4e      	ldr	r3, [pc, #312]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e08e      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c2:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e086      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4943      	ldr	r1, [pc, #268]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e4:	f7fe fc2a 	bl	800293c <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fe fc26 	bl	800293c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e06e      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412c:	429a      	cmp	r2, r3
 800412e:	d208      	bcs.n	8004142 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	492b      	ldr	r1, [pc, #172]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d210      	bcs.n	8004172 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 0207 	bic.w	r2, r3, #7
 8004158:	4923      	ldr	r1, [pc, #140]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004160:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e036      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4918      	ldr	r1, [pc, #96]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4910      	ldr	r1, [pc, #64]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b0:	f000 f824 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <HAL_RCC_ClockConfig+0x1f4>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1fc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fb61 	bl	800289c <HAL_InitTick>
 80041da:	4603      	mov	r3, r0
 80041dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80041de:	7afb      	ldrb	r3, [r7, #11]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40021000 	.word	0x40021000
 80041f0:	080062a4 	.word	0x080062a4
 80041f4:	20000004 	.word	0x20000004
 80041f8:	20000008 	.word	0x20000008

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004214:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d121      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d11e      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800423c:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e005      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <HAL_RCC_GetSysClockFreq+0x10c>)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004260:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800426c:	e00a      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d102      	bne.n	800427a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_RCC_GetSysClockFreq+0x110>)
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e004      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d101      	bne.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCC_GetSysClockFreq+0x114>)
 8004282:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d134      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d003      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xac>
 80042a0:	e005      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_GetSysClockFreq+0x110>)
 80042a4:	617b      	str	r3, [r7, #20]
      break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCC_GetSysClockFreq+0x114>)
 80042aa:	617b      	str	r3, [r7, #20]
      break;
 80042ac:	e002      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	617b      	str	r3, [r7, #20]
      break;
 80042b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	3301      	adds	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	fb03 f202 	mul.w	r2, r3, r2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	0e5b      	lsrs	r3, r3, #25
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	3301      	adds	r3, #1
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042f4:	69bb      	ldr	r3, [r7, #24]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3724      	adds	r7, #36	; 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	080062bc 	.word	0x080062bc
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	080062b4 	.word	0x080062b4

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800435c:	f7ff ffda 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	080062b4 	.word	0x080062b4

08004384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800439c:	f7ff f9b6 	bl	800370c <HAL_PWREx_GetVoltageRange>
 80043a0:	6178      	str	r0, [r7, #20]
 80043a2:	e014      	b.n	80043ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	4a24      	ldr	r2, [pc, #144]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6593      	str	r3, [r2, #88]	; 0x58
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff f9a6 	bl	800370c <HAL_PWREx_GetVoltageRange>
 80043c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	4a1d      	ldr	r2, [pc, #116]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d4:	d10b      	bne.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d919      	bls.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2ba0      	cmp	r3, #160	; 0xa0
 80043e0:	d902      	bls.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043e2:	2302      	movs	r3, #2
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e013      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e8:	2301      	movs	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	e010      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d902      	bls.n	80043fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043f4:	2303      	movs	r3, #3
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e00a      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d102      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004400:	2302      	movs	r3, #2
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e004      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b70      	cmp	r3, #112	; 0x70
 800440a:	d101      	bne.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800440c:	2301      	movs	r3, #1
 800440e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 0207 	bic.w	r2, r3, #7
 8004418:	4909      	ldr	r1, [pc, #36]	; (8004440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	40022000 	.word	0x40022000

08004444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800444c:	2300      	movs	r3, #0
 800444e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004450:	2300      	movs	r3, #0
 8004452:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445c:	2b00      	cmp	r3, #0
 800445e:	d031      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004468:	d01a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800446a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800446e:	d814      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004478:	d10f      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800447a:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4a5c      	ldr	r2, [pc, #368]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004486:	e00c      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f9de 	bl	8004850 <RCCEx_PLLSAI1_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	74fb      	strb	r3, [r7, #19]
      break;
 800449e:	e000      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a8:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	494e      	ldr	r1, [pc, #312]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044be:	e001      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 809e 	beq.w	800460e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d2:	2300      	movs	r3, #0
 80044d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d6:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80044e6:	2300      	movs	r3, #0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	4a3f      	ldr	r2, [pc, #252]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6593      	str	r3, [r2, #88]	; 0x58
 80044f8:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004514:	f7fe fa12 	bl	800293c <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800451a:	e009      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451c:	f7fe fa0e 	bl	800293c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	74fb      	strb	r3, [r7, #19]
        break;
 800452e:	e005      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004530:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d15a      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01e      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	429a      	cmp	r2, r3
 800455c:	d019      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800456a:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d016      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe f9ce 	bl	800293c <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	e00b      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fe f9ca 	bl	800293c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d902      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	74fb      	strb	r3, [r7, #19]
            break;
 80045ba:	e006      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ec      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045e6:	e009      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	74bb      	strb	r3, [r7, #18]
 80045ec:	e006      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fc:	7c7b      	ldrb	r3, [r7, #17]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4b8a      	ldr	r3, [pc, #552]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	4a89      	ldr	r2, [pc, #548]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461a:	4b84      	ldr	r3, [pc, #528]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f023 0203 	bic.w	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4980      	ldr	r1, [pc, #512]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463c:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f023 020c 	bic.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	4978      	ldr	r1, [pc, #480]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800465e:	4b73      	ldr	r3, [pc, #460]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	496f      	ldr	r1, [pc, #444]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	4967      	ldr	r1, [pc, #412]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a2:	4b62      	ldr	r3, [pc, #392]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	495e      	ldr	r1, [pc, #376]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4956      	ldr	r1, [pc, #344]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e6:	4b51      	ldr	r3, [pc, #324]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	494d      	ldr	r1, [pc, #308]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d028      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4945      	ldr	r1, [pc, #276]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004726:	d106      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004728:	4b40      	ldr	r3, [pc, #256]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a3f      	ldr	r2, [pc, #252]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004732:	60d3      	str	r3, [r2, #12]
 8004734:	e011      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800473e:	d10c      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f882 	bl	8004850 <RCCEx_PLLSAI1_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d028      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004766:	4b31      	ldr	r3, [pc, #196]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	492d      	ldr	r1, [pc, #180]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004784:	d106      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004786:	4b29      	ldr	r3, [pc, #164]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a28      	ldr	r2, [pc, #160]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004790:	60d3      	str	r3, [r2, #12]
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2101      	movs	r1, #1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f853 	bl	8004850 <RCCEx_PLLSAI1_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d2:	4916      	ldr	r1, [pc, #88]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e2:	d10c      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	2102      	movs	r1, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f830 	bl	8004850 <RCCEx_PLLSAI1_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004820:	7cbb      	ldrb	r3, [r7, #18]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000

08004830 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800483a:	f043 0304 	orr.w	r3, r3, #4
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000

08004850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800485e:	4b74      	ldr	r3, [pc, #464]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800486a:	4b71      	ldr	r3, [pc, #452]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0203 	and.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d10d      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
       ||
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004882:	4b6b      	ldr	r3, [pc, #428]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
       ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d047      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
 800489a:	e044      	b.n	8004926 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d018      	beq.n	80048d6 <RCCEx_PLLSAI1_Config+0x86>
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d825      	bhi.n	80048f4 <RCCEx_PLLSAI1_Config+0xa4>
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d002      	beq.n	80048b2 <RCCEx_PLLSAI1_Config+0x62>
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d009      	beq.n	80048c4 <RCCEx_PLLSAI1_Config+0x74>
 80048b0:	e020      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11d      	bne.n	80048fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c2:	e01a      	b.n	80048fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048c4:	4b5a      	ldr	r3, [pc, #360]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d4:	e013      	b.n	80048fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048d6:	4b56      	ldr	r3, [pc, #344]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048e2:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048f2:	e006      	b.n	8004902 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e004      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048fa:	bf00      	nop
 80048fc:	e002      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004902:	bf00      	nop
    }

    if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10d      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800490a:	4b49      	ldr	r3, [pc, #292]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6819      	ldr	r1, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	430b      	orrs	r3, r1
 8004920:	4943      	ldr	r1, [pc, #268]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d17c      	bne.n	8004a26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800492c:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fe f800 	bl	800293c <HAL_GetTick>
 800493c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800493e:	e009      	b.n	8004954 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004940:	f7fd fffc 	bl	800293c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d902      	bls.n	8004954 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	73fb      	strb	r3, [r7, #15]
        break;
 8004952:	e005      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ef      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d15f      	bne.n	8004a26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d110      	bne.n	800498e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800496c:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004974:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6892      	ldr	r2, [r2, #8]
 800497c:	0211      	lsls	r1, r2, #8
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68d2      	ldr	r2, [r2, #12]
 8004982:	06d2      	lsls	r2, r2, #27
 8004984:	430a      	orrs	r2, r1
 8004986:	492a      	ldr	r1, [pc, #168]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
 800498c:	e027      	b.n	80049de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d112      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004994:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800499c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6892      	ldr	r2, [r2, #8]
 80049a4:	0211      	lsls	r1, r2, #8
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6912      	ldr	r2, [r2, #16]
 80049aa:	0852      	lsrs	r2, r2, #1
 80049ac:	3a01      	subs	r2, #1
 80049ae:	0552      	lsls	r2, r2, #21
 80049b0:	430a      	orrs	r2, r1
 80049b2:	491f      	ldr	r1, [pc, #124]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
 80049b8:	e011      	b.n	80049de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6892      	ldr	r2, [r2, #8]
 80049ca:	0211      	lsls	r1, r2, #8
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6952      	ldr	r2, [r2, #20]
 80049d0:	0852      	lsrs	r2, r2, #1
 80049d2:	3a01      	subs	r2, #1
 80049d4:	0652      	lsls	r2, r2, #25
 80049d6:	430a      	orrs	r2, r1
 80049d8:	4915      	ldr	r1, [pc, #84]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fd ffa7 	bl	800293c <HAL_GetTick>
 80049ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049f0:	e009      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f2:	f7fd ffa3 	bl	800293c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d902      	bls.n	8004a06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	73fb      	strb	r3, [r7, #15]
          break;
 8004a04:	e005      	b.n	8004a12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0ef      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	4903      	ldr	r1, [pc, #12]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000

08004a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e095      	b.n	8004b72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a56:	d009      	beq.n	8004a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61da      	str	r2, [r3, #28]
 8004a5e:	e005      	b.n	8004a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fd88 	bl	800259c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aac:	d902      	bls.n	8004ab4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e002      	b.n	8004aba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ac2:	d007      	beq.n	8004ad4 <HAL_SPI_Init+0xa0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	ea42 0103 	orr.w	r1, r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0204 	and.w	r2, r3, #4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b50:	ea42 0103 	orr.w	r1, r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b08a      	sub	sp, #40	; 0x28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x26>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e1fb      	b.n	8004f98 <HAL_SPI_TransmitReceive+0x41e>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba8:	f7fd fec8 	bl	800293c <HAL_GetTick>
 8004bac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc4:	7efb      	ldrb	r3, [r7, #27]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d00e      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x6e>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd0:	d106      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x66>
 8004bda:	7efb      	ldrb	r3, [r7, #27]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d003      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004be6:	e1cd      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_SPI_TransmitReceive+0x80>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_TransmitReceive+0x80>
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c00:	e1c0      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d003      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2205      	movs	r2, #5
 8004c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	887a      	ldrh	r2, [r7, #2]
 8004c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	887a      	ldrh	r2, [r7, #2]
 8004c42:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c58:	d802      	bhi.n	8004c60 <HAL_SPI_TransmitReceive+0xe6>
 8004c5a:	8a3b      	ldrh	r3, [r7, #16]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d908      	bls.n	8004c72 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	e007      	b.n	8004c82 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d007      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca8:	d97c      	bls.n	8004da4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x13e>
 8004cb2:	8a7b      	ldrh	r3, [r7, #18]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d169      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cdc:	e056      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d11b      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x1aa>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x1aa>
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d113      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d11c      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x1f2>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d016      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d6c:	f7fd fde6 	bl	800293c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d807      	bhi.n	8004d8c <HAL_SPI_TransmitReceive+0x212>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d003      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d8a:	e0fb      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1a3      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x164>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d19d      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x164>
 8004da2:	e0df      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x23a>
 8004dac:	8a7b      	ldrh	r3, [r7, #18]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	f040 80cb 	bne.w	8004f4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d912      	bls.n	8004de4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de2:	e0b2      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0a:	e09e      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d134      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x30a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02f      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x30a>
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d12c      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d912      	bls.n	8004e5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b02      	subs	r3, #2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e58:	e012      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d148      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x3aa>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d042      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d923      	bls.n	8004ef2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b02      	subs	r3, #2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d81f      	bhi.n	8004f20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	e016      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f103 020c 	add.w	r2, r3, #12
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f20:	2301      	movs	r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f24:	f7fd fd0a 	bl	800293c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d803      	bhi.n	8004f3c <HAL_SPI_TransmitReceive+0x3c2>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d102      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x3c8>
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f48:	e01c      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f af5b 	bne.w	8004e0c <HAL_SPI_TransmitReceive+0x292>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f47f af54 	bne.w	8004e0c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f937 	bl	80051dc <SPI_EndRxTxTransaction>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60
 8004f80:	e000      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	; 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fb0:	f7fd fcc4 	bl	800293c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fc0:	f7fd fcbc 	bl	800293c <HAL_GetTick>
 8004fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fc6:	4b39      	ldr	r3, [pc, #228]	; (80050ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	0d1b      	lsrs	r3, r3, #20
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd6:	e054      	b.n	8005082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d050      	beq.n	8005082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fe0:	f7fd fcac 	bl	800293c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d13d      	bne.n	8005072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500e:	d111      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005018:	d004      	beq.n	8005024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d107      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503c:	d10f      	bne.n	800505e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e017      	b.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3b01      	subs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	429a      	cmp	r2, r3
 800509e:	d19b      	bne.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000004 	.word	0x20000004

080050b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050c2:	f7fd fc3b 	bl	800293c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	4413      	add	r3, r2
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050d2:	f7fd fc33 	bl	800293c <HAL_GetTick>
 80050d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050e0:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00da      	lsls	r2, r3, #3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	0d1b      	lsrs	r3, r3, #20
 80050f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050f8:	e060      	b.n	80051bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005100:	d107      	bne.n	8005112 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d104      	bne.n	8005112 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005110:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d050      	beq.n	80051bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800511a:	f7fd fc0f 	bl	800293c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	429a      	cmp	r2, r3
 8005128:	d902      	bls.n	8005130 <SPI_WaitFifoStateUntilTimeout+0x80>
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13d      	bne.n	80051ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800513e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005148:	d111      	bne.n	800516e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005152:	d004      	beq.n	800515e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d107      	bne.n	800516e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	d10f      	bne.n	8005198 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005196:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e010      	b.n	80051ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d196      	bne.n	80050fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000004 	.word	0x20000004

080051dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff ff5b 	bl	80050b0 <SPI_WaitFifoStateUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005204:	f043 0220 	orr.w	r2, r3, #32
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e027      	b.n	8005260 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2200      	movs	r2, #0
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fec0 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e014      	b.n	8005260 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff ff34 	bl	80050b0 <SPI_WaitFifoStateUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e000      	b.n	8005260 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e049      	b.n	800530e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd f9d8 	bl	8002644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f000 f9ca 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d001      	beq.n	8005330 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e033      	b.n	8005398 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_TIM_Base_Start+0x8c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_TIM_Base_Start+0x3e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d004      	beq.n	8005356 <HAL_TIM_Base_Start+0x3e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <HAL_TIM_Base_Start+0x90>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d115      	bne.n	8005382 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	4b13      	ldr	r3, [pc, #76]	; (80053ac <HAL_TIM_Base_Start+0x94>)
 800535e:	4013      	ands	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b06      	cmp	r3, #6
 8005366:	d015      	beq.n	8005394 <HAL_TIM_Base_Start+0x7c>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d011      	beq.n	8005394 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005380:	e008      	b.n	8005394 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e000      	b.n	8005396 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005394:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40014000 	.word	0x40014000
 80053ac:	00010007 	.word	0x00010007

080053b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0202 	mvn.w	r2, #2
 80053dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f905 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f8f7 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f908 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b04      	cmp	r3, #4
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0204 	mvn.w	r2, #4
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8db 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8cd 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8de 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b08      	cmp	r3, #8
 800546c:	d122      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b08      	cmp	r3, #8
 800547a:	d11b      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0208 	mvn.w	r2, #8
 8005484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2204      	movs	r2, #4
 800548a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8b1 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f8a3 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8b4 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d122      	bne.n	8005508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d11b      	bne.n	8005508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0210 	mvn.w	r2, #16
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2208      	movs	r2, #8
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f887 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f879 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f88a 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10e      	bne.n	8005534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0201 	mvn.w	r2, #1
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc ff4e 	bl	80023d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d10e      	bne.n	8005560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554c:	2b80      	cmp	r3, #128	; 0x80
 800554e:	d107      	bne.n	8005560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f944 	bl	80057e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556e:	d10e      	bne.n	800558e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557a:	2b80      	cmp	r3, #128	; 0x80
 800557c:	d107      	bne.n	800558e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f937 	bl	80057fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d10e      	bne.n	80055ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d107      	bne.n	80055ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f838 	bl	800562a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d10e      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d107      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0220 	mvn.w	r2, #32
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f8f7 	bl	80057d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2a      	ldr	r2, [pc, #168]	; (80056fc <TIM_Base_SetConfig+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x20>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a21      	ldr	r2, [pc, #132]	; (80056fc <TIM_Base_SetConfig+0xbc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_Base_SetConfig+0x52>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d007      	beq.n	8005692 <TIM_Base_SetConfig+0x52>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_Base_SetConfig+0x52>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <TIM_Base_SetConfig+0xc4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <TIM_Base_SetConfig+0xbc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0xa0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a0b      	ldr	r2, [pc, #44]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0xa0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <TIM_Base_SetConfig+0xc4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400

08005708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e04f      	b.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a21      	ldr	r2, [pc, #132]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d108      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005750:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a14      	ldr	r2, [pc, #80]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005788:	d004      	beq.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d10c      	bne.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40014000 	.word	0x40014000

080057d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e040      	b.n	80058a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc ff40 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8c0 	bl	80059d4 <UART_SetConfig>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e022      	b.n	80058a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fae0 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800588a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb67 	bl	8005f70 <UART_CheckIdleState>
 80058a2:	4603      	mov	r3, r0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	f040 8082 	bne.w	80059ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_UART_Transmit+0x26>
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e07a      	b.n	80059cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Transmit+0x38>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e073      	b.n	80059cc <HAL_UART_Transmit+0x120>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2221      	movs	r2, #33	; 0x21
 80058f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fa:	f7fd f81f 	bl	800293c <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005918:	d108      	bne.n	800592c <HAL_UART_Transmit+0x80>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e003      	b.n	8005934 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800593c:	e02d      	b.n	800599a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fb5a 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e039      	b.n	80059cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800596a:	b292      	uxth	r2, r2
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	3302      	adds	r3, #2
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e008      	b.n	8005988 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	b292      	uxth	r2, r2
 8005980:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1cb      	bne.n	800593e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2140      	movs	r1, #64	; 0x40
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fb26 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e005      	b.n	80059cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d8:	b08a      	sub	sp, #40	; 0x28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4bb4      	ldr	r3, [pc, #720]	; (8005cd4 <UART_SetConfig+0x300>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4aa9      	ldr	r2, [pc, #676]	; (8005cd8 <UART_SetConfig+0x304>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4aa0      	ldr	r2, [pc, #640]	; (8005cdc <UART_SetConfig+0x308>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d126      	bne.n	8005aac <UART_SetConfig+0xd8>
 8005a5e:	4ba0      	ldr	r3, [pc, #640]	; (8005ce0 <UART_SetConfig+0x30c>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d81b      	bhi.n	8005aa4 <UART_SetConfig+0xd0>
 8005a6c:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <UART_SetConfig+0xa0>)
 8005a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005a85 	.word	0x08005a85
 8005a78:	08005a95 	.word	0x08005a95
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a9d 	.word	0x08005a9d
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e080      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e07c      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	e078      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa2:	e074      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aaa:	e070      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a8c      	ldr	r2, [pc, #560]	; (8005ce4 <UART_SetConfig+0x310>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d138      	bne.n	8005b28 <UART_SetConfig+0x154>
 8005ab6:	4b8a      	ldr	r3, [pc, #552]	; (8005ce0 <UART_SetConfig+0x30c>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f003 030c 	and.w	r3, r3, #12
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d82d      	bhi.n	8005b20 <UART_SetConfig+0x14c>
 8005ac4:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0xf8>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005b01 	.word	0x08005b01
 8005ad0:	08005b21 	.word	0x08005b21
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005b21 	.word	0x08005b21
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b21 	.word	0x08005b21
 8005ae4:	08005b21 	.word	0x08005b21
 8005ae8:	08005b21 	.word	0x08005b21
 8005aec:	08005b09 	.word	0x08005b09
 8005af0:	08005b21 	.word	0x08005b21
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b21 	.word	0x08005b21
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e042      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e03e      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b10:	2304      	movs	r3, #4
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	e03a      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	e036      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e032      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6a      	ldr	r2, [pc, #424]	; (8005cd8 <UART_SetConfig+0x304>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d12a      	bne.n	8005b88 <UART_SetConfig+0x1b4>
 8005b32:	4b6b      	ldr	r3, [pc, #428]	; (8005ce0 <UART_SetConfig+0x30c>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b40:	d01a      	beq.n	8005b78 <UART_SetConfig+0x1a4>
 8005b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b46:	d81b      	bhi.n	8005b80 <UART_SetConfig+0x1ac>
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d00c      	beq.n	8005b68 <UART_SetConfig+0x194>
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d815      	bhi.n	8005b80 <UART_SetConfig+0x1ac>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <UART_SetConfig+0x18c>
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5c:	d008      	beq.n	8005b70 <UART_SetConfig+0x19c>
 8005b5e:	e00f      	b.n	8005b80 <UART_SetConfig+0x1ac>
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b66:	e012      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6e:	e00e      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b70:	2304      	movs	r3, #4
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e00a      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e006      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b80:	2310      	movs	r3, #16
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e002      	b.n	8005b8e <UART_SetConfig+0x1ba>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a51      	ldr	r2, [pc, #324]	; (8005cd8 <UART_SetConfig+0x304>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d17a      	bne.n	8005c8e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d824      	bhi.n	8005bea <UART_SetConfig+0x216>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x1d4>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005beb 	.word	0x08005beb
 8005bb0:	08005bd5 	.word	0x08005bd5
 8005bb4:	08005beb 	.word	0x08005beb
 8005bb8:	08005bdb 	.word	0x08005bdb
 8005bbc:	08005beb 	.word	0x08005beb
 8005bc0:	08005beb 	.word	0x08005beb
 8005bc4:	08005beb 	.word	0x08005beb
 8005bc8:	08005be3 	.word	0x08005be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7fe fbae 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005bd0:	61f8      	str	r0, [r7, #28]
        break;
 8005bd2:	e010      	b.n	8005bf6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd4:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <UART_SetConfig+0x314>)
 8005bd6:	61fb      	str	r3, [r7, #28]
        break;
 8005bd8:	e00d      	b.n	8005bf6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bda:	f7fe fb0f 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8005bde:	61f8      	str	r0, [r7, #28]
        break;
 8005be0:	e009      	b.n	8005bf6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be6:	61fb      	str	r3, [r7, #28]
        break;
 8005be8:	e005      	b.n	8005bf6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8107 	beq.w	8005e0c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d305      	bcc.n	8005c1a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d903      	bls.n	8005c22 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c20:	e0f4      	b.n	8005e0c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2200      	movs	r2, #0
 8005c26:	461c      	mov	r4, r3
 8005c28:	4615      	mov	r5, r2
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	022b      	lsls	r3, r5, #8
 8005c34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c38:	0222      	lsls	r2, r4, #8
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	6849      	ldr	r1, [r1, #4]
 8005c3e:	0849      	lsrs	r1, r1, #1
 8005c40:	2000      	movs	r0, #0
 8005c42:	4688      	mov	r8, r1
 8005c44:	4681      	mov	r9, r0
 8005c46:	eb12 0a08 	adds.w	sl, r2, r8
 8005c4a:	eb43 0b09 	adc.w	fp, r3, r9
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	4659      	mov	r1, fp
 8005c60:	f7fa fdba 	bl	80007d8 <__aeabi_uldivmod>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4613      	mov	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c72:	d308      	bcc.n	8005c86 <UART_SetConfig+0x2b2>
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c7a:	d204      	bcs.n	8005c86 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	60da      	str	r2, [r3, #12]
 8005c84:	e0c2      	b.n	8005e0c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c8c:	e0be      	b.n	8005e0c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c96:	d16a      	bne.n	8005d6e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d834      	bhi.n	8005d0a <UART_SetConfig+0x336>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x2d4>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005ced 	.word	0x08005ced
 8005cb0:	08005cf5 	.word	0x08005cf5
 8005cb4:	08005d0b 	.word	0x08005d0b
 8005cb8:	08005cfb 	.word	0x08005cfb
 8005cbc:	08005d0b 	.word	0x08005d0b
 8005cc0:	08005d0b 	.word	0x08005d0b
 8005cc4:	08005d0b 	.word	0x08005d0b
 8005cc8:	08005d03 	.word	0x08005d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7fe fb2e 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005cd0:	61f8      	str	r0, [r7, #28]
        break;
 8005cd2:	e020      	b.n	8005d16 <UART_SetConfig+0x342>
 8005cd4:	efff69f3 	.word	0xefff69f3
 8005cd8:	40008000 	.word	0x40008000
 8005cdc:	40013800 	.word	0x40013800
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40004400 	.word	0x40004400
 8005ce8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7fe fb34 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8005cf0:	61f8      	str	r0, [r7, #28]
        break;
 8005cf2:	e010      	b.n	8005d16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf4:	4b4c      	ldr	r3, [pc, #304]	; (8005e28 <UART_SetConfig+0x454>)
 8005cf6:	61fb      	str	r3, [r7, #28]
        break;
 8005cf8:	e00d      	b.n	8005d16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfa:	f7fe fa7f 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8005cfe:	61f8      	str	r0, [r7, #28]
        break;
 8005d00:	e009      	b.n	8005d16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d06:	61fb      	str	r3, [r7, #28]
        break;
 8005d08:	e005      	b.n	8005d16 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d077      	beq.n	8005e0c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	005a      	lsls	r2, r3, #1
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d916      	bls.n	8005d66 <UART_SetConfig+0x392>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3e:	d212      	bcs.n	8005d66 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f023 030f 	bic.w	r3, r3, #15
 8005d48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	8afb      	ldrh	r3, [r7, #22]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	8afa      	ldrh	r2, [r7, #22]
 8005d62:	60da      	str	r2, [r3, #12]
 8005d64:	e052      	b.n	8005e0c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d6c:	e04e      	b.n	8005e0c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d827      	bhi.n	8005dc6 <UART_SetConfig+0x3f2>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <UART_SetConfig+0x3a8>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	08005dc7 	.word	0x08005dc7
 8005d8c:	08005db7 	.word	0x08005db7
 8005d90:	08005dc7 	.word	0x08005dc7
 8005d94:	08005dc7 	.word	0x08005dc7
 8005d98:	08005dc7 	.word	0x08005dc7
 8005d9c:	08005dbf 	.word	0x08005dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da0:	f7fe fac4 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005da4:	61f8      	str	r0, [r7, #28]
        break;
 8005da6:	e014      	b.n	8005dd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da8:	f7fe fad6 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8005dac:	61f8      	str	r0, [r7, #28]
        break;
 8005dae:	e010      	b.n	8005dd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <UART_SetConfig+0x454>)
 8005db2:	61fb      	str	r3, [r7, #28]
        break;
 8005db4:	e00d      	b.n	8005dd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db6:	f7fe fa21 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8005dba:	61f8      	str	r0, [r7, #28]
        break;
 8005dbc:	e009      	b.n	8005dd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc2:	61fb      	str	r3, [r7, #28]
        break;
 8005dc4:	e005      	b.n	8005dd2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dd0:	bf00      	nop
    }

    if (pclk != 0U)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d019      	beq.n	8005e0c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	085a      	lsrs	r2, r3, #1
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	441a      	add	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b0f      	cmp	r3, #15
 8005df0:	d909      	bls.n	8005e06 <UART_SetConfig+0x432>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d205      	bcs.n	8005e06 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
 8005e04:	e002      	b.n	8005e0c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3728      	adds	r7, #40	; 0x28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e26:	bf00      	nop
 8005e28:	00f42400 	.word	0x00f42400

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2a:	d10a      	bne.n	8005f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f80:	f7fc fcdc 	bl	800293c <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d10e      	bne.n	8005fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f82d 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e023      	b.n	8005ffa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d10e      	bne.n	8005fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f817 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e00d      	b.n	8005ffa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b09c      	sub	sp, #112	; 0x70
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006012:	e0a5      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	f000 80a1 	beq.w	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fc fc8d 	bl	800293c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x32>
 800602e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006030:	2b00      	cmp	r3, #0
 8006032:	d13e      	bne.n	80060b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006048:	667b      	str	r3, [r7, #100]	; 0x64
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006054:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e6      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	663b      	str	r3, [r7, #96]	; 0x60
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006086:	64ba      	str	r2, [r7, #72]	; 0x48
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800608c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e5      	bne.n	8006066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e067      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d04f      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ce:	d147      	bne.n	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
 80060fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	66bb      	str	r3, [r7, #104]	; 0x68
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800612c:	623a      	str	r2, [r7, #32]
 800612e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	69f9      	ldr	r1, [r7, #28]
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	61bb      	str	r3, [r7, #24]
   return(result);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e010      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	429a      	cmp	r2, r3
 800617c:	f43f af4a 	beq.w	8006014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3770      	adds	r7, #112	; 0x70
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <__libc_init_array>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4d0d      	ldr	r5, [pc, #52]	; (80061c4 <__libc_init_array+0x38>)
 8006190:	4c0d      	ldr	r4, [pc, #52]	; (80061c8 <__libc_init_array+0x3c>)
 8006192:	1b64      	subs	r4, r4, r5
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	2600      	movs	r6, #0
 8006198:	42a6      	cmp	r6, r4
 800619a:	d109      	bne.n	80061b0 <__libc_init_array+0x24>
 800619c:	4d0b      	ldr	r5, [pc, #44]	; (80061cc <__libc_init_array+0x40>)
 800619e:	4c0c      	ldr	r4, [pc, #48]	; (80061d0 <__libc_init_array+0x44>)
 80061a0:	f000 f82e 	bl	8006200 <_init>
 80061a4:	1b64      	subs	r4, r4, r5
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	2600      	movs	r6, #0
 80061aa:	42a6      	cmp	r6, r4
 80061ac:	d105      	bne.n	80061ba <__libc_init_array+0x2e>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b4:	4798      	blx	r3
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7ee      	b.n	8006198 <__libc_init_array+0xc>
 80061ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80061be:	4798      	blx	r3
 80061c0:	3601      	adds	r6, #1
 80061c2:	e7f2      	b.n	80061aa <__libc_init_array+0x1e>
 80061c4:	080062f4 	.word	0x080062f4
 80061c8:	080062f4 	.word	0x080062f4
 80061cc:	080062f4 	.word	0x080062f4
 80061d0:	080062f8 	.word	0x080062f8

080061d4 <memcpy>:
 80061d4:	440a      	add	r2, r1
 80061d6:	4291      	cmp	r1, r2
 80061d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061dc:	d100      	bne.n	80061e0 <memcpy+0xc>
 80061de:	4770      	bx	lr
 80061e0:	b510      	push	{r4, lr}
 80061e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ea:	4291      	cmp	r1, r2
 80061ec:	d1f9      	bne.n	80061e2 <memcpy+0xe>
 80061ee:	bd10      	pop	{r4, pc}

080061f0 <memset>:
 80061f0:	4402      	add	r2, r0
 80061f2:	4603      	mov	r3, r0
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d100      	bne.n	80061fa <memset+0xa>
 80061f8:	4770      	bx	lr
 80061fa:	f803 1b01 	strb.w	r1, [r3], #1
 80061fe:	e7f9      	b.n	80061f4 <memset+0x4>

08006200 <_init>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr

0800620c <_fini>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr
