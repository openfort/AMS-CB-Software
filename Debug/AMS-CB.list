
AMS-CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004124  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080042b8  080042b8  000142b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004394  08004394  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800439c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000010  080043ac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080043ac  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdb0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ac  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014e51  00000000  00000000  0003ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00053df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014a0  00000000  00000000  00055048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c0b  00000000  00000000  000564e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005ca1  00000000  00000000  0006e0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00073d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  00073de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800429c 	.word	0x0800429c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800429c 	.word	0x0800429c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2uiz>:
 800079c:	004a      	lsls	r2, r1, #1
 800079e:	d211      	bcs.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a4:	d211      	bcs.n	80007ca <__aeabi_d2uiz+0x2e>
 80007a6:	d50d      	bpl.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d40e      	bmi.n	80007d0 <__aeabi_d2uiz+0x34>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	fa23 f002 	lsr.w	r0, r3, r2
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d102      	bne.n	80007d6 <__aeabi_d2uiz+0x3a>
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	4770      	bx	lr
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	4770      	bx	lr

080007dc <__aeabi_uldivmod>:
 80007dc:	b953      	cbnz	r3, 80007f4 <__aeabi_uldivmod+0x18>
 80007de:	b94a      	cbnz	r2, 80007f4 <__aeabi_uldivmod+0x18>
 80007e0:	2900      	cmp	r1, #0
 80007e2:	bf08      	it	eq
 80007e4:	2800      	cmpeq	r0, #0
 80007e6:	bf1c      	itt	ne
 80007e8:	f04f 31ff 	movne.w	r1, #4294967295
 80007ec:	f04f 30ff 	movne.w	r0, #4294967295
 80007f0:	f000 b974 	b.w	8000adc <__aeabi_idiv0>
 80007f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007fc:	f000 f806 	bl	800080c <__udivmoddi4>
 8000800:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr

0800080c <__udivmoddi4>:
 800080c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000810:	9d08      	ldr	r5, [sp, #32]
 8000812:	4604      	mov	r4, r0
 8000814:	468e      	mov	lr, r1
 8000816:	2b00      	cmp	r3, #0
 8000818:	d14d      	bne.n	80008b6 <__udivmoddi4+0xaa>
 800081a:	428a      	cmp	r2, r1
 800081c:	4694      	mov	ip, r2
 800081e:	d969      	bls.n	80008f4 <__udivmoddi4+0xe8>
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	b152      	cbz	r2, 800083c <__udivmoddi4+0x30>
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	f1c2 0120 	rsb	r1, r2, #32
 800082e:	fa20 f101 	lsr.w	r1, r0, r1
 8000832:	fa0c fc02 	lsl.w	ip, ip, r2
 8000836:	ea41 0e03 	orr.w	lr, r1, r3
 800083a:	4094      	lsls	r4, r2
 800083c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000840:	0c21      	lsrs	r1, r4, #16
 8000842:	fbbe f6f8 	udiv	r6, lr, r8
 8000846:	fa1f f78c 	uxth.w	r7, ip
 800084a:	fb08 e316 	mls	r3, r8, r6, lr
 800084e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000852:	fb06 f107 	mul.w	r1, r6, r7
 8000856:	4299      	cmp	r1, r3
 8000858:	d90a      	bls.n	8000870 <__udivmoddi4+0x64>
 800085a:	eb1c 0303 	adds.w	r3, ip, r3
 800085e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000862:	f080 811f 	bcs.w	8000aa4 <__udivmoddi4+0x298>
 8000866:	4299      	cmp	r1, r3
 8000868:	f240 811c 	bls.w	8000aa4 <__udivmoddi4+0x298>
 800086c:	3e02      	subs	r6, #2
 800086e:	4463      	add	r3, ip
 8000870:	1a5b      	subs	r3, r3, r1
 8000872:	b2a4      	uxth	r4, r4
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3310 	mls	r3, r8, r0, r3
 800087c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000880:	fb00 f707 	mul.w	r7, r0, r7
 8000884:	42a7      	cmp	r7, r4
 8000886:	d90a      	bls.n	800089e <__udivmoddi4+0x92>
 8000888:	eb1c 0404 	adds.w	r4, ip, r4
 800088c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000890:	f080 810a 	bcs.w	8000aa8 <__udivmoddi4+0x29c>
 8000894:	42a7      	cmp	r7, r4
 8000896:	f240 8107 	bls.w	8000aa8 <__udivmoddi4+0x29c>
 800089a:	4464      	add	r4, ip
 800089c:	3802      	subs	r0, #2
 800089e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a2:	1be4      	subs	r4, r4, r7
 80008a4:	2600      	movs	r6, #0
 80008a6:	b11d      	cbz	r5, 80008b0 <__udivmoddi4+0xa4>
 80008a8:	40d4      	lsrs	r4, r2
 80008aa:	2300      	movs	r3, #0
 80008ac:	e9c5 4300 	strd	r4, r3, [r5]
 80008b0:	4631      	mov	r1, r6
 80008b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d909      	bls.n	80008ce <__udivmoddi4+0xc2>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	f000 80ef 	beq.w	8000a9e <__udivmoddi4+0x292>
 80008c0:	2600      	movs	r6, #0
 80008c2:	e9c5 0100 	strd	r0, r1, [r5]
 80008c6:	4630      	mov	r0, r6
 80008c8:	4631      	mov	r1, r6
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	fab3 f683 	clz	r6, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d14a      	bne.n	800096c <__udivmoddi4+0x160>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d302      	bcc.n	80008e0 <__udivmoddi4+0xd4>
 80008da:	4282      	cmp	r2, r0
 80008dc:	f200 80f9 	bhi.w	8000ad2 <__udivmoddi4+0x2c6>
 80008e0:	1a84      	subs	r4, r0, r2
 80008e2:	eb61 0303 	sbc.w	r3, r1, r3
 80008e6:	2001      	movs	r0, #1
 80008e8:	469e      	mov	lr, r3
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d0e0      	beq.n	80008b0 <__udivmoddi4+0xa4>
 80008ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80008f2:	e7dd      	b.n	80008b0 <__udivmoddi4+0xa4>
 80008f4:	b902      	cbnz	r2, 80008f8 <__udivmoddi4+0xec>
 80008f6:	deff      	udf	#255	; 0xff
 80008f8:	fab2 f282 	clz	r2, r2
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	f040 8092 	bne.w	8000a26 <__udivmoddi4+0x21a>
 8000902:	eba1 010c 	sub.w	r1, r1, ip
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2601      	movs	r6, #1
 8000910:	0c20      	lsrs	r0, r4, #16
 8000912:	fbb1 f3f7 	udiv	r3, r1, r7
 8000916:	fb07 1113 	mls	r1, r7, r3, r1
 800091a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091e:	fb0e f003 	mul.w	r0, lr, r3
 8000922:	4288      	cmp	r0, r1
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x12c>
 8000926:	eb1c 0101 	adds.w	r1, ip, r1
 800092a:	f103 38ff 	add.w	r8, r3, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x12a>
 8000930:	4288      	cmp	r0, r1
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2c0>
 8000936:	4643      	mov	r3, r8
 8000938:	1a09      	subs	r1, r1, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000940:	fb07 1110 	mls	r1, r7, r0, r1
 8000944:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x156>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 31ff 	add.w	r1, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x154>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2ca>
 8000960:	4608      	mov	r0, r1
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800096a:	e79c      	b.n	80008a6 <__udivmoddi4+0x9a>
 800096c:	f1c6 0720 	rsb	r7, r6, #32
 8000970:	40b3      	lsls	r3, r6
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa20 f407 	lsr.w	r4, r0, r7
 800097e:	fa01 f306 	lsl.w	r3, r1, r6
 8000982:	431c      	orrs	r4, r3
 8000984:	40f9      	lsrs	r1, r7
 8000986:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800098a:	fa00 f306 	lsl.w	r3, r0, r6
 800098e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000992:	0c20      	lsrs	r0, r4, #16
 8000994:	fa1f fe8c 	uxth.w	lr, ip
 8000998:	fb09 1118 	mls	r1, r9, r8, r1
 800099c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009a0:	fb08 f00e 	mul.w	r0, r8, lr
 80009a4:	4288      	cmp	r0, r1
 80009a6:	fa02 f206 	lsl.w	r2, r2, r6
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b8>
 80009ac:	eb1c 0101 	adds.w	r1, ip, r1
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2bc>
 80009b8:	4288      	cmp	r0, r1
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2bc>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4461      	add	r1, ip
 80009c4:	1a09      	subs	r1, r1, r0
 80009c6:	b2a4      	uxth	r4, r4
 80009c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009cc:	fb09 1110 	mls	r1, r9, r0, r1
 80009d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d8:	458e      	cmp	lr, r1
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1e2>
 80009dc:	eb1c 0101 	adds.w	r1, ip, r1
 80009e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2b4>
 80009e6:	458e      	cmp	lr, r1
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2b4>
 80009ea:	3802      	subs	r0, #2
 80009ec:	4461      	add	r1, ip
 80009ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009f2:	fba0 9402 	umull	r9, r4, r0, r2
 80009f6:	eba1 010e 	sub.w	r1, r1, lr
 80009fa:	42a1      	cmp	r1, r4
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46a6      	mov	lr, r4
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x2a4>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x2a0>
 8000a04:	b15d      	cbz	r5, 8000a1e <__udivmoddi4+0x212>
 8000a06:	ebb3 0208 	subs.w	r2, r3, r8
 8000a0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a12:	fa22 f306 	lsr.w	r3, r2, r6
 8000a16:	40f1      	lsrs	r1, r6
 8000a18:	431f      	orrs	r7, r3
 8000a1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a1e:	2600      	movs	r6, #0
 8000a20:	4631      	mov	r1, r6
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	40d8      	lsrs	r0, r3
 8000a2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a30:	fa21 f303 	lsr.w	r3, r1, r3
 8000a34:	4091      	lsls	r1, r2
 8000a36:	4301      	orrs	r1, r0
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a44:	fb07 3610 	mls	r6, r7, r0, r3
 8000a48:	0c0b      	lsrs	r3, r1, #16
 8000a4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a52:	429e      	cmp	r6, r3
 8000a54:	fa04 f402 	lsl.w	r4, r4, r2
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x260>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b8>
 8000a64:	429e      	cmp	r6, r3
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b8>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4463      	add	r3, ip
 8000a6c:	1b9b      	subs	r3, r3, r6
 8000a6e:	b289      	uxth	r1, r1
 8000a70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a74:	fb07 3316 	mls	r3, r7, r6, r3
 8000a78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x28a>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2b0>
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2b0>
 8000a92:	3e02      	subs	r6, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	1ac9      	subs	r1, r1, r3
 8000a98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0x104>
 8000a9e:	462e      	mov	r6, r5
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	e705      	b.n	80008b0 <__udivmoddi4+0xa4>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	e6e3      	b.n	8000870 <__udivmoddi4+0x64>
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	e6f8      	b.n	800089e <__udivmoddi4+0x92>
 8000aac:	454b      	cmp	r3, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f8>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab8:	3801      	subs	r0, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f8>
 8000abc:	4646      	mov	r6, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x28a>
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1e2>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x260>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b8>
 8000acc:	3b02      	subs	r3, #2
 8000ace:	4461      	add	r1, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x12c>
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	e709      	b.n	80008ea <__udivmoddi4+0xde>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x156>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <send_CAN>:
		data64 |= data[i]<<(i*8);
	}
	return data64;
}

HAL_StatusTypeDef send_CAN(uint32_t addres, uint8_t *TxBuffer){		// send 8 Bytes
 8000ae0:	b508      	push	{r3, lr}
 8000ae2:	460a      	mov	r2, r1
	static uint32_t TxMailbox[20];
	static CAN_TxHeaderTypeDef TxHeader;
	TxHeader.ExtId = addres;   			// ID of the message
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <send_CAN+0x20>)
 8000ae6:	6048      	str	r0, [r1, #4]
	TxHeader.DLC = 8;         			// Data Length Code (number of bytes in data field)
 8000ae8:	2308      	movs	r3, #8
 8000aea:	610b      	str	r3, [r1, #16]
	TxHeader.IDE = CAN_ID_EXT; 			// Extended ID type
 8000aec:	2304      	movs	r3, #4
 8000aee:	608b      	str	r3, [r1, #8]
	TxHeader.RTR = CAN_RTR_DATA; 		// Data frame, not remote frame
 8000af0:	2300      	movs	r3, #0
 8000af2:	60cb      	str	r3, [r1, #12]
	TxHeader.TransmitGlobalTime = DISABLE; // Disable time stamp
 8000af4:	750b      	strb	r3, [r1, #20]
    // Transmit CAN message
	//HAL_CAN_WakeUp(&hcan1);
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxBuffer, TxMailbox);
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <send_CAN+0x24>)
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <send_CAN+0x28>)
 8000afa:	f001 fa27 	bl	8001f4c <HAL_CAN_AddTxMessage>
    return status;
}
 8000afe:	bd08      	pop	{r3, pc}
 8000b00:	20000044 	.word	0x20000044
 8000b04:	200000ac 	.word	0x200000ac
 8000b08:	200002e0 	.word	0x200002e0

08000b0c <send_CAN_IVT_nbytes>:

HAL_StatusTypeDef send_CAN_IVT_nbytes(uint32_t addres, uint8_t *TxBuffer, uint8_t length){
 8000b0c:	b508      	push	{r3, lr}
 8000b0e:	468c      	mov	ip, r1
	static uint32_t TxMailbox[20];
	static CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = addres;   			// ID of the message
 8000b10:	4906      	ldr	r1, [pc, #24]	; (8000b2c <send_CAN_IVT_nbytes+0x20>)
 8000b12:	6008      	str	r0, [r1, #0]
	TxHeader.DLC = length;         		// Data Length Code (number of bytes in data field)
 8000b14:	610a      	str	r2, [r1, #16]
	TxHeader.IDE = CAN_ID_STD; 			// Extended ID type
 8000b16:	2300      	movs	r3, #0
 8000b18:	608b      	str	r3, [r1, #8]
	TxHeader.RTR = CAN_RTR_DATA; 		// Data frame, not remote frame
 8000b1a:	60cb      	str	r3, [r1, #12]
	TxHeader.TransmitGlobalTime = DISABLE; // Disable time stamp
 8000b1c:	750b      	strb	r3, [r1, #20]
    // Transmit CAN message
	//HAL_CAN_WakeUp(&hcan1);
	HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxBuffer, TxMailbox);
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <send_CAN_IVT_nbytes+0x24>)
 8000b20:	4662      	mov	r2, ip
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <send_CAN_IVT_nbytes+0x28>)
 8000b24:	f001 fa12 	bl	8001f4c <HAL_CAN_AddTxMessage>
    return status;
}
 8000b28:	bd08      	pop	{r3, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000002c 	.word	0x2000002c
 8000b30:	2000005c 	.word	0x2000005c
 8000b34:	200002e0 	.word	0x200002e0

08000b38 <read_CAN>:

uint32_t read_CAN(uint8_t *RxData){
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	4604      	mov	r4, r0
	CAN_RxHeaderTypeDef RxHeader;
	// Check if a message is received in CAN RX FIFO 0
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000b3e:	2100      	movs	r1, #0
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <read_CAN+0x48>)
 8000b42:	f001 fb1c 	bl	800217e <HAL_CAN_GetRxFifoFillLevel>
 8000b46:	b130      	cbz	r0, 8000b56 <read_CAN+0x1e>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000b48:	4623      	mov	r3, r4
 8000b4a:	aa01      	add	r2, sp, #4
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <read_CAN+0x48>)
 8000b50:	f001 fa73 	bl	800203a <HAL_CAN_GetRxMessage>
 8000b54:	b130      	cbz	r0, 8000b64 <read_CAN+0x2c>
		// Process the received message
	    return RxHeader.ExtId;
	  }
	}
	// Check if a message is received in CAN RX FIFO 1
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8000b56:	2101      	movs	r1, #1
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <read_CAN+0x48>)
 8000b5a:	f001 fb10 	bl	800217e <HAL_CAN_GetRxFifoFillLevel>
 8000b5e:	b918      	cbnz	r0, 8000b68 <read_CAN+0x30>
		// Process the received message
	    return RxHeader.StdId;
	  }
	}
	return 0;
}
 8000b60:	b008      	add	sp, #32
 8000b62:	bd10      	pop	{r4, pc}
	    return RxHeader.ExtId;
 8000b64:	9802      	ldr	r0, [sp, #8]
 8000b66:	e7fb      	b.n	8000b60 <read_CAN+0x28>
	  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8000b68:	4623      	mov	r3, r4
 8000b6a:	aa01      	add	r2, sp, #4
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <read_CAN+0x48>)
 8000b70:	f001 fa63 	bl	800203a <HAL_CAN_GetRxMessage>
 8000b74:	b108      	cbz	r0, 8000b7a <read_CAN+0x42>
	return 0;
 8000b76:	2000      	movs	r0, #0
 8000b78:	e7f2      	b.n	8000b60 <read_CAN+0x28>
	    return RxHeader.StdId;
 8000b7a:	9801      	ldr	r0, [sp, #4]
 8000b7c:	e7f0      	b.n	8000b60 <read_CAN+0x28>
 8000b7e:	bf00      	nop
 8000b80:	200002e0 	.word	0x200002e0

08000b84 <FIFO_ovf>:

uint8_t FIFO_ovf(){
 8000b84:	b508      	push	{r3, lr}
	// check if FIFO is full
	if ((HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 3) || (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) >= 3)) {
 8000b86:	2100      	movs	r1, #0
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <FIFO_ovf+0x24>)
 8000b8a:	f001 faf8 	bl	800217e <HAL_CAN_GetRxFifoFillLevel>
 8000b8e:	2802      	cmp	r0, #2
 8000b90:	d901      	bls.n	8000b96 <FIFO_ovf+0x12>
		return 1;
 8000b92:	2001      	movs	r0, #1
	}else{
		return 0;
	}
}
 8000b94:	bd08      	pop	{r3, pc}
	if ((HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 3) || (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) >= 3)) {
 8000b96:	2101      	movs	r1, #1
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <FIFO_ovf+0x24>)
 8000b9a:	f001 faf0 	bl	800217e <HAL_CAN_GetRxFifoFillLevel>
		return 1;
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	bf94      	ite	ls
 8000ba2:	2000      	movls	r0, #0
 8000ba4:	2001      	movhi	r0, #1
 8000ba6:	e7f5      	b.n	8000b94 <FIFO_ovf+0x10>
 8000ba8:	200002e0 	.word	0x200002e0

08000bac <send_data2ECU>:

HAL_StatusTypeDef send_data2ECU(uint16_t GPIO_Input){		// 8 Bytes for TxData, LSB first
 8000bac:	b510      	push	{r4, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	4602      	mov	r2, r0
	uint8_t can_data[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};		// LSB first
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <send_data2ECU+0x6c>)
 8000bb4:	466c      	mov	r4, sp
 8000bb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bba:	e884 0003 	stmia.w	r4, {r0, r1}
	can_data[0] |= get_battery_status_code(GPIO_Input);
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f000 fb50 	bl	8001264 <get_battery_status_code>
 8000bc4:	f89d 3000 	ldrb.w	r3, [sp]
 8000bc8:	4318      	orrs	r0, r3
 8000bca:	f88d 0000 	strb.w	r0, [sp]
	can_data[1] |= get_battery_error_code();
 8000bce:	f000 fb69 	bl	80012a4 <get_battery_error_code>
 8000bd2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000bd6:	4318      	orrs	r0, r3
 8000bd8:	f88d 0001 	strb.w	r0, [sp, #1]
	uint16_t total_volt = battery_values.totalVoltage;
 8000bdc:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <send_data2ECU+0x70>)
 8000bde:	8813      	ldrh	r3, [r2, #0]
	can_data[2] = total_volt&0xFF;
 8000be0:	f88d 3002 	strb.w	r3, [sp, #2]
	can_data[3] = total_volt>>8;
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f88d 3003 	strb.w	r3, [sp, #3]
	uint16_t actualCurrent = battery_values.actualCurrent;
	can_data[4] = (uint8_t)(actualCurrent/1000);
 8000bea:	8a13      	ldrh	r3, [r2, #16]
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <send_data2ECU+0x74>)
 8000bee:	fba1 1303 	umull	r1, r3, r1, r3
 8000bf2:	099b      	lsrs	r3, r3, #6
 8000bf4:	f88d 3004 	strb.w	r3, [sp, #4]
	can_data[5] = volt2celsius(battery_values.highestCellTemp);
 8000bf8:	8910      	ldrh	r0, [r2, #8]
 8000bfa:	f000 fbbd 	bl	8001378 <volt2celsius>
 8000bfe:	f88d 0005 	strb.w	r0, [sp, #5]
	can_data[6] = 100;		// SoC TBD
 8000c02:	2364      	movs	r3, #100	; 0x64
 8000c04:	f88d 3006 	strb.w	r3, [sp, #6]

	return send_CAN(ADDR_ECU_TX, can_data);
 8000c08:	4621      	mov	r1, r4
 8000c0a:	f44f 7044 	mov.w	r0, #784	; 0x310
 8000c0e:	f7ff ff67 	bl	8000ae0 <send_CAN>
}
 8000c12:	b002      	add	sp, #8
 8000c14:	bd10      	pop	{r4, pc}
 8000c16:	bf00      	nop
 8000c18:	080042b8 	.word	0x080042b8
 8000c1c:	200000fc 	.word	0x200000fc
 8000c20:	10624dd3 	.word	0x10624dd3

08000c24 <ISA_IVT_Init>:

HAL_StatusTypeDef ISA_IVT_Init(){
 8000c24:	b530      	push	{r4, r5, lr}
 8000c26:	b08b      	sub	sp, #44	; 0x2c
	HAL_StatusTypeDef status = HAL_OK;

	// set sensor mode to STOP
	uint8_t can_data0[] = {SET_MODE, 0x00, 0x01, 0x00, 0x00};
 8000c28:	4d32      	ldr	r5, [pc, #200]	; (8000cf4 <ISA_IVT_Init+0xd0>)
 8000c2a:	f105 0308 	add.w	r3, r5, #8
 8000c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c32:	9008      	str	r0, [sp, #32]
 8000c34:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data0, 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	a908      	add	r1, sp, #32
 8000c3c:	f240 4011 	movw	r0, #1041	; 0x411
 8000c40:	f7ff ff64 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000c44:	4604      	mov	r4, r0
	HAL_Delay(5);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f001 f82c 	bl	8001ca4 <HAL_Delay>

	// set current measurement to CYCLIC 100 Hz
	uint8_t can_data1[] = {(MUX_SETCONFIG|IVT_NCURRENT), CYCLIC, (CYCLETIME>>8)&0xFF, CYCLETIME&0xFF};
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <ISA_IVT_Init+0xd4>)
 8000c4e:	9307      	str	r3, [sp, #28]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data1, 4);
 8000c50:	2204      	movs	r2, #4
 8000c52:	a907      	add	r1, sp, #28
 8000c54:	f240 4011 	movw	r0, #1041	; 0x411
 8000c58:	f7ff ff58 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000c5c:	4304      	orrs	r4, r0
 8000c5e:	b2e4      	uxtb	r4, r4
	HAL_Delay(5);
 8000c60:	2005      	movs	r0, #5
 8000c62:	f001 f81f 	bl	8001ca4 <HAL_Delay>

	// disable Voltage Measurement
	uint8_t can_data2[] = {(MUX_SETCONFIG|IVT_NU1), DISABLED, 0x00, 0x00};
 8000c66:	2321      	movs	r3, #33	; 0x21
 8000c68:	9306      	str	r3, [sp, #24]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data2, 4);
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	a906      	add	r1, sp, #24
 8000c6e:	f240 4011 	movw	r0, #1041	; 0x411
 8000c72:	f7ff ff4b 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000c76:	4304      	orrs	r4, r0
 8000c78:	b2e4      	uxtb	r4, r4
	HAL_Delay(5);
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	f001 f812 	bl	8001ca4 <HAL_Delay>
	uint8_t can_data3[] = {(MUX_SETCONFIG|IVT_NU2), DISABLED, 0x00, 0x00};
 8000c80:	2322      	movs	r3, #34	; 0x22
 8000c82:	9305      	str	r3, [sp, #20]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data3, 4);
 8000c84:	2204      	movs	r2, #4
 8000c86:	a905      	add	r1, sp, #20
 8000c88:	f240 4011 	movw	r0, #1041	; 0x411
 8000c8c:	f7ff ff3e 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000c90:	4304      	orrs	r4, r0
 8000c92:	b2e4      	uxtb	r4, r4
	HAL_Delay(5);
 8000c94:	2005      	movs	r0, #5
 8000c96:	f001 f805 	bl	8001ca4 <HAL_Delay>
	uint8_t can_data4[] = {(MUX_SETCONFIG|IVT_NU3), DISABLED, 0x00, 0x00};
 8000c9a:	2323      	movs	r3, #35	; 0x23
 8000c9c:	9304      	str	r3, [sp, #16]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data4, 4);
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	a904      	add	r1, sp, #16
 8000ca2:	f240 4011 	movw	r0, #1041	; 0x411
 8000ca6:	f7ff ff31 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000caa:	4304      	orrs	r4, r0
 8000cac:	b2e4      	uxtb	r4, r4
	HAL_Delay(5);
 8000cae:	2005      	movs	r0, #5
 8000cb0:	f000 fff8 	bl	8001ca4 <HAL_Delay>

	// set current counter
	uint8_t can_data5[] = {(MUX_SETCONFIG|IVT_NQ), CYCLIC, (CYCLETIME>>8)&0xFF, CYCLETIME&0xFF};
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <ISA_IVT_Init+0xd8>)
 8000cb6:	9303      	str	r3, [sp, #12]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data5, 4);
 8000cb8:	2204      	movs	r2, #4
 8000cba:	a903      	add	r1, sp, #12
 8000cbc:	f240 4011 	movw	r0, #1041	; 0x411
 8000cc0:	f7ff ff24 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000cc4:	4304      	orrs	r4, r0
 8000cc6:	b2e4      	uxtb	r4, r4
	HAL_Delay(5);
 8000cc8:	2005      	movs	r0, #5
 8000cca:	f000 ffeb 	bl	8001ca4 <HAL_Delay>
	//uint8_t can_data6[] = {0x32};
	//status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_data6, 1);
	//HAL_Delay(1000);

	// set sensor mode to RUN
	HAL_Delay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f000 ffe8 	bl	8001ca4 <HAL_Delay>
	uint8_t can_datan[] = {SET_MODE, 0x01, 0x01, 0x00, 0x00};
 8000cd4:	3510      	adds	r5, #16
 8000cd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cda:	9001      	str	r0, [sp, #4]
 8000cdc:	f88d 1008 	strb.w	r1, [sp, #8]
	status |= send_CAN_IVT_nbytes(IVT_MSG_COMMAND, can_datan, 5);
 8000ce0:	2205      	movs	r2, #5
 8000ce2:	a901      	add	r1, sp, #4
 8000ce4:	f240 4011 	movw	r0, #1041	; 0x411
 8000ce8:	f7ff ff10 	bl	8000b0c <send_CAN_IVT_nbytes>
 8000cec:	4320      	orrs	r0, r4

	return status;
}
 8000cee:	b2c0      	uxtb	r0, r0
 8000cf0:	b00b      	add	sp, #44	; 0x2c
 8000cf2:	bd30      	pop	{r4, r5, pc}
 8000cf4:	080042b8 	.word	0x080042b8
 8000cf8:	e8030220 	.word	0xe8030220
 8000cfc:	e8030226 	.word	0xe8030226

08000d00 <CAN_receive_packet>:

void CAN_receive_packet(){
 8000d00:	b500      	push	{lr}
 8000d02:	b083      	sub	sp, #12
	uint8_t RxData[8];
	uint32_t addres = 0;
	addres = read_CAN(RxData);
 8000d04:	4668      	mov	r0, sp
 8000d06:	f7ff ff17 	bl	8000b38 <read_CAN>
	if(addres == ADDR_ECU_TX){
 8000d0a:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 8000d0e:	d012      	beq.n	8000d36 <CAN_receive_packet+0x36>
		set_relays(RxData[0]);
		if(RxData[0] & BATTERY_SW_RESET){
			SDC_reset();
		}
	}else if(addres == IVT_MSG_RESPONSE){
 8000d10:	f240 5311 	movw	r3, #1297	; 0x511
 8000d14:	4298      	cmp	r0, r3
 8000d16:	d00b      	beq.n	8000d30 <CAN_receive_packet+0x30>
		return;
	}else if(addres == IVT_MSG_RESULT_I){
 8000d18:	f240 5321 	movw	r3, #1313	; 0x521
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	d016      	beq.n	8000d4e <CAN_receive_packet+0x4e>
		if(RxData[0] == IVT_NCURRENT){
			battery_values.actualCurrent = RxData[5] | RxData[4]<<8 | RxData[3]<<16 | RxData[2]<<24;
		}
	}else if(addres == IVT_MSG_RESULT_T){
 8000d20:	f240 5325 	movw	r3, #1317	; 0x525
 8000d24:	4298      	cmp	r0, r3
 8000d26:	d003      	beq.n	8000d30 <CAN_receive_packet+0x30>
		return;
	}else if(addres == IVT_MSG_RESULT_AS){
 8000d28:	f240 5327 	movw	r3, #1319	; 0x527
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	d023      	beq.n	8000d78 <CAN_receive_packet+0x78>
		if(RxData[0] == IVT_NQ){
			battery_values.CurrentCounter = RxData[5] | RxData[4]<<8 | RxData[3]<<16 | RxData[2]<<24;
		}
	}
}
 8000d30:	b003      	add	sp, #12
 8000d32:	f85d fb04 	ldr.w	pc, [sp], #4
		set_relays(RxData[0]);
 8000d36:	f89d 0000 	ldrb.w	r0, [sp]
 8000d3a:	f000 fb53 	bl	80013e4 <set_relays>
		if(RxData[0] & BATTERY_SW_RESET){
 8000d3e:	f89d 3000 	ldrb.w	r3, [sp]
 8000d42:	f013 0f08 	tst.w	r3, #8
 8000d46:	d0f3      	beq.n	8000d30 <CAN_receive_packet+0x30>
			SDC_reset();
 8000d48:	f000 fbd8 	bl	80014fc <SDC_reset>
 8000d4c:	e7f0      	b.n	8000d30 <CAN_receive_packet+0x30>
		if(RxData[0] == IVT_NCURRENT){
 8000d4e:	f89d 3000 	ldrb.w	r3, [sp]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1ec      	bne.n	8000d30 <CAN_receive_packet+0x30>
			battery_values.actualCurrent = RxData[5] | RxData[4]<<8 | RxData[3]<<16 | RxData[2]<<24;
 8000d56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000d5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8000d6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <CAN_receive_packet+0xa4>)
 8000d74:	6113      	str	r3, [r2, #16]
 8000d76:	e7db      	b.n	8000d30 <CAN_receive_packet+0x30>
		if(RxData[0] == IVT_NQ){
 8000d78:	f89d 3000 	ldrb.w	r3, [sp]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d1d7      	bne.n	8000d30 <CAN_receive_packet+0x30>
			battery_values.CurrentCounter = RxData[5] | RxData[4]<<8 | RxData[3]<<16 | RxData[2]<<24;
 8000d80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000d84:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8000d98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d9c:	4a01      	ldr	r2, [pc, #4]	; (8000da4 <CAN_receive_packet+0xa4>)
 8000d9e:	6153      	str	r3, [r2, #20]
 8000da0:	e7c6      	b.n	8000d30 <CAN_receive_packet+0x30>
 8000da2:	bf00      	nop
 8000da4:	200000fc 	.word	0x200000fc

08000da8 <delay_1us>:
static const uint8_t CFGAR[] = {0xF9, 0x00, 0xF0, 0xFF, 0x00, 0x00};		// data for CRFA, ADCOPT = 1, REFON = 1, GPIOx = 1
static const uint8_t CFGBR[] = {0x0F, 0x80, 0x00, 0x00, 0x00, 0x00};		// data for CRFB, MUTE = 1, GPIOx = 1
static const uint8_t RDCV[] = {RDCVA, RDCVB, RDCVC, RDCVD, RDCVE, RDCVF};	// Read Voltages Register
static const uint8_t RDAUX[] = {RDAUXA, RDAUXB, RDAUXC, RDAUXD};			// Read Temp Register

void delay_1us(){	// delay 960ns + pin delay 45ns = 1050ns
 8000da8:	b082      	sub	sp, #8
	for(volatile uint32_t i=0; i<5; i++);	// 100ns per cycle
 8000daa:	2300      	movs	r3, #0
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d805      	bhi.n	8000dc0 <delay_1us+0x18>
 8000db4:	9b01      	ldr	r3, [sp, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b01      	ldr	r3, [sp, #4]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d9f9      	bls.n	8000db4 <delay_1us+0xc>
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	4770      	bx	lr

08000dc4 <wake_up>:

void wake_up(){
 8000dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	250a      	movs	r5, #10
	for(uint8_t i=0; i<NUM_OF_CLIENTS+2; i++){
		GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 8000dcc:	4e11      	ldr	r6, [pc, #68]	; (8000e14 <wake_up+0x50>)
 8000dce:	f44f 3800 	mov.w	r8, #131072	; 0x20000
		delay_1us();
		GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 8000dd2:	2702      	movs	r7, #2
		GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 8000dd4:	f8c6 8018 	str.w	r8, [r6, #24]
		delay_1us();
 8000dd8:	f7ff ffe6 	bl	8000da8 <delay_1us>
		GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 8000ddc:	61b7      	str	r7, [r6, #24]
 8000dde:	f44f 74c8 	mov.w	r4, #400	; 0x190
		for(uint16_t i=0; i<400;i++){
			delay_1us();
 8000de2:	f7ff ffe1 	bl	8000da8 <delay_1us>
		for(uint16_t i=0; i<400;i++){
 8000de6:	3c01      	subs	r4, #1
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	2c00      	cmp	r4, #0
 8000dec:	d1f9      	bne.n	8000de2 <wake_up+0x1e>
	for(uint8_t i=0; i<NUM_OF_CLIENTS+2; i++){
 8000dee:	1e6b      	subs	r3, r5, #1
 8000df0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8000df4:	d1ee      	bne.n	8000dd4 <wake_up+0x10>
		}
	}
	for(volatile uint32_t i=0; i<100; i++);	// 100ns per cycle, 10us, communication ready time
 8000df6:	2300      	movs	r3, #0
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	2b63      	cmp	r3, #99	; 0x63
 8000dfe:	d805      	bhi.n	8000e0c <wake_up+0x48>
 8000e00:	9b01      	ldr	r3, [sp, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	9b01      	ldr	r3, [sp, #4]
 8000e08:	2b63      	cmp	r3, #99	; 0x63
 8000e0a:	d9f9      	bls.n	8000e00 <wake_up+0x3c>
}
 8000e0c:	b002      	add	sp, #8
 8000e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e12:	bf00      	nop
 8000e14:	48000400 	.word	0x48000400

08000e18 <SPI_Transceive>:

HAL_StatusTypeDef SPI_Transceive(uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
 8000e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460d      	mov	r5, r1
 8000e20:	4616      	mov	r6, r2
	GPIOB->BSRR = ISO_SPI_CS1_Pin<<16;	// CS low
 8000e22:	4f09      	ldr	r7, [pc, #36]	; (8000e48 <SPI_Transceive+0x30>)
 8000e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e28:	61bb      	str	r3, [r7, #24]
	delay_1us();
 8000e2a:	f7ff ffbd 	bl	8000da8 <delay_1us>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, 200);
 8000e2e:	23c8      	movs	r3, #200	; 0xc8
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4633      	mov	r3, r6
 8000e34:	462a      	mov	r2, r5
 8000e36:	4621      	mov	r1, r4
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <SPI_Transceive+0x34>)
 8000e3a:	f002 fbc6 	bl	80035ca <HAL_SPI_TransmitReceive>
	GPIOB->BSRR = ISO_SPI_CS1_Pin;	// CS high
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
	return status;
}
 8000e42:	b003      	add	sp, #12
 8000e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	48000400 	.word	0x48000400
 8000e4c:	20000308 	.word	0x20000308

08000e50 <generatePEC>:
// Function to generate 15-bit packet error code
uint16_t generatePEC(uint8_t data[], size_t length) {
    // Initial value of PEC
    uint16_t pec = 0x0010;
    // Characteristic polynomial: x^15 + x^14 + x^10 + x^8 + x^7 + x^4 + x^3 + 1
    for (size_t i = 0; i < length; ++i) {
 8000e50:	2900      	cmp	r1, #0
 8000e52:	d043      	beq.n	8000edc <generatePEC+0x8c>
uint16_t generatePEC(uint8_t data[], size_t length) {
 8000e54:	b530      	push	{r4, r5, lr}
 8000e56:	460c      	mov	r4, r1
 8000e58:	f100 3eff 	add.w	lr, r0, #4294967295
 8000e5c:	4474      	add	r4, lr
    uint16_t pec = 0x0010;
 8000e5e:	2010      	movs	r0, #16
 8000e60:	e001      	b.n	8000e66 <generatePEC+0x16>
    for (size_t i = 0; i < length; ++i) {
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	d03d      	beq.n	8000ee2 <generatePEC+0x92>
            for (int bit = 7; bit >= 0; --bit) {
                uint16_t in0 = ((data[i] >> bit) & 0x01) ^ ((pec >> 14) & 0x01);
 8000e66:	f81e cf01 	ldrb.w	ip, [lr, #1]!
            for (int bit = 7; bit >= 0; --bit) {
 8000e6a:	2107      	movs	r1, #7
                uint16_t in0 = ((data[i] >> bit) & 0x01) ^ ((pec >> 14) & 0x01);
 8000e6c:	fa4c f201 	asr.w	r2, ip, r1
 8000e70:	ea82 3290 	eor.w	r2, r2, r0, lsr #14
                uint16_t in3 = in0 ^ ((pec >> 2) & 0x01);
 8000e74:	f002 0201 	and.w	r2, r2, #1
                uint16_t in4 = in0 ^ ((pec >> 3) & 0x01);
                uint16_t in7 = in0 ^ ((pec >> 6) & 0x01);
                uint16_t in8 = in0 ^ ((pec >> 7) & 0x01);
                uint16_t in10 = in0 ^ ((pec >> 9) & 0x01);
                uint16_t in14 = in0 ^ ((pec >> 13) & 0x01);
 8000e78:	f3c0 3340 	ubfx	r3, r0, #13, #1
                pec <<= 1;
                pec = (pec & 0x3FFF) | (in14 << 14);
 8000e7c:	ea82 0503 	eor.w	r5, r2, r3
                pec <<= 1;
 8000e80:	0043      	lsls	r3, r0, #1
                pec = (pec & 0x3FFF) | (in14 << 14);
 8000e82:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e86:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
                pec = (pec & 0xFBFF) | (in10 << 10);
 8000e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
                uint16_t in10 = in0 ^ ((pec >> 9) & 0x01);
 8000e8e:	f3c0 2540 	ubfx	r5, r0, #9, #1
                pec = (pec & 0xFBFF) | (in10 << 10);
 8000e92:	4055      	eors	r5, r2
 8000e94:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
                pec = (pec & 0xFEFF) | (in8 << 8);
 8000e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
                uint16_t in8 = in0 ^ ((pec >> 7) & 0x01);
 8000e9c:	f3c0 15c0 	ubfx	r5, r0, #7, #1
                pec = (pec & 0xFEFF) | (in8 << 8);
 8000ea0:	4055      	eors	r5, r2
 8000ea2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                pec = (pec & 0xFF7F) | (in7 << 7);
 8000ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
                uint16_t in7 = in0 ^ ((pec >> 6) & 0x01);
 8000eaa:	f3c0 1580 	ubfx	r5, r0, #6, #1
                pec = (pec & 0xFF7F) | (in7 << 7);
 8000eae:	4055      	eors	r5, r2
 8000eb0:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7
                pec = (pec & 0xFFEF) | (in4 << 4);
 8000eb4:	f023 0310 	bic.w	r3, r3, #16
                uint16_t in4 = in0 ^ ((pec >> 3) & 0x01);
 8000eb8:	f3c0 05c0 	ubfx	r5, r0, #3, #1
                pec = (pec & 0xFFEF) | (in4 << 4);
 8000ebc:	4055      	eors	r5, r2
 8000ebe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                pec = (pec & 0xFFF7) | (in3 << 3);
 8000ec2:	f023 0308 	bic.w	r3, r3, #8
                uint16_t in3 = in0 ^ ((pec >> 2) & 0x01);
 8000ec6:	f3c0 0080 	ubfx	r0, r0, #2, #1
                pec = (pec & 0xFFF7) | (in3 << 3);
 8000eca:	4050      	eors	r0, r2
                pec = (pec & 0xFFFE) | (in0 << 0);
 8000ecc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000ed0:	4318      	orrs	r0, r3
            for (int bit = 7; bit >= 0; --bit) {
 8000ed2:	3901      	subs	r1, #1
 8000ed4:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000ed8:	d1c8      	bne.n	8000e6c <generatePEC+0x1c>
 8000eda:	e7c2      	b.n	8000e62 <generatePEC+0x12>
    uint16_t pec = 0x0010;
 8000edc:	2010      	movs	r0, #16
            }
        }
    pec <<=1;
    return pec;
}
 8000ede:	0040      	lsls	r0, r0, #1
 8000ee0:	4770      	bx	lr
 8000ee2:	0040      	lsls	r0, r0, #1
 8000ee4:	bd30      	pop	{r4, r5, pc}

08000ee6 <Command>:


HAL_StatusTypeDef Command(uint16_t command){	// checked
 8000ee6:	b530      	push	{r4, r5, lr}
 8000ee8:	b085      	sub	sp, #20
	uint8_t tx_data[4];
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 8000eea:	0a05      	lsrs	r5, r0, #8
 8000eec:	f88d 5008 	strb.w	r5, [sp, #8]
	crc_data[1] = command&0xFF;
 8000ef0:	b2c4      	uxtb	r4, r0
 8000ef2:	f88d 4009 	strb.w	r4, [sp, #9]
	uint16_t crc = generatePEC(crc_data, 2);
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	a802      	add	r0, sp, #8
 8000efa:	f7ff ffa9 	bl	8000e50 <generatePEC>
	tx_data[0] = command>>8;
 8000efe:	f88d 500c 	strb.w	r5, [sp, #12]
	tx_data[1] = command&0xFF;
 8000f02:	f88d 400d 	strb.w	r4, [sp, #13]
	tx_data[2] = crc>>8;
 8000f06:	0a03      	lsrs	r3, r0, #8
 8000f08:	f88d 300e 	strb.w	r3, [sp, #14]
	tx_data[3] = crc&0xFF;
 8000f0c:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t rx_data[4];
	return SPI_Transceive(tx_data, rx_data, 4);
 8000f10:	2204      	movs	r2, #4
 8000f12:	eb0d 0102 	add.w	r1, sp, r2
 8000f16:	a803      	add	r0, sp, #12
 8000f18:	f7ff ff7e 	bl	8000e18 <SPI_Transceive>
}
 8000f1c:	b005      	add	sp, #20
 8000f1e:	bd30      	pop	{r4, r5, pc}

08000f20 <Write_Registergroup>:

HAL_StatusTypeDef Write_Registergroup(uint16_t command, uint8_t *data){		// write data to every single client, data length: 6*NUM_OF_CLIENTS
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	b0a5      	sub	sp, #148	; 0x94
 8000f24:	460e      	mov	r6, r1
	uint8_t tx_data[4+NUM_OF_CLIENTS*8];
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 8000f26:	0a05      	lsrs	r5, r0, #8
 8000f28:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
	crc_data[1] = command&0xFF;
 8000f2c:	b2c4      	uxtb	r4, r0
 8000f2e:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
	uint16_t crc = generatePEC(crc_data, 2);
 8000f32:	2102      	movs	r1, #2
 8000f34:	a812      	add	r0, sp, #72	; 0x48
 8000f36:	f7ff ff8b 	bl	8000e50 <generatePEC>
	tx_data[0] = command>>8;
 8000f3a:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
	tx_data[1] = command&0xFF;
 8000f3e:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
	tx_data[2] = crc>>8;
 8000f42:	0a03      	lsrs	r3, r0, #8
 8000f44:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	tx_data[3] = crc&0xFF;
 8000f48:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8000f4c:	ad14      	add	r5, sp, #80	; 0x50
 8000f4e:	1db4      	adds	r4, r6, #6
 8000f50:	3636      	adds	r6, #54	; 0x36
		for(uint16_t j=0; j<6; j++){
			tx_data[4+i*8+j] = data[i*6+j];
		}
		uint16_t crc = generatePEC(&data[i*6], 6);
 8000f52:	2706      	movs	r7, #6
 8000f54:	e009      	b.n	8000f6a <Write_Registergroup+0x4a>
 8000f56:	4639      	mov	r1, r7
 8000f58:	f7ff ff7a 	bl	8000e50 <generatePEC>
		tx_data[4+i*8+6] = crc>>8;
 8000f5c:	0a03      	lsrs	r3, r0, #8
 8000f5e:	71ab      	strb	r3, [r5, #6]
		tx_data[4+i*8+7] = crc&0xFF;
 8000f60:	71e8      	strb	r0, [r5, #7]
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8000f62:	3508      	adds	r5, #8
 8000f64:	3406      	adds	r4, #6
 8000f66:	42b4      	cmp	r4, r6
 8000f68:	d009      	beq.n	8000f7e <Write_Registergroup+0x5e>
		for(uint16_t j=0; j<6; j++){
 8000f6a:	1fa0      	subs	r0, r4, #6
HAL_StatusTypeDef Write_Registergroup(uint16_t command, uint8_t *data){		// write data to every single client, data length: 6*NUM_OF_CLIENTS
 8000f6c:	462a      	mov	r2, r5
 8000f6e:	4603      	mov	r3, r0
			tx_data[4+i*8+j] = data[i*6+j];
 8000f70:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000f74:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint16_t j=0; j<6; j++){
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d1f9      	bne.n	8000f70 <Write_Registergroup+0x50>
 8000f7c:	e7eb      	b.n	8000f56 <Write_Registergroup+0x36>
	}
	uint8_t rx_data[sizeof(tx_data)];
	return SPI_Transceive(tx_data, rx_data, sizeof(tx_data));
 8000f7e:	2244      	movs	r2, #68	; 0x44
 8000f80:	a901      	add	r1, sp, #4
 8000f82:	a813      	add	r0, sp, #76	; 0x4c
 8000f84:	f7ff ff48 	bl	8000e18 <SPI_Transceive>
}
 8000f88:	b025      	add	sp, #148	; 0x94
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f8c <Read_Registergroup>:

HAL_StatusTypeDef Read_Registergroup(uint16_t command, uint8_t *buffer){		// checked, read data for every single client, data length: 6*NUM_OF_CLIENTS
 8000f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f90:	b0a4      	sub	sp, #144	; 0x90
 8000f92:	460e      	mov	r6, r1
	uint8_t tx_data[4+NUM_OF_CLIENTS*8];
	for(uint16_t i=0; i<sizeof(tx_data)-4; i++){
 8000f94:	f10d 034f 	add.w	r3, sp, #79	; 0x4f
 8000f98:	f10d 0c8f 	add.w	ip, sp, #143	; 0x8f
		tx_data[i+4] = DUMMY;
 8000f9c:	22aa      	movs	r2, #170	; 0xaa
 8000f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(uint16_t i=0; i<sizeof(tx_data)-4; i++){
 8000fa2:	4563      	cmp	r3, ip
 8000fa4:	d1fb      	bne.n	8000f9e <Read_Registergroup+0x12>
	}
	uint8_t crc_data[2];
	crc_data[0] = command>>8;
 8000fa6:	0a05      	lsrs	r5, r0, #8
 8000fa8:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
	crc_data[1] = command&0xFF;
 8000fac:	b2c4      	uxtb	r4, r0
 8000fae:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
	uint16_t crc = generatePEC(crc_data, 2);
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	a812      	add	r0, sp, #72	; 0x48
 8000fb6:	f7ff ff4b 	bl	8000e50 <generatePEC>
	tx_data[0] = command>>8;
 8000fba:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
	tx_data[1] = command&0xFF;
 8000fbe:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
	tx_data[2] = crc>>8;
 8000fc2:	0a03      	lsrs	r3, r0, #8
 8000fc4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	tx_data[3] = crc&0xFF;
 8000fc8:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
	uint8_t rx_data[sizeof(tx_data)];
	HAL_StatusTypeDef status = SPI_Transceive(tx_data, rx_data, sizeof(tx_data));		// read data
 8000fcc:	2244      	movs	r2, #68	; 0x44
 8000fce:	a901      	add	r1, sp, #4
 8000fd0:	a813      	add	r0, sp, #76	; 0x4c
 8000fd2:	f7ff ff21 	bl	8000e18 <SPI_Transceive>
 8000fd6:	4680      	mov	r8, r0
	uint16_t not_valid;
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8000fd8:	ad02      	add	r5, sp, #8
 8000fda:	1db4      	adds	r4, r6, #6
 8000fdc:	3636      	adds	r6, #54	; 0x36
		crc = generatePEC(&rx_data[4+i*8], 6);
 8000fde:	2706      	movs	r7, #6
 8000fe0:	4639      	mov	r1, r7
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	f7ff ff34 	bl	8000e50 <generatePEC>
		not_valid = (rx_data[10+i*8]<<8 | rx_data[11+i*8])-crc;		// check crc
 8000fe8:	79ab      	ldrb	r3, [r5, #6]
 8000fea:	f895 c007 	ldrb.w	ip, [r5, #7]
 8000fee:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
		for(uint16_t j=0; j<6; j++){			// write to buffer
 8000ff2:	1fa3      	subs	r3, r4, #6
		not_valid = (rx_data[10+i*8]<<8 | rx_data[11+i*8])-crc;		// check crc
 8000ff4:	462a      	mov	r2, r5
			buffer[i*6+j] = rx_data[4+i*8+j];
 8000ff6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000ffa:	f803 1b01 	strb.w	r1, [r3], #1
		for(uint16_t j=0; j<6; j++){			// write to buffer
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	d1f9      	bne.n	8000ff6 <Read_Registergroup+0x6a>
		}
		if(not_valid){
 8001002:	4584      	cmp	ip, r0
 8001004:	d107      	bne.n	8001016 <Read_Registergroup+0x8a>
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8001006:	3508      	adds	r5, #8
 8001008:	3406      	adds	r4, #6
 800100a:	42b4      	cmp	r4, r6
 800100c:	d1e8      	bne.n	8000fe0 <Read_Registergroup+0x54>
			return HAL_ERROR;
		}
	}
	return status;
}
 800100e:	4640      	mov	r0, r8
 8001010:	b024      	add	sp, #144	; 0x90
 8001012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return HAL_ERROR;
 8001016:	f04f 0801 	mov.w	r8, #1
 800101a:	e7f8      	b.n	800100e <Read_Registergroup+0x82>

0800101c <Read_Voltages>:

HAL_StatusTypeDef Read_Voltages(uint8_t *buffer){		// checked, NUM_OF_CLIENTS * 36
 800101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	b08c      	sub	sp, #48	; 0x30
 8001022:	4604      	mov	r4, r0
	HAL_StatusTypeDef status = HAL_TIMEOUT;
	uint8_t sbuffer[NUM_OF_CLIENTS*6];		// short buffer for a single transmission
	wake_up();
 8001024:	f7ff fece 	bl	8000dc4 <wake_up>
	Command(ADCV);
 8001028:	f44f 7058 	mov.w	r0, #864	; 0x360
 800102c:	f7ff ff5b 	bl	8000ee6 <Command>
	HAL_Delay(3);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 fe37 	bl	8001ca4 <HAL_Delay>
	for(uint16_t i=0; i<6; i++){
 8001036:	4e1a      	ldr	r6, [pc, #104]	; (80010a0 <Read_Voltages+0x84>)
 8001038:	1da5      	adds	r5, r4, #6
 800103a:	f104 072a 	add.w	r7, r4, #42	; 0x2a
 800103e:	e022      	b.n	8001086 <Read_Voltages+0x6a>
		//wake_up();		// used for debug
		status = Read_Registergroup(RDCV[i], sbuffer);
		if(status==HAL_OK){
			for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){
 8001040:	f10e 0e06 	add.w	lr, lr, #6
 8001044:	f10c 0c24 	add.w	ip, ip, #36	; 0x24
 8001048:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 800104c:	d018      	beq.n	8001080 <Read_Voltages+0x64>
				for(uint16_t k=0;k<6; k++){
 800104e:	f10d 33ff 	add.w	r3, sp, #4294967295
 8001052:	eb03 020e 	add.w	r2, r3, lr
 8001056:	f1ac 0306 	sub.w	r3, ip, #6
					buffer[j*36+i*6+k] = sbuffer[j*6+k];
 800105a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800105e:	f803 1b01 	strb.w	r1, [r3], #1
				for(uint16_t k=0;k<6; k++){
 8001062:	4563      	cmp	r3, ip
 8001064:	d1f9      	bne.n	800105a <Read_Voltages+0x3e>
 8001066:	e7eb      	b.n	8001040 <Read_Voltages+0x24>
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	f204 141f 	addw	r4, r4, #287	; 0x11f
				}
			}
		}else{
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*36); j++){
				buffer[j] = 0;
 800106e:	2200      	movs	r2, #0
 8001070:	f803 2f01 	strb.w	r2, [r3, #1]!
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*36); j++){
 8001074:	42a3      	cmp	r3, r4
 8001076:	d1fb      	bne.n	8001070 <Read_Voltages+0x54>
			}
			return status;
		}
	}
	return status;
}
 8001078:	4640      	mov	r0, r8
 800107a:	b00c      	add	sp, #48	; 0x30
 800107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(uint16_t i=0; i<6; i++){
 8001080:	3506      	adds	r5, #6
 8001082:	42bd      	cmp	r5, r7
 8001084:	d0f8      	beq.n	8001078 <Read_Voltages+0x5c>
		status = Read_Registergroup(RDCV[i], sbuffer);
 8001086:	4669      	mov	r1, sp
 8001088:	f816 0b01 	ldrb.w	r0, [r6], #1
 800108c:	f7ff ff7e 	bl	8000f8c <Read_Registergroup>
		if(status==HAL_OK){
 8001090:	4680      	mov	r8, r0
 8001092:	2800      	cmp	r0, #0
 8001094:	d1e8      	bne.n	8001068 <Read_Voltages+0x4c>
 8001096:	46ac      	mov	ip, r5
 8001098:	f04f 0e00 	mov.w	lr, #0
 800109c:	e7d7      	b.n	800104e <Read_Voltages+0x32>
 800109e:	bf00      	nop
 80010a0:	0800433c 	.word	0x0800433c

080010a4 <Read_Temp>:

HAL_StatusTypeDef Read_Temp(uint8_t *buffer){		// buffer NUM_OF_CLIENTS * 20
 80010a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a8:	b08c      	sub	sp, #48	; 0x30
 80010aa:	4604      	mov	r4, r0
	HAL_StatusTypeDef status;
	uint8_t sbuffer[NUM_OF_CLIENTS*6];		// short buffer for a single transmission
	wake_up();
 80010ac:	f7ff fe8a 	bl	8000dc4 <wake_up>
	Command(ADAX);
 80010b0:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 80010b4:	f7ff ff17 	bl	8000ee6 <Command>
	HAL_Delay(3);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 fdf3 	bl	8001ca4 <HAL_Delay>
	for(uint16_t i=0; i<4; i++){
 80010be:	4f2f      	ldr	r7, [pc, #188]	; (800117c <Read_Temp+0xd8>)
	HAL_Delay(3);
 80010c0:	4626      	mov	r6, r4
 80010c2:	2501      	movs	r5, #1
 80010c4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80010c8:	e032      	b.n	8001130 <Read_Temp+0x8c>
 80010ca:	466b      	mov	r3, sp
		//wake_up();		// used for debug
		status = Read_Registergroup(RDAUX[i], sbuffer);
		if(status==HAL_OK){
			if(i<3){		// Register AUXA - AUXC
 80010cc:	4632      	mov	r2, r6
					}
				}
			}else{			// Register AUXD
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 2 Bytes
					for(uint16_t k=0;k<2; k++){
						buffer[j*20+i*6+k] = sbuffer[j*6+k];
 80010ce:	7819      	ldrb	r1, [r3, #0]
 80010d0:	7011      	strb	r1, [r2, #0]
 80010d2:	7859      	ldrb	r1, [r3, #1]
 80010d4:	7051      	strb	r1, [r2, #1]
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 2 Bytes
 80010d6:	3306      	adds	r3, #6
 80010d8:	3214      	adds	r2, #20
 80010da:	4543      	cmp	r3, r8
 80010dc:	d1f7      	bne.n	80010ce <Read_Temp+0x2a>
	for(uint16_t i=0; i<4; i++){
 80010de:	2d03      	cmp	r5, #3
 80010e0:	d923      	bls.n	800112a <Read_Temp+0x86>
 80010e2:	f104 0109 	add.w	r1, r4, #9
 80010e6:	f104 057f 	add.w	r5, r4, #127	; 0x7f
			}
			return status;
		}
	}
	// delete reference voltage and gpio9 => values 5 and 9
	uint16_t j=12;
 80010ea:	220c      	movs	r2, #12
	for(uint16_t i=10; i<16*NUM_OF_CLIENTS; i++){
		buffer[i] = buffer[j];
		if((j%20==9) || (j%20==17)){
 80010ec:	4824      	ldr	r0, [pc, #144]	; (8001180 <Read_Temp+0xdc>)
 80010ee:	e033      	b.n	8001158 <Read_Temp+0xb4>
				for(uint16_t j=0; j<NUM_OF_CLIENTS; j++){		// read 6 Bytes
 80010f0:	f10c 0c06 	add.w	ip, ip, #6
 80010f4:	3014      	adds	r0, #20
 80010f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80010fa:	d016      	beq.n	800112a <Read_Temp+0x86>
					for(uint16_t k=0;k<6; k++){
 80010fc:	f10d 33ff 	add.w	r3, sp, #4294967295
 8001100:	eb03 020c 	add.w	r2, r3, ip
 8001104:	1f83      	subs	r3, r0, #6
						buffer[j*20+i*6+k] = sbuffer[j*6+k];
 8001106:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800110a:	f803 1b01 	strb.w	r1, [r3], #1
					for(uint16_t k=0;k<6; k++){
 800110e:	4283      	cmp	r3, r0
 8001110:	d1f9      	bne.n	8001106 <Read_Temp+0x62>
 8001112:	e7ed      	b.n	80010f0 <Read_Temp+0x4c>
 8001114:	1e63      	subs	r3, r4, #1
 8001116:	349f      	adds	r4, #159	; 0x9f
				buffer[j] = 0;
 8001118:	2200      	movs	r2, #0
 800111a:	f803 2f01 	strb.w	r2, [r3, #1]!
			for(uint16_t j=0; j<(NUM_OF_CLIENTS*20); j++){
 800111e:	429c      	cmp	r4, r3
 8001120:	d1fb      	bne.n	800111a <Read_Temp+0x76>
		}else{
			j++;
		}
	}
	return status;
}
 8001122:	4660      	mov	r0, ip
 8001124:	b00c      	add	sp, #48	; 0x30
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112a:	3501      	adds	r5, #1
 800112c:	b2ad      	uxth	r5, r5
 800112e:	3606      	adds	r6, #6
		status = Read_Registergroup(RDAUX[i], sbuffer);
 8001130:	4669      	mov	r1, sp
 8001132:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001136:	f7ff ff29 	bl	8000f8c <Read_Registergroup>
		if(status==HAL_OK){
 800113a:	4684      	mov	ip, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d1e9      	bne.n	8001114 <Read_Temp+0x70>
			if(i<3){		// Register AUXA - AUXC
 8001140:	1e6b      	subs	r3, r5, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d8c0      	bhi.n	80010ca <Read_Temp+0x26>
 8001148:	1db0      	adds	r0, r6, #6
 800114a:	f04f 0c00 	mov.w	ip, #0
 800114e:	e7d5      	b.n	80010fc <Read_Temp+0x58>
			j+=3;
 8001150:	3203      	adds	r2, #3
 8001152:	b292      	uxth	r2, r2
	for(uint16_t i=10; i<16*NUM_OF_CLIENTS; i++){
 8001154:	428d      	cmp	r5, r1
 8001156:	d0e4      	beq.n	8001122 <Read_Temp+0x7e>
		buffer[i] = buffer[j];
 8001158:	5ca3      	ldrb	r3, [r4, r2]
 800115a:	f801 3f01 	strb.w	r3, [r1, #1]!
		if((j%20==9) || (j%20==17)){
 800115e:	fba0 6302 	umull	r6, r3, r0, r2
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001168:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 800116c:	b29b      	uxth	r3, r3
 800116e:	2b09      	cmp	r3, #9
 8001170:	d0ee      	beq.n	8001150 <Read_Temp+0xac>
 8001172:	2b11      	cmp	r3, #17
 8001174:	d0ec      	beq.n	8001150 <Read_Temp+0xac>
			j++;
 8001176:	3201      	adds	r2, #1
 8001178:	b292      	uxth	r2, r2
 800117a:	e7eb      	b.n	8001154 <Read_Temp+0xb0>
 800117c:	08004338 	.word	0x08004338
 8001180:	cccccccd 	.word	0xcccccccd

08001184 <ADBMS_HW_Init>:
		status|= Command(MUTE);
	}
	return status;
}

HAL_StatusTypeDef ADBMS_HW_Init(){
 8001184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001188:	b0b1      	sub	sp, #196	; 0xc4
 800118a:	2400      	movs	r4, #0
 800118c:	e002      	b.n	8001194 <ADBMS_HW_Init+0x10>
	uint8_t config_data_A[NUM_OF_CLIENTS*6];
	uint8_t config_data_B[NUM_OF_CLIENTS*6];
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 800118e:	3406      	adds	r4, #6
 8001190:	2c30      	cmp	r4, #48	; 0x30
 8001192:	d014      	beq.n	80011be <ADBMS_HW_Init+0x3a>
		for(uint16_t j=0; j<6; j++){
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <ADBMS_HW_Init+0xd8>)
 8001196:	f10d 028f 	add.w	r2, sp, #143	; 0x8f
 800119a:	1910      	adds	r0, r2, r4
 800119c:	4930      	ldr	r1, [pc, #192]	; (8001260 <ADBMS_HW_Init+0xdc>)
 800119e:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
 80011a2:	4422      	add	r2, r4
 80011a4:	f103 0e06 	add.w	lr, r3, #6
			config_data_A[i*6+j] = CFGAR[j];
 80011a8:	f813 cb01 	ldrb.w	ip, [r3], #1
 80011ac:	f800 cf01 	strb.w	ip, [r0, #1]!
			config_data_B[i*6+j] = CFGBR[j];
 80011b0:	f811 cb01 	ldrb.w	ip, [r1], #1
 80011b4:	f802 cf01 	strb.w	ip, [r2, #1]!
		for(uint16_t j=0; j<6; j++){
 80011b8:	4573      	cmp	r3, lr
 80011ba:	d1f5      	bne.n	80011a8 <ADBMS_HW_Init+0x24>
 80011bc:	e7e7      	b.n	800118e <ADBMS_HW_Init+0xa>
		}
	}
	wake_up();
 80011be:	f7ff fe01 	bl	8000dc4 <wake_up>
	HAL_Delay(1);		// timeout for stability
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 fd6e 	bl	8001ca4 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_OK;
	status |= Command(MUTE);
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	f7ff fe8c 	bl	8000ee6 <Command>
 80011ce:	4604      	mov	r4, r0
	status |= Write_Registergroup(WRCFGA, config_data_A);
 80011d0:	a924      	add	r1, sp, #144	; 0x90
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fea4 	bl	8000f20 <Write_Registergroup>
 80011d8:	4304      	orrs	r4, r0
 80011da:	b2e4      	uxtb	r4, r4
	status |= Write_Registergroup(WRCFGB, config_data_B);
 80011dc:	a918      	add	r1, sp, #96	; 0x60
 80011de:	2024      	movs	r0, #36	; 0x24
 80011e0:	f7ff fe9e 	bl	8000f20 <Write_Registergroup>
 80011e4:	4304      	orrs	r4, r0
 80011e6:	b2e4      	uxtb	r4, r4
	uint8_t read_data_A[NUM_OF_CLIENTS*6];
	uint8_t read_data_B[NUM_OF_CLIENTS*6];
	status |= Read_Registergroup(RDCFGA, read_data_A);
 80011e8:	a90c      	add	r1, sp, #48	; 0x30
 80011ea:	2002      	movs	r0, #2
 80011ec:	f7ff fece 	bl	8000f8c <Read_Registergroup>
 80011f0:	4320      	orrs	r0, r4
 80011f2:	b2c4      	uxtb	r4, r0
	status |= Read_Registergroup(RDCFGB, read_data_B);
 80011f4:	4669      	mov	r1, sp
 80011f6:	2026      	movs	r0, #38	; 0x26
 80011f8:	f7ff fec8 	bl	8000f8c <Read_Registergroup>
 80011fc:	4320      	orrs	r0, r4

	if(status != HAL_OK){
 80011fe:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8001202:	d127      	bne.n	8001254 <ADBMS_HW_Init+0xd0>
 8001204:	f10d 0596 	add.w	r5, sp, #150	; 0x96
 8001208:	2600      	movs	r6, #0
 800120a:	f10d 0761 	add.w	r7, sp, #97	; 0x61
 800120e:	e003      	b.n	8001218 <ADBMS_HW_Init+0x94>
		return status;
	}
	uint8_t not_valid = 0;
	for(uint16_t i=0; i<NUM_OF_CLIENTS; i++){
 8001210:	3606      	adds	r6, #6
 8001212:	3506      	adds	r5, #6
 8001214:	2e30      	cmp	r6, #48	; 0x30
 8001216:	d01a      	beq.n	800124e <ADBMS_HW_Init+0xca>
		for(uint16_t j=1; j<6; j++){
 8001218:	1f6a      	subs	r2, r5, #5
 800121a:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 800121e:	eb03 0e06 	add.w	lr, r3, r6
 8001222:	eb07 0c06 	add.w	ip, r7, r6
 8001226:	f10d 0301 	add.w	r3, sp, #1
 800122a:	1999      	adds	r1, r3, r6
			not_valid += (config_data_A[i*6+j] - read_data_A[i*6+j]);
 800122c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001230:	f81e 8b01 	ldrb.w	r8, [lr], #1
			not_valid += (config_data_B[i*6+j] - read_data_B[i*6+j]);
 8001234:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8001238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800123c:	444b      	add	r3, r9
 800123e:	eba3 0308 	sub.w	r3, r3, r8
 8001242:	1b1b      	subs	r3, r3, r4
 8001244:	4403      	add	r3, r0
 8001246:	b2d8      	uxtb	r0, r3
		for(uint16_t j=1; j<6; j++){
 8001248:	42aa      	cmp	r2, r5
 800124a:	d1ef      	bne.n	800122c <ADBMS_HW_Init+0xa8>
 800124c:	e7e0      	b.n	8001210 <ADBMS_HW_Init+0x8c>
		return status;
 800124e:	3800      	subs	r0, #0
 8001250:	bf18      	it	ne
 8001252:	2001      	movne	r0, #1
	if(not_valid){
		return HAL_ERROR;
	}else{
		return HAL_OK;
	}
}
 8001254:	b031      	add	sp, #196	; 0xc4
 8001256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800125a:	bf00      	nop
 800125c:	08004328 	.word	0x08004328
 8001260:	08004330 	.word	0x08004330

08001264 <get_battery_status_code>:
	battery_values.error = 0;
}

uint8_t get_battery_status_code(uint16_t GPIO_Input){
	uint8_t status_code = 0;
	status_code |= (battery_values.error&0x1F)==0 ? STATUS_BATTERY_OK : 0;
 8001264:	490b      	ldr	r1, [pc, #44]	; (8001294 <get_battery_status_code+0x30>)
 8001266:	7bcb      	ldrb	r3, [r1, #15]
 8001268:	f013 0f1f 	tst.w	r3, #31
	status_code |= (GPIO_Input&Charger_Con_Pin)==Charger_Con_Pin ? STATUS_CHARGING : 0;
	// status MB temp
	status_code |= (GPIO_Input&V_FB_AIR_positive_Pin)==V_FB_AIR_positive_Pin ? STATUS_AIR_POSITIVE : 0;
 800126c:	f000 0308 	and.w	r3, r0, #8
 8001270:	bf08      	it	eq
 8001272:	f043 0301 	orreq.w	r3, r3, #1
	status_code |= (GPIO_Input&Charger_Con_Pin)==Charger_Con_Pin ? STATUS_CHARGING : 0;
 8001276:	1242      	asrs	r2, r0, #9
 8001278:	f002 0202 	and.w	r2, r2, #2
	status_code |= (GPIO_Input&V_FB_AIR_positive_Pin)==V_FB_AIR_positive_Pin ? STATUS_AIR_POSITIVE : 0;
 800127c:	4313      	orrs	r3, r2
	status_code |= (GPIO_Input&V_FB_AIR_negative_Pin)==V_FB_AIR_negative_Pin ? STATUS_AIR_NEGATIVE : 0;
 800127e:	00c2      	lsls	r2, r0, #3
 8001280:	f002 0210 	and.w	r2, r2, #16
 8001284:	4313      	orrs	r3, r2
	status_code |= (GPIO_Input&V_FB_PC_Relay_Pin)==V_FB_PC_Relay_Pin ? STATUS_PRECHARGE : 0;
 8001286:	0040      	lsls	r0, r0, #1
 8001288:	f000 0020 	and.w	r0, r0, #32
 800128c:	4318      	orrs	r0, r3
	battery_values.status = status_code;
 800128e:	7388      	strb	r0, [r1, #14]
	return status_code;
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200000fc 	.word	0x200000fc

08001298 <battery_reset_error_flags>:

void battery_reset_error_flags(){
	battery_values.error = 0;
 8001298:	4b01      	ldr	r3, [pc, #4]	; (80012a0 <battery_reset_error_flags+0x8>)
 800129a:	2200      	movs	r2, #0
 800129c:	73da      	strb	r2, [r3, #15]
}
 800129e:	4770      	bx	lr
 80012a0:	200000fc 	.word	0x200000fc

080012a4 <get_battery_error_code>:

uint8_t get_battery_error_code(){
	return battery_values.error;
}
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <get_battery_error_code+0x8>)
 80012a6:	7bd8      	ldrb	r0, [r3, #15]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200000fc 	.word	0x200000fc

080012b0 <set_battery_error_flag>:

void set_battery_error_flag(uint8_t mask){
	battery_values.error |= mask;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <set_battery_error_flag+0xc>)
 80012b2:	7bda      	ldrb	r2, [r3, #15]
 80012b4:	4310      	orrs	r0, r2
 80012b6:	73d8      	strb	r0, [r3, #15]
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200000fc 	.word	0x200000fc

080012c0 <calc_Battery_values>:
	}else{
		battery_values.status &= ~mask;
	}
}

BatterySystemTypeDef* calc_Battery_values(uint8_t *volt_buffer, uint8_t *temp_buffer){
 80012c0:	b510      	push	{r4, lr}
 80012c2:	460c      	mov	r4, r1
 80012c4:	f64f 7372 	movw	r3, #65394	; 0xff72
	uint16_t *temp_data = (uint16_t*)(temp_buffer);

	// get total, mean, min, max
	uint32_t total = 0;
	uint16_t min = 50000;
	uint16_t max = 0;
 80012c8:	f04f 0c00 	mov.w	ip, #0
	uint16_t min = 50000;
 80012cc:	f24c 3e50 	movw	lr, #50000	; 0xc350
	uint32_t total = 0;
 80012d0:	4662      	mov	r2, ip
	for(uint16_t i = 0; i<(18*NUM_OF_CLIENTS); i++){
		if((i != 142) && (i != 143)){		// 2 zellen nicht bestückt
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d81a      	bhi.n	800130c <calc_Battery_values+0x4c>
	for(uint16_t i = 0; i<(18*NUM_OF_CLIENTS); i++){
 80012d6:	3301      	adds	r3, #1
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3002      	adds	r0, #2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d1f8      	bne.n	80012d2 <calc_Battery_values+0x12>
			if(volt_data[i] > max){
				max = volt_data[i];
			}
		}
	}
	battery_values.meanCellVoltage = (uint16_t)(total / (18*NUM_OF_CLIENTS-2));		// 2 zellen nicht bestückt
 80012e0:	4920      	ldr	r1, [pc, #128]	; (8001364 <calc_Battery_values+0xa4>)
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <calc_Battery_values+0xa8>)
 80012e4:	fba3 0302 	umull	r0, r3, r3, r2
 80012e8:	09db      	lsrs	r3, r3, #7
 80012ea:	80cb      	strh	r3, [r1, #6]
	battery_values.totalVoltage = (uint16_t)(total /= 1000); 		// total voltage in 0.1V/bit
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <calc_Battery_values+0xac>)
 80012ee:	fba3 2302 	umull	r2, r3, r3, r2
 80012f2:	099b      	lsrs	r3, r3, #6
 80012f4:	800b      	strh	r3, [r1, #0]
	battery_values.lowestCellVoltage = min;
 80012f6:	f8a1 e004 	strh.w	lr, [r1, #4]
	battery_values.highestCellVoltage = max;
 80012fa:	f8a1 c002 	strh.w	ip, [r1, #2]
 80012fe:	2301      	movs	r3, #1
 8001300:	2200      	movs	r2, #0

	total = 0;
	min = 50000;
	max = 0;
 8001302:	4696      	mov	lr, r2
	min = 50000;
 8001304:	f24c 3150 	movw	r1, #50000	; 0xc350
	total = 0;
 8001308:	4694      	mov	ip, r2
 800130a:	e00e      	b.n	800132a <calc_Battery_values+0x6a>
			total += volt_data[i];
 800130c:	f830 1b02 	ldrh.w	r1, [r0], #2
 8001310:	440a      	add	r2, r1
			if(volt_data[i] < min){
 8001312:	458e      	cmp	lr, r1
 8001314:	bf28      	it	cs
 8001316:	468e      	movcs	lr, r1
			if(volt_data[i] > max){
 8001318:	458c      	cmp	ip, r1
 800131a:	bf38      	it	cc
 800131c:	468c      	movcc	ip, r1
	for(uint16_t i = 0; i<(18*NUM_OF_CLIENTS); i++){
 800131e:	3301      	adds	r3, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	e7d6      	b.n	80012d2 <calc_Battery_values+0x12>
 8001324:	3201      	adds	r2, #1
 8001326:	3301      	adds	r3, #1
 8001328:	b29b      	uxth	r3, r3
	for(uint16_t i = 0; i<(8*NUM_OF_CLIENTS); i++){
		if((i != 1) && (i != 26)){		// temp sensor 1 defekt
 800132a:	b290      	uxth	r0, r2
 800132c:	2801      	cmp	r0, #1
 800132e:	d0f9      	beq.n	8001324 <calc_Battery_values+0x64>
 8001330:	281a      	cmp	r0, #26
 8001332:	d0f7      	beq.n	8001324 <calc_Battery_values+0x64>
			total += temp_data[i];
 8001334:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8001338:	4484      	add	ip, r0
			if(temp_data[i] < min){
 800133a:	4281      	cmp	r1, r0
 800133c:	bf28      	it	cs
 800133e:	4601      	movcs	r1, r0
				min = temp_data[i];
			}
			if(temp_data[i] > max){
 8001340:	4586      	cmp	lr, r0
 8001342:	bf38      	it	cc
 8001344:	4686      	movcc	lr, r0
	for(uint16_t i = 0; i<(8*NUM_OF_CLIENTS); i++){
 8001346:	2b3f      	cmp	r3, #63	; 0x3f
 8001348:	d9ec      	bls.n	8001324 <calc_Battery_values+0x64>
				max = temp_data[i];
			}
		}
	}
	battery_values.meanCellTemp = (uint16_t)(total / (8*NUM_OF_CLIENTS-2));		// 1 sensor defekt
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <calc_Battery_values+0xa4>)
 800134c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <calc_Battery_values+0xb0>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	8183      	strh	r3, [r0, #12]
	battery_values.highestCellTemp = min;
 800135a:	8101      	strh	r1, [r0, #8]
	battery_values.lowestCellTemp = max;
 800135c:	f8a0 e00a 	strh.w	lr, [r0, #10]
	return &battery_values;
}
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	200000fc 	.word	0x200000fc
 8001368:	e6c2b449 	.word	0xe6c2b449
 800136c:	10624dd3 	.word	0x10624dd3
 8001370:	84210843 	.word	0x84210843
 8001374:	00000000 	.word	0x00000000

08001378 <volt2celsius>:

uint8_t volt2celsius(uint16_t volt_100uV){		// convert volt to celsius with polynom
	if(volt_100uV > 23000){
 8001378:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800137c:	4298      	cmp	r0, r3
 800137e:	d825      	bhi.n	80013cc <volt2celsius+0x54>
uint8_t volt2celsius(uint16_t volt_100uV){		// convert volt to celsius with polynom
 8001380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001384:	b096      	sub	sp, #88	; 0x58
 8001386:	4607      	mov	r7, r0
		return 0;
	}else if(volt_100uV < 2000){
 8001388:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800138c:	d320      	bcc.n	80013d0 <volt2celsius+0x58>
		return 100;
	}
	// Coefficients of the polynomial: a0, a1, ..., a10
    double coefficients[11] = {1.65728946e+02, -5.76649020e-02, 1.80075051e-05, -3.95278974e-09, 5.86752736e-13, -5.93033515e-17, 4.07565006e-21, -1.87118391e-25, 5.48516319e-30, -9.27411410e-35, 6.87565181e-40};
 800138e:	46e8      	mov	r8, sp
 8001390:	2258      	movs	r2, #88	; 0x58
 8001392:	4913      	ldr	r1, [pc, #76]	; (80013e0 <volt2celsius+0x68>)
 8001394:	4640      	mov	r0, r8
 8001396:	f002 ff6b 	bl	8004270 <memcpy>

    // Calculate the polynomial value
    double result = coefficients[10];
    for (int8_t i = 9; i >= 0; i--) {
 800139a:	ae14      	add	r6, sp, #80	; 0x50
    double result = coefficients[10];
 800139c:	a50e      	add	r5, pc, #56	; (adr r5, 80013d8 <volt2celsius+0x60>)
 800139e:	e9d5 4500 	ldrd	r4, r5, [r5]
        result = result * volt_100uV + coefficients[i];
 80013a2:	4638      	mov	r0, r7
 80013a4:	f7ff f990 	bl	80006c8 <__aeabi_i2d>
 80013a8:	4622      	mov	r2, r4
 80013aa:	462b      	mov	r3, r5
 80013ac:	f7fe ff10 	bl	80001d0 <__aeabi_dmul>
 80013b0:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80013b4:	f7ff f83c 	bl	8000430 <__adddf3>
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
    for (int8_t i = 9; i >= 0; i--) {
 80013bc:	4546      	cmp	r6, r8
 80013be:	d1f0      	bne.n	80013a2 <volt2celsius+0x2a>
    }
    return (uint16_t)(result);		// in °C
 80013c0:	f7ff f9ec 	bl	800079c <__aeabi_d2uiz>
 80013c4:	b2c0      	uxtb	r0, r0
}
 80013c6:	b016      	add	sp, #88	; 0x58
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 80013cc:	2000      	movs	r0, #0
}
 80013ce:	4770      	bx	lr
		return 100;
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	e7f8      	b.n	80013c6 <volt2celsius+0x4e>
 80013d4:	f3af 8000 	nop.w
 80013d8:	a2e6cfde 	.word	0xa2e6cfde
 80013dc:	37cdf29b 	.word	0x37cdf29b
 80013e0:	080042d0 	.word	0x080042d0

080013e4 <set_relays>:
	return refresh_SDC();;
}

void set_relays(uint8_t CAN_Data){
	static uint64_t last_value = 0;
	if(last_value != CAN_Data){
 80013e4:	2200      	movs	r2, #0
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <set_relays+0x48>)
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	bf08      	it	eq
 80013f0:	4288      	cmpeq	r0, r1
 80013f2:	d017      	beq.n	8001424 <set_relays+0x40>
		if(CAN_Data & AIR_POSITIVE){
 80013f4:	f010 0f01 	tst.w	r0, #1
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin;	// high
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <set_relays+0x4c>)
 80013fa:	bf14      	ite	ne
 80013fc:	2110      	movne	r1, #16
		}else{
			Drive_AIR_positive_GPIO_Port->BSRR = Drive_AIR_positive_Pin<<16;	// low
 80013fe:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001402:	6199      	str	r1, [r3, #24]
		}
		if(CAN_Data & AIR_NEGATIVE){
 8001404:	f010 0f02 	tst.w	r0, #2
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin;	// high
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <set_relays+0x4c>)
 800140a:	bf14      	ite	ne
 800140c:	2120      	movne	r1, #32
		}else{
			Drive_AIR_negative_GPIO_Port->BSRR = Drive_AIR_negative_Pin<<16;	// low
 800140e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8001412:	6199      	str	r1, [r3, #24]
		}
		if(CAN_Data & PRECHARGE_RELAY){
 8001414:	f010 0f04 	tst.w	r0, #4
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin;	// high
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <set_relays+0x4c>)
 800141a:	bf14      	ite	ne
 800141c:	2140      	movne	r1, #64	; 0x40
		}else{
			Drive_Precharge_Relay_GPIO_Port->BSRR = Drive_Precharge_Relay_Pin<<16;	// low
 800141e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
 8001422:	6199      	str	r1, [r3, #24]
		}
	}
	last_value = CAN_Data;
 8001424:	4b01      	ldr	r3, [pc, #4]	; (800142c <set_relays+0x48>)
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
}
 800142a:	4770      	bx	lr
 800142c:	200002d8 	.word	0x200002d8
 8001430:	48000400 	.word	0x48000400

08001434 <refresh_SDC>:
Battery_StatusTypeDef refresh_SDC(){
 8001434:	b508      	push	{r3, lr}
	if ((battery_values.error&0x1F) == 0){
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <refresh_SDC+0x44>)
 8001438:	7bd8      	ldrb	r0, [r3, #15]
 800143a:	f010 001f 	ands.w	r0, r0, #31
 800143e:	d105      	bne.n	800144c <refresh_SDC+0x18>
		TIM7->CNT = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <refresh_SDC+0x48>)
 8001444:	6253      	str	r3, [r2, #36]	; 0x24
		error_counter = 0;
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <refresh_SDC+0x4c>)
 8001448:	7013      	strb	r3, [r2, #0]
}
 800144a:	bd08      	pop	{r3, pc}
		error_counter++;
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <refresh_SDC+0x4c>)
 800144e:	7813      	ldrb	r3, [r2, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	7013      	strb	r3, [r2, #0]
		if(error_counter >= 3){
 8001456:	2b02      	cmp	r3, #2
 8001458:	d801      	bhi.n	800145e <refresh_SDC+0x2a>
	return BATTERY_OK;
 800145a:	2000      	movs	r0, #0
 800145c:	e7f5      	b.n	800144a <refresh_SDC+0x16>
			SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
 800145e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001466:	619a      	str	r2, [r3, #24]
			set_battery_error_flag(ERROR_SDC);
 8001468:	2008      	movs	r0, #8
 800146a:	f7ff ff21 	bl	80012b0 <set_battery_error_flag>
			set_relays(0);								// open AIR relais
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff ffb8 	bl	80013e4 <set_relays>
			return BATTERY_ERROR;
 8001474:	2001      	movs	r0, #1
 8001476:	e7e8      	b.n	800144a <refresh_SDC+0x16>
 8001478:	200000fc 	.word	0x200000fc
 800147c:	40001400 	.word	0x40001400
 8001480:	20000000 	.word	0x20000000

08001484 <check_battery>:
Battery_StatusTypeDef check_battery(){
 8001484:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef status = Read_Voltages(battery_values.volt_buffer);
 8001486:	4d1c      	ldr	r5, [pc, #112]	; (80014f8 <check_battery+0x74>)
 8001488:	f105 0018 	add.w	r0, r5, #24
 800148c:	f7ff fdc6 	bl	800101c <Read_Voltages>
 8001490:	4604      	mov	r4, r0
	status |= Read_Temp(battery_values.temp_buffer);
 8001492:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8001496:	f7ff fe05 	bl	80010a4 <Read_Temp>
 800149a:	4304      	orrs	r4, r0
	if(status){
 800149c:	f014 0fff 	tst.w	r4, #255	; 0xff
 80014a0:	d005      	beq.n	80014ae <check_battery+0x2a>
		set_battery_error_flag(ERROR_SPI|ERROR_BATTERY);
 80014a2:	2011      	movs	r0, #17
 80014a4:	f7ff ff04 	bl	80012b0 <set_battery_error_flag>
	return refresh_SDC();;
 80014a8:	f7ff ffc4 	bl	8001434 <refresh_SDC>
}
 80014ac:	bd38      	pop	{r3, r4, r5, pc}
		calc_Battery_values(battery_values.volt_buffer, battery_values.temp_buffer);
 80014ae:	4c12      	ldr	r4, [pc, #72]	; (80014f8 <check_battery+0x74>)
 80014b0:	f504 719c 	add.w	r1, r4, #312	; 0x138
 80014b4:	f104 0018 	add.w	r0, r4, #24
 80014b8:	f7ff ff02 	bl	80012c0 <calc_Battery_values>
		if((battery_values.highestCellVoltage > MAX_VOLT) || (battery_values.lowestCellVoltage < MIN_VOLT)){
 80014bc:	8862      	ldrh	r2, [r4, #2]
 80014be:	f24a 4310 	movw	r3, #42000	; 0xa410
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d804      	bhi.n	80014d0 <check_battery+0x4c>
 80014c6:	88a2      	ldrh	r2, [r4, #4]
 80014c8:	f247 532f 	movw	r3, #29999	; 0x752f
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d802      	bhi.n	80014d6 <check_battery+0x52>
			set_battery_error_flag(ERROR_VOLT|ERROR_BATTERY);
 80014d0:	2005      	movs	r0, #5
 80014d2:	f7ff feed 	bl	80012b0 <set_battery_error_flag>
		if((battery_values.highestCellTemp < MAX_TEMP) || (battery_values.lowestCellTemp > MIN_TEMP)){
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <check_battery+0x74>)
 80014d8:	891a      	ldrh	r2, [r3, #8]
 80014da:	f241 73e2 	movw	r3, #6114	; 0x17e2
 80014de:	429a      	cmp	r2, r3
 80014e0:	d905      	bls.n	80014ee <check_battery+0x6a>
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <check_battery+0x74>)
 80014e4:	895a      	ldrh	r2, [r3, #10]
 80014e6:	f244 1355 	movw	r3, #16725	; 0x4155
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d9dc      	bls.n	80014a8 <check_battery+0x24>
			set_battery_error_flag(ERROR_TEMP|ERROR_BATTERY);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f7ff fede 	bl	80012b0 <set_battery_error_flag>
 80014f4:	e7d8      	b.n	80014a8 <check_battery+0x24>
 80014f6:	bf00      	nop
 80014f8:	200000fc 	.word	0x200000fc

080014fc <SDC_reset>:
Battery_StatusTypeDef SDC_reset(){
 80014fc:	b510      	push	{r4, lr}
 80014fe:	b0f0      	sub	sp, #448	; 0x1c0
	error_counter = 2;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <SDC_reset+0x58>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
	status_hw = ADBMS_HW_Init();
 8001506:	f7ff fe3d 	bl	8001184 <ADBMS_HW_Init>
 800150a:	4604      	mov	r4, r0
	status_hw |= Read_Voltages(volt_buffer);
 800150c:	a828      	add	r0, sp, #160	; 0xa0
 800150e:	f7ff fd85 	bl	800101c <Read_Voltages>
 8001512:	4304      	orrs	r4, r0
 8001514:	b2e4      	uxtb	r4, r4
	status_hw |= Read_Temp(temp_buffer);
 8001516:	4668      	mov	r0, sp
 8001518:	f7ff fdc4 	bl	80010a4 <Read_Temp>
 800151c:	4304      	orrs	r4, r0
 800151e:	b2e4      	uxtb	r4, r4
	status_hw |= check_battery(volt_buffer, temp_buffer);
 8001520:	4669      	mov	r1, sp
 8001522:	a828      	add	r0, sp, #160	; 0xa0
 8001524:	f7ff ffae 	bl	8001484 <check_battery>
 8001528:	4320      	orrs	r0, r4
	if(status_hw == HAL_OK){
 800152a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800152e:	d109      	bne.n	8001544 <SDC_reset+0x48>
		TIM7->CNT = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <SDC_reset+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin;	// SDC high
 8001536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800153a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153e:	619a      	str	r2, [r3, #24]
}
 8001540:	b070      	add	sp, #448	; 0x1c0
 8001542:	bd10      	pop	{r4, pc}
		SDC_Out_GPIO_Port->BSRR = SDC_Out_Pin<<16;	// SDC low
 8001544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800154c:	619a      	str	r2, [r3, #24]
		return BATTERY_ERROR;
 800154e:	2001      	movs	r0, #1
 8001550:	e7f6      	b.n	8001540 <SDC_reset+0x44>
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000
 8001558:	40001400 	.word	0x40001400

0800155c <HAL_TIM_PeriodElapsedCallback>:
  {
    // TIM7 overflow callback
	//GPIOA->BSRR = SDC_Out_Pin<<16;	// SDC low
	//set_battery_error_flag(ERROR_SDC);
  }
}
 800155c:	4770      	bx	lr

0800155e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
  {
	  send_data2ECU(0);
 8001560:	2500      	movs	r5, #0
	  // watchdog occurs after 100 ms
	  HAL_Delay(1000);
 8001562:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	  send_data2ECU(0);
 8001566:	4628      	mov	r0, r5
 8001568:	f7ff fb20 	bl	8000bac <send_data2ECU>
	  HAL_Delay(1000);
 800156c:	4620      	mov	r0, r4
 800156e:	f000 fb99 	bl	8001ca4 <HAL_Delay>
  while (1)
 8001572:	e7f8      	b.n	8001566 <Error_Handler+0x8>

08001574 <SystemClock_Config>:
{
 8001574:	b500      	push	{lr}
 8001576:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001578:	2244      	movs	r2, #68	; 0x44
 800157a:	2100      	movs	r1, #0
 800157c:	a805      	add	r0, sp, #20
 800157e:	f002 fe85 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	9303      	str	r3, [sp, #12]
 800158c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800158e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001592:	f000 ff55 	bl	8002440 <HAL_PWREx_ControlVoltageScaling>
 8001596:	2800      	cmp	r0, #0
 8001598:	d130      	bne.n	80015fc <SystemClock_Config+0x88>
  HAL_PWR_EnableBkUpAccess();
 800159a:	f000 ff41 	bl	8002420 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <SystemClock_Config+0x94>)
 80015a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015a4:	f023 0318 	bic.w	r3, r3, #24
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015ac:	2314      	movs	r3, #20
 80015ae:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015b4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015b6:	2200      	movs	r2, #0
 80015b8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015ba:	2260      	movs	r2, #96	; 0x60
 80015bc:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	2202      	movs	r2, #2
 80015c0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80015c6:	2320      	movs	r3, #32
 80015c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ce:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d0:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	a805      	add	r0, sp, #20
 80015d4:	f001 f816 	bl	8002604 <HAL_RCC_OscConfig>
 80015d8:	b990      	cbnz	r0, 8001600 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2103      	movs	r1, #3
 80015e0:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ea:	4668      	mov	r0, sp
 80015ec:	f001 fb4a 	bl	8002c84 <HAL_RCC_ClockConfig>
 80015f0:	b940      	cbnz	r0, 8001604 <SystemClock_Config+0x90>
  HAL_RCCEx_EnableMSIPLLMode();
 80015f2:	f001 fe51 	bl	8003298 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015f6:	b017      	add	sp, #92	; 0x5c
 80015f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015fc:	f7ff ffaf 	bl	800155e <Error_Handler>
    Error_Handler();
 8001600:	f7ff ffad 	bl	800155e <Error_Handler>
    Error_Handler();
 8001604:	f7ff ffab 	bl	800155e <Error_Handler>
 8001608:	40021000 	.word	0x40021000

0800160c <main>:
{
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001610:	f000 fb26 	bl	8001c60 <HAL_Init>
  SystemClock_Config();
 8001614:	f7ff ffae 	bl	8001574 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	2400      	movs	r4, #0
 800161a:	9404      	str	r4, [sp, #16]
 800161c:	9405      	str	r4, [sp, #20]
 800161e:	9406      	str	r4, [sp, #24]
 8001620:	9407      	str	r4, [sp, #28]
 8001622:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4ba9      	ldr	r3, [pc, #676]	; (80018cc <main+0x2c0>)
 8001626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001628:	f042 0204 	orr.w	r2, r2, #4
 800162c:	64da      	str	r2, [r3, #76]	; 0x4c
 800162e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001630:	f002 0204 	and.w	r2, r2, #4
 8001634:	9201      	str	r2, [sp, #4]
 8001636:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001642:	f002 0201 	and.w	r2, r2, #1
 8001646:	9202      	str	r2, [sp, #8]
 8001648:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800164c:	f042 0202 	orr.w	r2, r2, #2
 8001650:	64da      	str	r2, [r3, #76]	; 0x4c
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, ISO_SPI_CS2_Pin|ISO_SPI_CS1_Pin, GPIO_PIN_SET);
 800165c:	4d9c      	ldr	r5, [pc, #624]	; (80018d0 <main+0x2c4>)
 800165e:	2201      	movs	r2, #1
 8001660:	2103      	movs	r1, #3
 8001662:	4628      	mov	r0, r5
 8001664:	f000 fed6 	bl	8002414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SDC_Out_Pin|Charge_EN_Pin, GPIO_PIN_RESET);
 8001668:	4622      	mov	r2, r4
 800166a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f000 fecf 	bl	8002414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, User_LED_Pin|Drive_AIR_positive_Pin|Drive_AIR_negative_Pin|Drive_Precharge_Relay_Pin
 8001676:	4622      	mov	r2, r4
 8001678:	21f8      	movs	r1, #248	; 0xf8
 800167a:	4628      	mov	r0, r5
 800167c:	f000 feca 	bl	8002414 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SDC_IN_Pin|V_FB_AIR_negative_Pin|V_FB_AIR_positive_Pin|V_FB_PC_Relay_Pin
 8001680:	f240 431b 	movw	r3, #1051	; 0x41b
 8001684:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	a904      	add	r1, sp, #16
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f000 fdf2 	bl	8002278 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ISO_SPI_CS2_Pin|ISO_SPI_CS1_Pin|User_LED_Pin|Drive_AIR_positive_Pin
 8001694:	23fb      	movs	r3, #251	; 0xfb
 8001696:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2601      	movs	r6, #1
 800169a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	a904      	add	r1, sp, #16
 80016a2:	4628      	mov	r0, r5
 80016a4:	f000 fde8 	bl	8002278 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDC_Out_Pin|Charge_EN_Pin;
 80016a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	a904      	add	r1, sp, #16
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f000 fddd 	bl	8002278 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80016be:	4885      	ldr	r0, [pc, #532]	; (80018d4 <main+0x2c8>)
 80016c0:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <main+0x2cc>)
 80016c2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80016c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016c8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	230c      	movs	r3, #12
 80016d2:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d4:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d6:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d8:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016da:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016dc:	f002 fd73 	bl	80041c6 <HAL_UART_Init>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	f040 80a8 	bne.w	8001836 <main+0x22a>
  hcan1.Instance = CAN1;
 80016e6:	487d      	ldr	r0, [pc, #500]	; (80018dc <main+0x2d0>)
 80016e8:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <main+0x2d4>)
 80016ea:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 32;
 80016ec:	2320      	movs	r3, #32
 80016ee:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016f4:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016fa:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016fc:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016fe:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001700:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001702:	2201      	movs	r2, #1
 8001704:	7682      	strb	r2, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001706:	76c2      	strb	r2, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001708:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800170a:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800170c:	f000 fade 	bl	8001ccc <HAL_CAN_Init>
 8001710:	2800      	cmp	r0, #0
 8001712:	f040 8092 	bne.w	800183a <main+0x22e>
  sFilterConfig.FilterBank = 0; // Use first filter bank
 8001716:	2400      	movs	r4, #0
 8001718:	9409      	str	r4, [sp, #36]	; 0x24
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800171a:	940a      	str	r4, [sp, #40]	; 0x28
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800171c:	2501      	movs	r5, #1
 800171e:	950b      	str	r5, [sp, #44]	; 0x2c
  sFilterConfig.FilterIdHigh = ((ADDR_ECU_RX >> 13)& 0xFFFF);
 8001720:	9404      	str	r4, [sp, #16]
  sFilterConfig.FilterIdLow =  ((ADDR_ECU_RX << 3) & 0xFFF8);
 8001722:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001726:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8001728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172c:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterMaskIdLow = 0xFFF8;
 800172e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001732:	9307      	str	r3, [sp, #28]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001734:	9408      	str	r4, [sp, #32]
  sFilterConfig.FilterActivation = ENABLE;
 8001736:	950c      	str	r5, [sp, #48]	; 0x30
  sFilterConfig.SlaveStartFilterBank = 14; // Only necessary for dual CAN setups
 8001738:	230e      	movs	r3, #14
 800173a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_StatusTypeDef init_status = HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800173c:	4e67      	ldr	r6, [pc, #412]	; (80018dc <main+0x2d0>)
 800173e:	a904      	add	r1, sp, #16
 8001740:	4630      	mov	r0, r6
 8001742:	f000 fb52 	bl	8001dea <HAL_CAN_ConfigFilter>
  sFilterConfig.FilterBank = 1; // Use second filter bank
 8001746:	9509      	str	r5, [sp, #36]	; 0x24
  sFilterConfig.FilterMode = 	CAN_FILTERMODE_IDLIST;
 8001748:	950a      	str	r5, [sp, #40]	; 0x28
  sFilterConfig.FilterScale = 	CAN_FILTERSCALE_16BIT;
 800174a:	940b      	str	r4, [sp, #44]	; 0x2c
  sFilterConfig.FilterIdHigh = 		IVT_MSG_RESPONSE << 5;
 800174c:	f24a 2320 	movw	r3, #41504	; 0xa220
 8001750:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterIdLow =  		IVT_MSG_RESULT_I << 5;
 8001752:	f24a 4320 	movw	r3, #42016	; 0xa420
 8001756:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMaskIdHigh = 	IVT_MSG_RESULT_T << 5;
 8001758:	f24a 43a0 	movw	r3, #42144	; 0xa4a0
 800175c:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterMaskIdLow = 	IVT_MSG_RESULT_AS << 5;
 800175e:	f24a 43e0 	movw	r3, #42208	; 0xa4e0
 8001762:	9307      	str	r3, [sp, #28]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001764:	9508      	str	r5, [sp, #32]
  sFilterConfig.FilterActivation = ENABLE;
 8001766:	950c      	str	r5, [sp, #48]	; 0x30
  init_status |= HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001768:	a904      	add	r1, sp, #16
 800176a:	4630      	mov	r0, r6
 800176c:	f000 fb3d 	bl	8001dea <HAL_CAN_ConfigFilter>
  init_status |= HAL_CAN_Start(&hcan1); //start CAN
 8001770:	4630      	mov	r0, r6
 8001772:	f000 fbbd 	bl	8001ef0 <HAL_CAN_Start>
  hspi1.Instance = SPI1;
 8001776:	485b      	ldr	r0, [pc, #364]	; (80018e4 <main+0x2d8>)
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <main+0x2dc>)
 800177a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800177c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001780:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001782:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001784:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001788:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800178a:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178c:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001792:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001794:	2330      	movs	r3, #48	; 0x30
 8001796:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001798:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800179e:	2307      	movs	r3, #7
 80017a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017a2:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017a4:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a6:	f001 fe9c 	bl	80034e2 <HAL_SPI_Init>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d147      	bne.n	800183e <main+0x232>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ae:	2300      	movs	r3, #0
 80017b0:	9304      	str	r3, [sp, #16]
 80017b2:	9305      	str	r3, [sp, #20]
 80017b4:	9306      	str	r3, [sp, #24]
  htim6.Instance = TIM6;
 80017b6:	484d      	ldr	r0, [pc, #308]	; (80018ec <main+0x2e0>)
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <main+0x2e4>)
 80017ba:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 64000;
 80017bc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80017c0:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 100;
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017cc:	f002 f9cc 	bl	8003b68 <HAL_TIM_Base_Init>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d136      	bne.n	8001842 <main+0x236>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017da:	a904      	add	r1, sp, #16
 80017dc:	4843      	ldr	r0, [pc, #268]	; (80018ec <main+0x2e0>)
 80017de:	f002 f9f3 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d12f      	bne.n	8001846 <main+0x23a>
  HAL_TIM_Base_Start(&htim6);		// start timer6 for 10Hz flag
 80017e6:	4841      	ldr	r0, [pc, #260]	; (80018ec <main+0x2e0>)
 80017e8:	f002 f85a 	bl	80038a0 <HAL_TIM_Base_Start>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	2300      	movs	r3, #0
 80017ee:	9304      	str	r3, [sp, #16]
 80017f0:	9305      	str	r3, [sp, #20]
 80017f2:	9306      	str	r3, [sp, #24]
  htim7.Instance = TIM7;
 80017f4:	483f      	ldr	r0, [pc, #252]	; (80018f4 <main+0x2e8>)
 80017f6:	4a40      	ldr	r2, [pc, #256]	; (80018f8 <main+0x2ec>)
 80017f8:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 64000;
 80017fa:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80017fe:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 500;
 8001802:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001806:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800180a:	f002 f9ad 	bl	8003b68 <HAL_TIM_Base_Init>
 800180e:	b9e0      	cbnz	r0, 800184a <main+0x23e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001816:	a904      	add	r1, sp, #16
 8001818:	4836      	ldr	r0, [pc, #216]	; (80018f4 <main+0x2e8>)
 800181a:	f002 f9d5 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	b9b0      	cbnz	r0, 800184e <main+0x242>
  ISA_IVT_Init();
 8001820:	f7ff fa00 	bl	8000c24 <ISA_IVT_Init>
  set_relays(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fddd 	bl	80013e4 <set_relays>
  SDC_reset();
 800182a:	f7ff fe67 	bl	80014fc <SDC_reset>
    if ((TIM6->SR & TIM_SR_UIF) != 0) {
 800182e:	4c30      	ldr	r4, [pc, #192]	; (80018f0 <main+0x2e4>)
    	SerialMonitor(all_values, (uint8_t*)(&battery_values), sizeof(battery_values));
 8001830:	4e32      	ldr	r6, [pc, #200]	; (80018fc <main+0x2f0>)
    		User_LED_GPIO_Port->ODR ^= User_LED_Pin; // Toggle user LED if battery is ok
 8001832:	4f27      	ldr	r7, [pc, #156]	; (80018d0 <main+0x2c4>)
 8001834:	e025      	b.n	8001882 <main+0x276>
    Error_Handler();
 8001836:	f7ff fe92 	bl	800155e <Error_Handler>
    Error_Handler();
 800183a:	f7ff fe90 	bl	800155e <Error_Handler>
    Error_Handler();
 800183e:	f7ff fe8e 	bl	800155e <Error_Handler>
    Error_Handler();
 8001842:	f7ff fe8c 	bl	800155e <Error_Handler>
    Error_Handler();
 8001846:	f7ff fe8a 	bl	800155e <Error_Handler>
    Error_Handler();
 800184a:	f7ff fe88 	bl	800155e <Error_Handler>
    Error_Handler();
 800184e:	f7ff fe86 	bl	800155e <Error_Handler>
    		if((battery_values.status&STATUS_CHARGING) == STATUS_CHARGING){
 8001852:	7bb3      	ldrb	r3, [r6, #14]
 8001854:	f013 0f02 	tst.w	r3, #2
 8001858:	d004      	beq.n	8001864 <main+0x258>
				Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin<<16;	// low
 800185a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800185e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001862:	619a      	str	r2, [r3, #24]
    	send_data2ECU(GPIOA_Input);
 8001864:	b2a8      	uxth	r0, r5
 8001866:	f7ff f9a1 	bl	8000bac <send_data2ECU>
    	SerialMonitor(all_values, (uint8_t*)(&battery_values), sizeof(battery_values));
 800186a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800186e:	4631      	mov	r1, r6
 8001870:	20a3      	movs	r0, #163	; 0xa3
 8001872:	f000 f845 	bl	8001900 <SerialMonitor>
    	if(FIFO_ovf()){
 8001876:	f7ff f985 	bl	8000b84 <FIFO_ovf>
 800187a:	b110      	cbz	r0, 8001882 <main+0x276>
    		set_battery_error_flag(ERROR_CAN);
 800187c:	2020      	movs	r0, #32
 800187e:	f7ff fd17 	bl	80012b0 <set_battery_error_flag>
	GPIOA_Input = GPIOA->IDR;
 8001882:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001886:	691d      	ldr	r5, [r3, #16]
    if ((TIM6->SR & TIM_SR_UIF) != 0) {
 8001888:	6923      	ldr	r3, [r4, #16]
 800188a:	f013 0f01 	tst.w	r3, #1
 800188e:	d019      	beq.n	80018c4 <main+0x2b8>
        TIM6->SR &= ~TIM_SR_UIF;	// Clear the overflow flag
 8001890:	6923      	ldr	r3, [r4, #16]
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6123      	str	r3, [r4, #16]
        battery_reset_error_flags();
 8001898:	f7ff fcfe 	bl	8001298 <battery_reset_error_flags>
    	if(!check_battery()){
 800189c:	f7ff fdf2 	bl	8001484 <check_battery>
 80018a0:	b918      	cbnz	r0, 80018aa <main+0x29e>
    		User_LED_GPIO_Port->ODR ^= User_LED_Pin; // Toggle user LED if battery is ok
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f083 0308 	eor.w	r3, r3, #8
 80018a8:	617b      	str	r3, [r7, #20]
    	if(GPIOA_Input & Charger_Con_Pin){		// charger connected
 80018aa:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80018ae:	d0d0      	beq.n	8001852 <main+0x246>
    		if((battery_values.status&STATUS_CHARGING) == 0){
 80018b0:	7bb3      	ldrb	r3, [r6, #14]
 80018b2:	f013 0f02 	tst.w	r3, #2
 80018b6:	d0d5      	beq.n	8001864 <main+0x258>
    				Charge_EN_GPIO_Port->BSRR = Charge_EN_Pin;	// high
 80018b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	e7cf      	b.n	8001864 <main+0x258>
    	CAN_receive_packet();
 80018c4:	f7ff fa1c 	bl	8000d00 <CAN_receive_packet>
 80018c8:	e7db      	b.n	8001882 <main+0x276>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000400 	.word	0x48000400
 80018d4:	20000404 	.word	0x20000404
 80018d8:	40004400 	.word	0x40004400
 80018dc:	200002e0 	.word	0x200002e0
 80018e0:	40006400 	.word	0x40006400
 80018e4:	20000308 	.word	0x20000308
 80018e8:	40013000 	.word	0x40013000
 80018ec:	2000036c 	.word	0x2000036c
 80018f0:	40001000 	.word	0x40001000
 80018f4:	200003b8 	.word	0x200003b8
 80018f8:	40001400 	.word	0x40001400
 80018fc:	200000fc 	.word	0x200000fc

08001900 <SerialMonitor>:
		buffer[i*2] = buffer[i*2+1];
		buffer[i*2+1] = low_byte;
	}
}

void SerialMonitor(Serial_Commmand_type command, uint8_t* data, uint16_t size){
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	b082      	sub	sp, #8
	if((command&0xF0)==0xA0){
 8001904:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001908:	2ba0      	cmp	r3, #160	; 0xa0
 800190a:	d00c      	beq.n	8001926 <SerialMonitor+0x26>
		uint8_t stop[] = {0xFF, command|0xB0};
		HAL_UART_Transmit(&huart2, start, 2, 100);
		HAL_UART_Transmit(&huart2, data, size, 100);
		HAL_UART_Transmit(&huart2, stop, 2, 100);
	}else{
		uint8_t code[] = {0xFF, command};
 800190c:	23ff      	movs	r3, #255	; 0xff
 800190e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001912:	f88d 0005 	strb.w	r0, [sp, #5]
		HAL_UART_Transmit(&huart2, code, 2, 100);
 8001916:	2364      	movs	r3, #100	; 0x64
 8001918:	2202      	movs	r2, #2
 800191a:	a901      	add	r1, sp, #4
 800191c:	4812      	ldr	r0, [pc, #72]	; (8001968 <SerialMonitor+0x68>)
 800191e:	f002 fba7 	bl	8004070 <HAL_UART_Transmit>
	}
}
 8001922:	b002      	add	sp, #8
 8001924:	bd70      	pop	{r4, r5, r6, pc}
 8001926:	460c      	mov	r4, r1
 8001928:	4615      	mov	r5, r2
		uint8_t start[] = {0xFF, command};
 800192a:	23ff      	movs	r3, #255	; 0xff
 800192c:	f88d 3000 	strb.w	r3, [sp]
 8001930:	f88d 0001 	strb.w	r0, [sp, #1]
		uint8_t stop[] = {0xFF, command|0xB0};
 8001934:	f88d 3004 	strb.w	r3, [sp, #4]
 8001938:	f060 004f 	orn	r0, r0, #79	; 0x4f
 800193c:	f88d 0005 	strb.w	r0, [sp, #5]
		HAL_UART_Transmit(&huart2, start, 2, 100);
 8001940:	4e09      	ldr	r6, [pc, #36]	; (8001968 <SerialMonitor+0x68>)
 8001942:	2364      	movs	r3, #100	; 0x64
 8001944:	2202      	movs	r2, #2
 8001946:	4669      	mov	r1, sp
 8001948:	4630      	mov	r0, r6
 800194a:	f002 fb91 	bl	8004070 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, data, size, 100);
 800194e:	2364      	movs	r3, #100	; 0x64
 8001950:	462a      	mov	r2, r5
 8001952:	4621      	mov	r1, r4
 8001954:	4630      	mov	r0, r6
 8001956:	f002 fb8b 	bl	8004070 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, stop, 2, 100);
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2202      	movs	r2, #2
 800195e:	a901      	add	r1, sp, #4
 8001960:	4630      	mov	r0, r6
 8001962:	f002 fb85 	bl	8004070 <HAL_UART_Transmit>
 8001966:	e7dc      	b.n	8001922 <SerialMonitor+0x22>
 8001968:	20000404 	.word	0x20000404

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_MspInit+0x2c>)
 8001970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	661a      	str	r2, [r3, #96]	; 0x60
 8001978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800197a:	f002 0201 	and.w	r2, r2, #1
 800197e:	9200      	str	r2, [sp, #0]
 8001980:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001984:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001988:	659a      	str	r2, [r3, #88]	; 0x58
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001994:	b002      	add	sp, #8
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800199c:	b500      	push	{lr}
 800199e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	2300      	movs	r3, #0
 80019a2:	9303      	str	r3, [sp, #12]
 80019a4:	9304      	str	r3, [sp, #16]
 80019a6:	9305      	str	r3, [sp, #20]
 80019a8:	9306      	str	r3, [sp, #24]
 80019aa:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 80019ac:	6802      	ldr	r2, [r0, #0]
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_CAN_MspInit+0x64>)
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d002      	beq.n	80019ba <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019b4:	b009      	add	sp, #36	; 0x24
 80019b6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019ba:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80019be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019c4:	659a      	str	r2, [r3, #88]	; 0x58
 80019c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80019cc:	9201      	str	r2, [sp, #4]
 80019ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RXCAN_Pin|TXCAN_Pin;
 80019e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019f0:	2309      	movs	r3, #9
 80019f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	a903      	add	r1, sp, #12
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f000 fc3d 	bl	8002278 <HAL_GPIO_Init>
}
 80019fe:	e7d9      	b.n	80019b4 <HAL_CAN_MspInit+0x18>
 8001a00:	40006400 	.word	0x40006400

08001a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	9304      	str	r3, [sp, #16]
 8001a0e:	9305      	str	r3, [sp, #20]
 8001a10:	9306      	str	r3, [sp, #24]
 8001a12:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001a14:	6802      	ldr	r2, [r0, #0]
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_SPI_MspInit+0x78>)
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a1c:	b008      	add	sp, #32
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a20:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a2a:	661a      	str	r2, [r3, #96]	; 0x60
 8001a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a32:	9201      	str	r2, [sp, #4]
 8001a34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ISO_SPI_SCLK_Pin|ISO_SPI_MOSI_Pin;
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2602      	movs	r6, #2
 8001a4e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2503      	movs	r5, #3
 8001a52:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a54:	2405      	movs	r4, #5
 8001a56:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	a903      	add	r1, sp, #12
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f000 fc0b 	bl	8002278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ISO_SPI_MISO_Pin;
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(ISO_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001a70:	a903      	add	r1, sp, #12
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a76:	f000 fbff 	bl	8002278 <HAL_GPIO_Init>
}
 8001a7a:	e7cf      	b.n	8001a1c <HAL_SPI_MspInit+0x18>
 8001a7c:	40013000 	.word	0x40013000

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b500      	push	{lr}
 8001a82:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8001a84:	6803      	ldr	r3, [r0, #0]
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_TIM_Base_MspInit+0x54>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d005      	beq.n	8001a98 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_TIM_Base_MspInit+0x58>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a92:	b003      	add	sp, #12
 8001a94:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_TIM_Base_MspInit+0x5c>)
 8001a9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a9c:	f042 0210 	orr.w	r2, r2, #16
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	9b00      	ldr	r3, [sp, #0]
 8001aac:	e7f1      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_TIM_Base_MspInit+0x5c>)
 8001ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	2037      	movs	r0, #55	; 0x37
 8001ac8:	f000 fb7e 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001acc:	2037      	movs	r0, #55	; 0x37
 8001ace:	f000 fbb1 	bl	8002234 <HAL_NVIC_EnableIRQ>
}
 8001ad2:	e7de      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x12>
 8001ad4:	40001000 	.word	0x40001000
 8001ad8:	40001400 	.word	0x40001400
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	b09c      	sub	sp, #112	; 0x70
 8001ae4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	9117      	str	r1, [sp, #92]	; 0x5c
 8001aea:	9118      	str	r1, [sp, #96]	; 0x60
 8001aec:	9119      	str	r1, [sp, #100]	; 0x64
 8001aee:	911a      	str	r1, [sp, #104]	; 0x68
 8001af0:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af2:	2254      	movs	r2, #84	; 0x54
 8001af4:	a802      	add	r0, sp, #8
 8001af6:	f002 fbc9 	bl	800428c <memset>
  if(huart->Instance==USART2)
 8001afa:	6822      	ldr	r2, [r4, #0]
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b02:	b01c      	add	sp, #112	; 0x70
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0a:	a802      	add	r0, sp, #8
 8001b0c:	f001 fa5a 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d12e      	bne.n	8001b72 <HAL_UART_MspInit+0x92>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_UART_MspInit+0x9c>)
 8001b16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8001b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b20:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b24:	9200      	str	r2, [sp, #0]
 8001b26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2602      	movs	r6, #2
 8001b40:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2500      	movs	r5, #0
 8001b44:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2403      	movs	r4, #3
 8001b48:	941a      	str	r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	a917      	add	r1, sp, #92	; 0x5c
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f000 fb90 	bl	8002278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b5c:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	941a      	str	r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b64:	941b      	str	r4, [sp, #108]	; 0x6c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b66:	a917      	add	r1, sp, #92	; 0x5c
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6c:	f000 fb84 	bl	8002278 <HAL_GPIO_Init>
}
 8001b70:	e7c7      	b.n	8001b02 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001b72:	f7ff fcf4 	bl	800155e <Error_Handler>
 8001b76:	e7cd      	b.n	8001b14 <HAL_UART_MspInit+0x34>
 8001b78:	40004400 	.word	0x40004400
 8001b7c:	40021000 	.word	0x40021000

08001b80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler>

08001b82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler>

08001b84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler>

08001b86 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler>

08001b88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler>

08001b8a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b92:	f000 f875 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b96:	bd08      	pop	{r3, pc}

08001b98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM7_IRQHandler+0xc>)
 8001b9c:	f001 feb6 	bl	800390c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ba0:	bd08      	pop	{r3, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200003b8 	.word	0x200003b8

08001ba8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba8:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <SystemInit+0x10>)
 8001baa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff fff2 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f002 fb1d 	bl	8004228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff fd0d 	bl	800160c <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c00:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8001c04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c08:	2000048c 	.word	0x2000048c

08001c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_IRQHandler>
	...

08001c10 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_InitTick+0x44>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b90b      	cbnz	r3, 8001c1a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001c18:	4770      	bx	lr
{
 8001c1a:	b510      	push	{r4, lr}
 8001c1c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_InitTick+0x48>)
 8001c28:	6810      	ldr	r0, [r2, #0]
 8001c2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c2e:	f000 fb0f 	bl	8002250 <HAL_SYSTICK_Config>
 8001c32:	b968      	cbnz	r0, 8001c50 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c34:	2c0f      	cmp	r4, #15
 8001c36:	d901      	bls.n	8001c3c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001c38:	2001      	movs	r0, #1
 8001c3a:	e00a      	b.n	8001c52 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4621      	mov	r1, r4
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 fac0 	bl	80021c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_InitTick+0x4c>)
 8001c4a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001c50:	2001      	movs	r0, #1
}
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <HAL_Init>:
{
 8001c60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 fa9e 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff ffd1 	bl	8001c10 <HAL_InitTick>
 8001c6e:	b110      	cbz	r0, 8001c76 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001c70:	2401      	movs	r4, #1
}
 8001c72:	4620      	mov	r0, r4
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	4604      	mov	r4, r0
    HAL_MspInit();
 8001c78:	f7ff fe78 	bl	800196c <HAL_MspInit>
 8001c7c:	e7f9      	b.n	8001c72 <HAL_Init+0x12>
	...

08001c80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_IncTick+0x10>)
 8001c82:	6811      	ldr	r1, [r2, #0]
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_IncTick+0x14>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	440b      	add	r3, r1
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000488 	.word	0x20000488
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <HAL_GetTick+0x8>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000488 	.word	0x20000488

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff6 	bl	8001c98 <HAL_GetTick>
 8001cac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001cb2:	d002      	beq.n	8001cba <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_Delay+0x24>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	f7ff ffed 	bl	8001c98 <HAL_GetTick>
 8001cbe:	1b40      	subs	r0, r0, r5
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d3fa      	bcc.n	8001cba <HAL_Delay+0x16>
  {
  }
}
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	f000 808a 	beq.w	8001de6 <HAL_CAN_Init+0x11a>
{
 8001cd2:	b538      	push	{r3, r4, r5, lr}
 8001cd4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cd6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001cda:	b1d3      	cbz	r3, 8001d12 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce6:	f7ff ffd7 	bl	8001c98 <HAL_GetTick>
 8001cea:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	f012 0f01 	tst.w	r2, #1
 8001cf4:	d110      	bne.n	8001d18 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf6:	f7ff ffcf 	bl	8001c98 <HAL_GetTick>
 8001cfa:	1b40      	subs	r0, r0, r5
 8001cfc:	280a      	cmp	r0, #10
 8001cfe:	d9f5      	bls.n	8001cec <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d06:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d08:	2305      	movs	r3, #5
 8001d0a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001d0e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001d10:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001d12:	f7ff fe43 	bl	800199c <HAL_CAN_MspInit>
 8001d16:	e7e1      	b.n	8001cdc <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f022 0202 	bic.w	r2, r2, #2
 8001d1e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001d20:	f7ff ffba 	bl	8001c98 <HAL_GetTick>
 8001d24:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	f012 0f02 	tst.w	r2, #2
 8001d2e:	d00d      	beq.n	8001d4c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff ffb2 	bl	8001c98 <HAL_GetTick>
 8001d34:	1b40      	subs	r0, r0, r5
 8001d36:	280a      	cmp	r0, #10
 8001d38:	d9f5      	bls.n	8001d26 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d42:	2305      	movs	r3, #5
 8001d44:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
 8001d4a:	e7e1      	b.n	8001d10 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d4c:	7e22      	ldrb	r2, [r4, #24]
 8001d4e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	bf0c      	ite	eq
 8001d54:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d58:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001d5c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d5e:	7e63      	ldrb	r3, [r4, #25]
 8001d60:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	bf0c      	ite	eq
 8001d68:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d6c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8001d70:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d72:	7ea3      	ldrb	r3, [r4, #26]
 8001d74:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	bf0c      	ite	eq
 8001d7c:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d80:	f023 0320 	bicne.w	r3, r3, #32
 8001d84:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d86:	7ee3      	ldrb	r3, [r4, #27]
 8001d88:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	bf0c      	ite	eq
 8001d90:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d94:	f043 0310 	orrne.w	r3, r3, #16
 8001d98:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d9a:	7f23      	ldrb	r3, [r4, #28]
 8001d9c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	bf0c      	ite	eq
 8001da4:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001da8:	f023 0308 	bicne.w	r3, r3, #8
 8001dac:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dae:	7f63      	ldrb	r3, [r4, #29]
 8001db0:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	bf0c      	ite	eq
 8001db8:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dbc:	f023 0304 	bicne.w	r3, r3, #4
 8001dc0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dc2:	6821      	ldr	r1, [r4, #0]
 8001dc4:	68a3      	ldr	r3, [r4, #8]
 8001dc6:	68e2      	ldr	r2, [r4, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	6922      	ldr	r2, [r4, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	6962      	ldr	r2, [r4, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	6862      	ldr	r2, [r4, #4]
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dda:	2000      	movs	r0, #0
 8001ddc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001de4:	e794      	b.n	8001d10 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
}
 8001de8:	4770      	bx	lr

08001dea <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dea:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d905      	bls.n	8001e02 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
  }
}
 8001e00:	4770      	bx	lr
{
 8001e02:	b430      	push	{r4, r5}
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e04:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e12:	694a      	ldr	r2, [r1, #20]
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e1e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8001e22:	ea6f 0c02 	mvn.w	ip, r2
 8001e26:	ea20 0002 	bic.w	r0, r0, r2
 8001e2a:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e2e:	69c8      	ldr	r0, [r1, #28]
 8001e30:	b9b0      	cbnz	r0, 8001e60 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e32:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8001e36:	ea0c 0000 	and.w	r0, ip, r0
 8001e3a:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e3e:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e40:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e42:	68cd      	ldr	r5, [r1, #12]
 8001e44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e48:	3048      	adds	r0, #72	; 0x48
 8001e4a:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e4e:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e50:	880c      	ldrh	r4, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e52:	688d      	ldr	r5, [r1, #8]
 8001e54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e58:	3048      	adds	r0, #72	; 0x48
 8001e5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e5e:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e60:	69c8      	ldr	r0, [r1, #28]
 8001e62:	2801      	cmp	r0, #1
 8001e64:	d01b      	beq.n	8001e9e <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e66:	6988      	ldr	r0, [r1, #24]
 8001e68:	bb80      	cbnz	r0, 8001ecc <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e6a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001e6e:	ea0c 0000 	and.w	r0, ip, r0
 8001e72:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e76:	6908      	ldr	r0, [r1, #16]
 8001e78:	bb70      	cbnz	r0, 8001ed8 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e7a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001e7e:	ea0c 0000 	and.w	r0, ip, r0
 8001e82:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e86:	6a09      	ldr	r1, [r1, #32]
 8001e88:	2901      	cmp	r1, #1
 8001e8a:	d02b      	beq.n	8001ee4 <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8001e98:	2000      	movs	r0, #0
}
 8001e9a:	bc30      	pop	{r4, r5}
 8001e9c:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e9e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8001ea2:	4310      	orrs	r0, r2
 8001ea4:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ea8:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001eaa:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eac:	680d      	ldr	r5, [r1, #0]
 8001eae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb2:	3048      	adds	r0, #72	; 0x48
 8001eb4:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eb8:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001eba:	898c      	ldrh	r4, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ebc:	688d      	ldr	r5, [r1, #8]
 8001ebe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ec2:	3048      	adds	r0, #72	; 0x48
 8001ec4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001ec8:	6044      	str	r4, [r0, #4]
 8001eca:	e7cc      	b.n	8001e66 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ecc:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001ed0:	4310      	orrs	r0, r2
 8001ed2:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8001ed6:	e7ce      	b.n	8001e76 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ed8:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001edc:	4310      	orrs	r0, r2
 8001ede:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8001ee2:	e7d0      	b.n	8001e86 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ee4:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001eee:	e7cd      	b.n	8001e8c <HAL_CAN_ConfigFilter+0xa2>

08001ef0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ef4:	f890 5020 	ldrb.w	r5, [r0, #32]
 8001ef8:	b2ed      	uxtb	r5, r5
 8001efa:	2d01      	cmp	r5, #1
 8001efc:	d006      	beq.n	8001f0c <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001efe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f04:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001f06:	2501      	movs	r5, #1
  }
}
 8001f08:	4628      	mov	r0, r5
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f12:	6802      	ldr	r2, [r0, #0]
 8001f14:	6813      	ldr	r3, [r2, #0]
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f1c:	f7ff febc 	bl	8001c98 <HAL_GetTick>
 8001f20:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f013 0f01 	tst.w	r3, #1
 8001f2a:	d00c      	beq.n	8001f46 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f2c:	f7ff feb4 	bl	8001c98 <HAL_GetTick>
 8001f30:	1b83      	subs	r3, r0, r6
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d9f5      	bls.n	8001f22 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f3e:	2305      	movs	r3, #5
 8001f40:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001f44:	e7e0      	b.n	8001f08 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f46:	2500      	movs	r5, #0
 8001f48:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8001f4a:	e7dd      	b.n	8001f08 <HAL_CAN_Start+0x18>

08001f4c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f4e:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f52:	6804      	ldr	r4, [r0, #0]
 8001f54:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001f5a:	fa5f fc8c 	uxtb.w	ip, ip
 8001f5e:	f1bc 0f01 	cmp.w	ip, #1
 8001f62:	d864      	bhi.n	800202e <HAL_CAN_AddTxMessage+0xe2>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f64:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001f68:	d05b      	beq.n	8002022 <HAL_CAN_AddTxMessage+0xd6>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f6a:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f6e:	2401      	movs	r4, #1
 8001f70:	fa04 f40c 	lsl.w	r4, r4, ip
 8001f74:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f76:	688b      	ldr	r3, [r1, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d13b      	bne.n	8001ff4 <HAL_CAN_AddTxMessage+0xa8>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f7c:	6804      	ldr	r4, [r0, #0]
 8001f7e:	680d      	ldr	r5, [r1, #0]
 8001f80:	68cb      	ldr	r3, [r1, #12]
 8001f82:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8001f86:	f10c 0318 	add.w	r3, ip, #24
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	690c      	ldr	r4, [r1, #16]
 8001f92:	f10c 0e18 	add.w	lr, ip, #24
 8001f96:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8001f9a:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f9c:	7d0b      	ldrb	r3, [r1, #20]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d035      	beq.n	800200e <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fa2:	6801      	ldr	r1, [r0, #0]
 8001fa4:	79d4      	ldrb	r4, [r2, #7]
 8001fa6:	7993      	ldrb	r3, [r2, #6]
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001fae:	7914      	ldrb	r4, [r2, #4]
 8001fb0:	4323      	orrs	r3, r4
 8001fb2:	7954      	ldrb	r4, [r2, #5]
 8001fb4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001fb8:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8001fbc:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fc0:	6801      	ldr	r1, [r0, #0]
 8001fc2:	78d4      	ldrb	r4, [r2, #3]
 8001fc4:	7893      	ldrb	r3, [r2, #2]
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001fcc:	7814      	ldrb	r4, [r2, #0]
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	7852      	ldrb	r2, [r2, #1]
 8001fd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fd6:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8001fda:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fde:	6803      	ldr	r3, [r0, #0]
 8001fe0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8001fe4:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	e021      	b.n	8002038 <HAL_CAN_AddTxMessage+0xec>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ff4:	6804      	ldr	r4, [r0, #0]
 8001ff6:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001ff8:	68ce      	ldr	r6, [r1, #12]
 8001ffa:	4333      	orrs	r3, r6
 8001ffc:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002000:	f10c 0e18 	add.w	lr, ip, #24
 8002004:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8002008:	f844 300e 	str.w	r3, [r4, lr]
 800200c:	e7bf      	b.n	8001f8e <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8002014:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8002018:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800201c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 8002020:	e7bf      	b.n	8001fa2 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002022:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002028:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 800202a:	2001      	movs	r0, #1
 800202c:	e004      	b.n	8002038 <HAL_CAN_AddTxMessage+0xec>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800202e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002036:	2001      	movs	r0, #1
  }
}
 8002038:	bd70      	pop	{r4, r5, r6, pc}

0800203a <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800203a:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800203e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002042:	fa5f fc8c 	uxtb.w	ip, ip
 8002046:	f1bc 0f01 	cmp.w	ip, #1
 800204a:	f200 8092 	bhi.w	8002172 <HAL_CAN_GetRxMessage+0x138>
{
 800204e:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002050:	b959      	cbnz	r1, 800206a <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002052:	6804      	ldr	r4, [r0, #0]
 8002054:	68e4      	ldr	r4, [r4, #12]
 8002056:	f014 0f03 	tst.w	r4, #3
 800205a:	d111      	bne.n	8002080 <HAL_CAN_GetRxMessage+0x46>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800205c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800205e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002062:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8002064:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8002066:	bc30      	pop	{r4, r5}
 8002068:	4770      	bx	lr
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800206a:	6804      	ldr	r4, [r0, #0]
 800206c:	6924      	ldr	r4, [r4, #16]
 800206e:	f014 0f03 	tst.w	r4, #3
 8002072:	d105      	bne.n	8002080 <HAL_CAN_GetRxMessage+0x46>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002074:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e7f2      	b.n	8002066 <HAL_CAN_GetRxMessage+0x2c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002080:	f101 041b 	add.w	r4, r1, #27
 8002084:	0124      	lsls	r4, r4, #4
 8002086:	6805      	ldr	r5, [r0, #0]
 8002088:	592c      	ldr	r4, [r5, r4]
 800208a:	f004 0404 	and.w	r4, r4, #4
 800208e:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002090:	2c00      	cmp	r4, #0
 8002092:	d15f      	bne.n	8002154 <HAL_CAN_GetRxMessage+0x11a>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002094:	f101 041b 	add.w	r4, r1, #27
 8002098:	0124      	lsls	r4, r4, #4
 800209a:	6805      	ldr	r5, [r0, #0]
 800209c:	592c      	ldr	r4, [r5, r4]
 800209e:	0d64      	lsrs	r4, r4, #21
 80020a0:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020a2:	6804      	ldr	r4, [r0, #0]
 80020a4:	f101 0c1b 	add.w	ip, r1, #27
 80020a8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80020ac:	f854 400c 	ldr.w	r4, [r4, ip]
 80020b0:	f004 0402 	and.w	r4, r4, #2
 80020b4:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020b6:	6804      	ldr	r4, [r0, #0]
 80020b8:	4464      	add	r4, ip
 80020ba:	6864      	ldr	r4, [r4, #4]
 80020bc:	f004 040f 	and.w	r4, r4, #15
 80020c0:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020c2:	6804      	ldr	r4, [r0, #0]
 80020c4:	4464      	add	r4, ip
 80020c6:	6864      	ldr	r4, [r4, #4]
 80020c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80020cc:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020ce:	6804      	ldr	r4, [r0, #0]
 80020d0:	4464      	add	r4, ip
 80020d2:	6864      	ldr	r4, [r4, #4]
 80020d4:	0c24      	lsrs	r4, r4, #16
 80020d6:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020de:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80020e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020e4:	6802      	ldr	r2, [r0, #0]
 80020e6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020ea:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80020ee:	0a12      	lsrs	r2, r2, #8
 80020f0:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020f2:	6802      	ldr	r2, [r0, #0]
 80020f4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020f8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80020fc:	0c12      	lsrs	r2, r2, #16
 80020fe:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002100:	6802      	ldr	r2, [r0, #0]
 8002102:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002106:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800210a:	0e12      	lsrs	r2, r2, #24
 800210c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800210e:	6802      	ldr	r2, [r0, #0]
 8002110:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002114:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002118:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800211a:	6802      	ldr	r2, [r0, #0]
 800211c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002120:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002124:	0a12      	lsrs	r2, r2, #8
 8002126:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002128:	6802      	ldr	r2, [r0, #0]
 800212a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800212e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002132:	0c12      	lsrs	r2, r2, #16
 8002134:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002136:	6802      	ldr	r2, [r0, #0]
 8002138:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800213c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002140:	0e12      	lsrs	r2, r2, #24
 8002142:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002144:	b971      	cbnz	r1, 8002164 <HAL_CAN_GetRxMessage+0x12a>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002146:	6802      	ldr	r2, [r0, #0]
 8002148:	68d3      	ldr	r3, [r2, #12]
 800214a:	f043 0320 	orr.w	r3, r3, #32
 800214e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002150:	2000      	movs	r0, #0
 8002152:	e788      	b.n	8002066 <HAL_CAN_GetRxMessage+0x2c>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002154:	f101 041b 	add.w	r4, r1, #27
 8002158:	0124      	lsls	r4, r4, #4
 800215a:	6805      	ldr	r5, [r0, #0]
 800215c:	592c      	ldr	r4, [r5, r4]
 800215e:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002160:	6054      	str	r4, [r2, #4]
 8002162:	e79e      	b.n	80020a2 <HAL_CAN_GetRxMessage+0x68>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002164:	6802      	ldr	r2, [r0, #0]
 8002166:	6913      	ldr	r3, [r2, #16]
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 800216e:	2000      	movs	r0, #0
 8002170:	e779      	b.n	8002066 <HAL_CAN_GetRxMessage+0x2c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002172:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
}
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 800217e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002182:	3b01      	subs	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d901      	bls.n	800218e <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 800218a:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 800218c:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 800218e:	b921      	cbnz	r1, 800219a <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	68d8      	ldr	r0, [r3, #12]
 8002194:	f000 0003 	and.w	r0, r0, #3
 8002198:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800219a:	6803      	ldr	r3, [r0, #0]
 800219c:	6918      	ldr	r0, [r3, #16]
 800219e:	f000 0003 	and.w	r0, r0, #3
 80021a2:	4770      	bx	lr

080021a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4907      	ldr	r1, [pc, #28]	; (80021c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021a6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	0203      	lsls	r3, r0, #8
 80021aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021b2:	0412      	lsls	r2, r2, #16
 80021b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_NVIC_SetPriority+0x64>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d2:	f1c3 0c07 	rsb	ip, r3, #7
 80021d6:	f1bc 0f04 	cmp.w	ip, #4
 80021da:	bf28      	it	cs
 80021dc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e0:	f103 0e04 	add.w	lr, r3, #4
 80021e4:	f1be 0f06 	cmp.w	lr, #6
 80021e8:	bf8c      	ite	hi
 80021ea:	3b03      	subhi	r3, #3
 80021ec:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ee:	f04f 3eff 	mov.w	lr, #4294967295
 80021f2:	fa0e fc0c 	lsl.w	ip, lr, ip
 80021f6:	ea21 010c 	bic.w	r1, r1, ip
 80021fa:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	fa0e f303 	lsl.w	r3, lr, r3
 8002200:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002206:	2800      	cmp	r0, #0
 8002208:	db09      	blt.n	800221e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	0109      	lsls	r1, r1, #4
 800220c:	b2c9      	uxtb	r1, r1
 800220e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002212:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002216:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800221a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	f000 000f 	and.w	r0, r0, #15
 8002222:	0109      	lsls	r1, r1, #4
 8002224:	b2c9      	uxtb	r1, r1
 8002226:	4b02      	ldr	r3, [pc, #8]	; (8002230 <HAL_NVIC_SetPriority+0x68>)
 8002228:	5419      	strb	r1, [r3, r0]
 800222a:	e7f6      	b.n	800221a <HAL_NVIC_SetPriority+0x52>
 800222c:	e000ed00 	.word	0xe000ed00
 8002230:	e000ed14 	.word	0xe000ed14

08002234 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002234:	2800      	cmp	r0, #0
 8002236:	db08      	blt.n	800224a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002238:	0942      	lsrs	r2, r0, #5
 800223a:	f000 001f 	and.w	r0, r0, #31
 800223e:	2301      	movs	r3, #1
 8002240:	fa03 f000 	lsl.w	r0, r3, r0
 8002244:	4b01      	ldr	r3, [pc, #4]	; (800224c <HAL_NVIC_EnableIRQ+0x18>)
 8002246:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100

08002250 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	3801      	subs	r0, #1
 8002252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002256:	d20b      	bcs.n	8002270 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002258:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800225c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_SYSTICK_Config+0x24>)
 8002260:	21f0      	movs	r1, #240	; 0xf0
 8002262:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002266:	2000      	movs	r0, #0
 8002268:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	2207      	movs	r2, #7
 800226c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002270:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002278:	680b      	ldr	r3, [r1, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80c3 	beq.w	8002406 <HAL_GPIO_Init+0x18e>
{
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002286:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 800228a:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800228c:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800228e:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002292:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002296:	4c5c      	ldr	r4, [pc, #368]	; (8002408 <HAL_GPIO_Init+0x190>)
 8002298:	e048      	b.n	800232c <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR;
 800229a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229c:	fa0e fa0c 	lsl.w	sl, lr, ip
 80022a0:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a4:	68cb      	ldr	r3, [r1, #12]
 80022a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80022aa:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80022ae:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80022b0:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b2:	ea23 0a07 	bic.w	sl, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b6:	684b      	ldr	r3, [r1, #4]
 80022b8:	f3c3 1700 	ubfx	r7, r3, #4, #1
 80022bc:	4097      	lsls	r7, r2
 80022be:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80022c2:	6047      	str	r7, [r0, #4]
 80022c4:	e03d      	b.n	8002342 <HAL_GPIO_Init+0xca>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022c6:	2700      	movs	r7, #0
 80022c8:	fa07 f70b 	lsl.w	r7, r7, fp
 80022cc:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d0:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 80022d2:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 80022d4:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d8:	684e      	ldr	r6, [r1, #4]
 80022da:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80022de:	bf0c      	ite	eq
 80022e0:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80022e2:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 80022e6:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 80022e8:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ea:	684e      	ldr	r6, [r1, #4]
 80022ec:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80022f0:	bf0c      	ite	eq
 80022f2:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80022f4:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 80022f8:	60e3      	str	r3, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022fa:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022fc:	684e      	ldr	r6, [r1, #4]
 80022fe:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002302:	bf0c      	ite	eq
 8002304:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8002306:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 800230a:	6063      	str	r3, [r4, #4]

        temp = EXTI->IMR1;
 800230c:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800230e:	684e      	ldr	r6, [r1, #4]
 8002310:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002314:	bf0c      	ite	eq
 8002316:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8002318:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 800231c:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 800231e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002320:	680b      	ldr	r3, [r1, #0]
 8002322:	f10c 0c02 	add.w	ip, ip, #2
 8002326:	fa33 f602 	lsrs.w	r6, r3, r2
 800232a:	d069      	beq.n	8002400 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8002330:	ea17 0903 	ands.w	r9, r7, r3
 8002334:	d0f3      	beq.n	800231e <HAL_GPIO_Init+0xa6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002336:	684b      	ldr	r3, [r1, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	3b01      	subs	r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d9ab      	bls.n	800229a <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002342:	684b      	ldr	r3, [r1, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d020      	beq.n	800238e <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 800234c:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234e:	fa0e f70c 	lsl.w	r7, lr, ip
 8002352:	ea23 0707 	bic.w	r7, r3, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002356:	688b      	ldr	r3, [r1, #8]
 8002358:	fa03 f30c 	lsl.w	r3, r3, ip
 800235c:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 800235e:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002360:	684b      	ldr	r3, [r1, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d111      	bne.n	800238e <HAL_GPIO_Init+0x116>
        temp = GPIOx->AFR[position >> 3u];
 800236a:	08d7      	lsrs	r7, r2, #3
 800236c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002370:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002372:	f002 0b07 	and.w	fp, r2, #7
 8002376:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800237a:	fa08 fa0b 	lsl.w	sl, r8, fp
 800237e:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002382:	690b      	ldr	r3, [r1, #16]
 8002384:	fa03 f30b 	lsl.w	r3, r3, fp
 8002388:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 800238c:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 800238e:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002390:	fa0e f70c 	lsl.w	r7, lr, ip
 8002394:	ea23 0707 	bic.w	r7, r3, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002398:	684b      	ldr	r3, [r1, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	fa03 f30c 	lsl.w	r3, r3, ip
 80023a2:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80023a4:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a6:	684b      	ldr	r3, [r1, #4]
 80023a8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80023ac:	d0b7      	beq.n	800231e <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4e17      	ldr	r6, [pc, #92]	; (800240c <HAL_GPIO_Init+0x194>)
 80023b0:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6633      	str	r3, [r6, #96]	; 0x60
 80023b8:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80023c2:	f022 0303 	bic.w	r3, r2, #3
 80023c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023ce:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023d0:	f002 0b03 	and.w	fp, r2, #3
 80023d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80023d8:	fa08 fa0b 	lsl.w	sl, r8, fp
 80023dc:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80023e4:	f43f af6f 	beq.w	80022c6 <HAL_GPIO_Init+0x4e>
 80023e8:	4e09      	ldr	r6, [pc, #36]	; (8002410 <HAL_GPIO_Init+0x198>)
 80023ea:	42b0      	cmp	r0, r6
 80023ec:	d006      	beq.n	80023fc <HAL_GPIO_Init+0x184>
 80023ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023f2:	42b0      	cmp	r0, r6
 80023f4:	bf0c      	ite	eq
 80023f6:	2702      	moveq	r7, #2
 80023f8:	2707      	movne	r7, #7
 80023fa:	e765      	b.n	80022c8 <HAL_GPIO_Init+0x50>
 80023fc:	462f      	mov	r7, r5
 80023fe:	e763      	b.n	80022c8 <HAL_GPIO_Init+0x50>
  }
}
 8002400:	b003      	add	sp, #12
 8002402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002406:	4770      	bx	lr
 8002408:	40010400 	.word	0x40010400
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400

08002414 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	b10a      	cbz	r2, 800241a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	6181      	str	r1, [r0, #24]
 8002418:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800241c:	4770      	bx	lr
	...

08002420 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	4770      	bx	lr
 800242c:	40007000 	.word	0x40007000

08002430 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <HAL_PWREx_GetVoltageRange+0xc>)
 8002432:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002434:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40007000 	.word	0x40007000

08002440 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002440:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002444:	d00f      	beq.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	d036      	beq.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x82>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800245c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002460:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002462:	2000      	movs	r0, #0
 8002464:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800246e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002472:	d024      	beq.n	80024be <HAL_PWREx_ControlVoltageScaling+0x7e>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800247c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002480:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2132      	movs	r1, #50	; 0x32
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4910      	ldr	r1, [pc, #64]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800248e:	fba1 1303 	umull	r1, r3, r1, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002496:	6952      	ldr	r2, [r2, #20]
 8002498:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800249c:	d007      	beq.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
        wait_loop_index--;
 80024a0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a2:	694a      	ldr	r2, [r1, #20]
 80024a4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024a8:	d001      	beq.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f8      	bne.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80024b0:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80024b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024b6:	bf0c      	ite	eq
 80024b8:	2000      	moveq	r0, #0
 80024ba:	2003      	movne	r0, #3
 80024bc:	4770      	bx	lr
  return HAL_OK;
 80024be:	2000      	movs	r0, #0
 80024c0:	4770      	bx	lr
 80024c2:	2000      	movs	r0, #0
}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000
 80024cc:	20000004 	.word	0x20000004
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d4:	b530      	push	{r4, r5, lr}
 80024d6:	b083      	sub	sp, #12
 80024d8:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80024e2:	d00c      	beq.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024e4:	f7ff ffa4 	bl	8002430 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80024ec:	d018      	beq.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ee:	2c80      	cmp	r4, #128	; 0x80
 80024f0:	d81f      	bhi.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024f2:	d02d      	beq.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024f4:	2c70      	cmp	r4, #112	; 0x70
 80024f6:	bf14      	ite	ne
 80024f8:	2400      	movne	r4, #0
 80024fa:	2401      	moveq	r4, #1
 80024fc:	e01a      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4d15      	ldr	r5, [pc, #84]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002500:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	65ab      	str	r3, [r5, #88]	; 0x58
 8002508:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002512:	f7ff ff8d 	bl	8002430 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	65ab      	str	r3, [r5, #88]	; 0x58
 800251e:	e7e3      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002520:	2c80      	cmp	r4, #128	; 0x80
 8002522:	d904      	bls.n	800252e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002524:	2ca0      	cmp	r4, #160	; 0xa0
 8002526:	bf8c      	ite	hi
 8002528:	2402      	movhi	r4, #2
 800252a:	2401      	movls	r4, #1
 800252c:	e002      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800252e:	2400      	movs	r4, #0
 8002530:	e000      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002532:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002534:	4908      	ldr	r1, [pc, #32]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002536:	680b      	ldr	r3, [r1, #0]
 8002538:	f023 0307 	bic.w	r3, r3, #7
 800253c:	4323      	orrs	r3, r4
 800253e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002540:	6808      	ldr	r0, [r1, #0]
 8002542:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002546:	1b00      	subs	r0, r0, r4
 8002548:	bf18      	it	ne
 800254a:	2001      	movne	r0, #1
 800254c:	b003      	add	sp, #12
 800254e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002550:	2402      	movs	r4, #2
 8002552:	e7ef      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x60>
 8002554:	40021000 	.word	0x40021000
 8002558:	40022000 	.word	0x40022000

0800255c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255c:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800255e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002560:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002562:	f013 030c 	ands.w	r3, r3, #12
 8002566:	d00e      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x2a>
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d006      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800256c:	2b04      	cmp	r3, #4
 800256e:	d03f      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x94>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002570:	2b08      	cmp	r3, #8
 8002572:	4821      	ldr	r0, [pc, #132]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002574:	bf18      	it	ne
 8002576:	2000      	movne	r0, #0
 8002578:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800257a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800257e:	2a01      	cmp	r2, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002582:	2000      	movs	r0, #0
 8002584:	e012      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800258e:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002590:	bf07      	ittee	eq
 8002592:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 8002596:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800259a:	6812      	ldrne	r2, [r2, #0]
 800259c:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80025a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a6:	b323      	cbz	r3, 80025f2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d11f      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d017      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x8c>
 80025b8:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	bf08      	it	eq
 80025be:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	68ca      	ldr	r2, [r1, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c4:	68cb      	ldr	r3, [r1, #12]
 80025c6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ce:	68c8      	ldr	r0, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80025d4:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025d6:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025da:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80025de:	3001      	adds	r0, #1
 80025e0:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80025e2:	fbb3 f0f0 	udiv	r0, r3, r0
 80025e6:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025ea:	e7e9      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x64>
 80025ec:	2000      	movs	r0, #0
  return sysclockfreq;
 80025ee:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80025f0:	4803      	ldr	r0, [pc, #12]	; (8002600 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80025f2:	4770      	bx	lr
 80025f4:	40021000 	.word	0x40021000
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	0800435c 	.word	0x0800435c
 8002600:	00f42400 	.word	0x00f42400

08002604 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002604:	2800      	cmp	r0, #0
 8002606:	f000 8324 	beq.w	8002c52 <HAL_RCC_OscConfig+0x64e>
{
 800260a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b98      	ldr	r3, [pc, #608]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002614:	689d      	ldr	r5, [r3, #8]
 8002616:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261a:	68de      	ldr	r6, [r3, #12]
 800261c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	f013 0f10 	tst.w	r3, #16
 8002626:	d05f      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002628:	b1f5      	cbz	r5, 8002668 <HAL_RCC_OscConfig+0x64>
 800262a:	2d0c      	cmp	r5, #12
 800262c:	d01a      	beq.n	8002664 <HAL_RCC_OscConfig+0x60>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800262e:	69a3      	ldr	r3, [r4, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ba 	beq.w	80027aa <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002636:	4a8f      	ldr	r2, [pc, #572]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002640:	f7ff fb2a 	bl	8001c98 <HAL_GetTick>
 8002644:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002646:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8002874 <HAL_RCC_OscConfig+0x270>
 800264a:	f8d8 3000 	ldr.w	r3, [r8]
 800264e:	f013 0f02 	tst.w	r3, #2
 8002652:	f040 8097 	bne.w	8002784 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002656:	f7ff fb1f 	bl	8001c98 <HAL_GetTick>
 800265a:	1bc0      	subs	r0, r0, r7
 800265c:	2802      	cmp	r0, #2
 800265e:	d9f4      	bls.n	800264a <HAL_RCC_OscConfig+0x46>
            return HAL_TIMEOUT;
 8002660:	2003      	movs	r0, #3
 8002662:	e301      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002664:	2e01      	cmp	r6, #1
 8002666:	d1e2      	bne.n	800262e <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002668:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f013 0f02 	tst.w	r3, #2
 8002670:	d003      	beq.n	800267a <HAL_RCC_OscConfig+0x76>
 8002672:	69a3      	ldr	r3, [r4, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 82ee 	beq.w	8002c56 <HAL_RCC_OscConfig+0x652>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800267a:	6a20      	ldr	r0, [r4, #32]
 800267c:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f013 0f08 	tst.w	r3, #8
 8002684:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002686:	bf12      	itee	ne
 8002688:	681b      	ldrne	r3, [r3, #0]
 800268a:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800268e:	091b      	lsreq	r3, r3, #4
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002694:	4298      	cmp	r0, r3
 8002696:	d856      	bhi.n	8002746 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002698:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f042 0208 	orr.w	r2, r2, #8
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026a8:	6a21      	ldr	r1, [r4, #32]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	69e1      	ldr	r1, [r4, #28]
 80026b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80026b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026ba:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026bc:	2d00      	cmp	r5, #0
 80026be:	d05a      	beq.n	8002776 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c0:	f7ff ff4c 	bl	800255c <HAL_RCC_GetSysClockFreq>
 80026c4:	4b6b      	ldr	r3, [pc, #428]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026cc:	4a6a      	ldr	r2, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	40d8      	lsrs	r0, r3
 80026d6:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x278>)
 80026d8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80026da:	4b69      	ldr	r3, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f7ff fa97 	bl	8001c10 <HAL_InitTick>
        if(status != HAL_OK)
 80026e2:	2800      	cmp	r0, #0
 80026e4:	f040 82c0 	bne.w	8002c68 <HAL_RCC_OscConfig+0x664>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	f013 0f01 	tst.w	r3, #1
 80026ee:	d07d      	beq.n	80027ec <HAL_RCC_OscConfig+0x1e8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026f0:	2d08      	cmp	r5, #8
 80026f2:	d072      	beq.n	80027da <HAL_RCC_OscConfig+0x1d6>
 80026f4:	2d0c      	cmp	r5, #12
 80026f6:	d06e      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fe:	f000 8094 	beq.w	800282a <HAL_RCC_OscConfig+0x226>
 8002702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002706:	f000 8096 	beq.w	8002836 <HAL_RCC_OscConfig+0x232>
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800271a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8096 	beq.w	8002850 <HAL_RCC_OscConfig+0x24c>
        tickstart = HAL_GetTick();
 8002724:	f7ff fab8 	bl	8001c98 <HAL_GetTick>
 8002728:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8002874 <HAL_RCC_OscConfig+0x270>
 800272e:	f8d8 3000 	ldr.w	r3, [r8]
 8002732:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002736:	d159      	bne.n	80027ec <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7ff faae 	bl	8001c98 <HAL_GetTick>
 800273c:	1bc0      	subs	r0, r0, r7
 800273e:	2864      	cmp	r0, #100	; 0x64
 8002740:	d9f5      	bls.n	800272e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002742:	2003      	movs	r0, #3
 8002744:	e290      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002746:	f7ff fec5 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 800274a:	2800      	cmp	r0, #0
 800274c:	f040 8285 	bne.w	8002c5a <HAL_RCC_OscConfig+0x656>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002750:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f042 0208 	orr.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002760:	6a21      	ldr	r1, [r4, #32]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	69e1      	ldr	r1, [r4, #28]
 800276a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800276e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	e7a4      	b.n	80026c0 <HAL_RCC_OscConfig+0xbc>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002776:	6a20      	ldr	r0, [r4, #32]
 8002778:	f7ff feac 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 800277c:	2800      	cmp	r0, #0
 800277e:	d09f      	beq.n	80026c0 <HAL_RCC_OscConfig+0xbc>
              return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
 8002782:	e271      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f042 0208 	orr.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002794:	6a21      	ldr	r1, [r4, #32]
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	69e1      	ldr	r1, [r4, #28]
 800279e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80027a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	e79e      	b.n	80026e8 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027b4:	f7ff fa70 	bl	8001c98 <HAL_GetTick>
 80027b8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ba:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002874 <HAL_RCC_OscConfig+0x270>
 80027be:	f8d8 3000 	ldr.w	r3, [r8]
 80027c2:	f013 0f02 	tst.w	r3, #2
 80027c6:	d08f      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c8:	f7ff fa66 	bl	8001c98 <HAL_GetTick>
 80027cc:	1bc0      	subs	r0, r0, r7
 80027ce:	2802      	cmp	r0, #2
 80027d0:	d9f5      	bls.n	80027be <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 80027d2:	2003      	movs	r0, #3
 80027d4:	e248      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d6:	2e03      	cmp	r6, #3
 80027d8:	d18e      	bne.n	80026f8 <HAL_RCC_OscConfig+0xf4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027e2:	d003      	beq.n	80027ec <HAL_RCC_OscConfig+0x1e8>
 80027e4:	6863      	ldr	r3, [r4, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8239 	beq.w	8002c5e <HAL_RCC_OscConfig+0x65a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	f013 0f02 	tst.w	r3, #2
 80027f2:	d05a      	beq.n	80028aa <HAL_RCC_OscConfig+0x2a6>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027f4:	2d04      	cmp	r5, #4
 80027f6:	d047      	beq.n	8002888 <HAL_RCC_OscConfig+0x284>
 80027f8:	2d0c      	cmp	r5, #12
 80027fa:	d043      	beq.n	8002884 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fc:	68e3      	ldr	r3, [r4, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d079      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800280c:	f7ff fa44 	bl	8001c98 <HAL_GetTick>
 8002810:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002812:	4f18      	ldr	r7, [pc, #96]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800281a:	d163      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff fa3c 	bl	8001c98 <HAL_GetTick>
 8002820:	1b80      	subs	r0, r0, r6
 8002822:	2802      	cmp	r0, #2
 8002824:	d9f6      	bls.n	8002814 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 8002826:	2003      	movs	r0, #3
 8002828:	e21e      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e772      	b.n	800271c <HAL_RCC_OscConfig+0x118>
 8002836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800283a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e765      	b.n	800271c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002850:	f7ff fa22 	bl	8001c98 <HAL_GetTick>
 8002854:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8002874 <HAL_RCC_OscConfig+0x270>
 800285a:	f8d8 3000 	ldr.w	r3, [r8]
 800285e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002862:	d0c3      	beq.n	80027ec <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff fa18 	bl	8001c98 <HAL_GetTick>
 8002868:	1bc0      	subs	r0, r0, r7
 800286a:	2864      	cmp	r0, #100	; 0x64
 800286c:	d9f5      	bls.n	800285a <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800286e:	2003      	movs	r0, #3
 8002870:	e1fa      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	08004344 	.word	0x08004344
 800287c:	20000004 	.word	0x20000004
 8002880:	2000000c 	.word	0x2000000c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002884:	2e02      	cmp	r6, #2
 8002886:	d1b9      	bne.n	80027fc <HAL_RCC_OscConfig+0x1f8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	4ba6      	ldr	r3, [pc, #664]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002890:	d003      	beq.n	800289a <HAL_RCC_OscConfig+0x296>
 8002892:	68e3      	ldr	r3, [r4, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 81e4 	beq.w	8002c62 <HAL_RCC_OscConfig+0x65e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289a:	4aa2      	ldr	r2, [pc, #648]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 800289c:	6853      	ldr	r3, [r2, #4]
 800289e:	6921      	ldr	r1, [r4, #16]
 80028a0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80028a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80028a8:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	f013 0f08 	tst.w	r3, #8
 80028b0:	d04c      	beq.n	800294c <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b2:	6963      	ldr	r3, [r4, #20]
 80028b4:	b39b      	cbz	r3, 800291e <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4a9b      	ldr	r2, [pc, #620]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 80028b8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80028c4:	f7ff f9e8 	bl	8001c98 <HAL_GetTick>
 80028c8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ca:	4f96      	ldr	r7, [pc, #600]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 80028cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028d0:	f013 0f02 	tst.w	r3, #2
 80028d4:	d13a      	bne.n	800294c <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7ff f9df 	bl	8001c98 <HAL_GetTick>
 80028da:	1b80      	subs	r0, r0, r6
 80028dc:	2802      	cmp	r0, #2
 80028de:	d9f5      	bls.n	80028cc <HAL_RCC_OscConfig+0x2c8>
          return HAL_TIMEOUT;
 80028e0:	2003      	movs	r0, #3
 80028e2:	e1c1      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4a8f      	ldr	r2, [pc, #572]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	6921      	ldr	r1, [r4, #16]
 80028ea:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80028ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	e7d9      	b.n	80028aa <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 80028f6:	4a8b      	ldr	r2, [pc, #556]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002900:	f7ff f9ca 	bl	8001c98 <HAL_GetTick>
 8002904:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002906:	4f87      	ldr	r7, [pc, #540]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800290e:	d0cc      	beq.n	80028aa <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002910:	f7ff f9c2 	bl	8001c98 <HAL_GetTick>
 8002914:	1b80      	subs	r0, r0, r6
 8002916:	2802      	cmp	r0, #2
 8002918:	d9f6      	bls.n	8002908 <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
 800291c:	e1a4      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
      __HAL_RCC_LSI_DISABLE();
 800291e:	4a81      	ldr	r2, [pc, #516]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002920:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800292c:	f7ff f9b4 	bl	8001c98 <HAL_GetTick>
 8002930:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002932:	4f7c      	ldr	r7, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002938:	f013 0f02 	tst.w	r3, #2
 800293c:	d006      	beq.n	800294c <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293e:	f7ff f9ab 	bl	8001c98 <HAL_GetTick>
 8002942:	1b80      	subs	r0, r0, r6
 8002944:	2802      	cmp	r0, #2
 8002946:	d9f5      	bls.n	8002934 <HAL_RCC_OscConfig+0x330>
          return HAL_TIMEOUT;
 8002948:	2003      	movs	r0, #3
 800294a:	e18d      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	f013 0f04 	tst.w	r3, #4
 8002952:	d07e      	beq.n	8002a52 <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002954:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800295c:	d137      	bne.n	80029ce <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002962:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002966:	659a      	str	r2, [r3, #88]	; 0x58
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002972:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <HAL_RCC_OscConfig+0x524>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f413 7f80 	tst.w	r3, #256	; 0x100
 800297c:	d029      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297e:	68a3      	ldr	r3, [r4, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d03c      	beq.n	80029fe <HAL_RCC_OscConfig+0x3fa>
 8002984:	2b05      	cmp	r3, #5
 8002986:	d042      	beq.n	8002a0e <HAL_RCC_OscConfig+0x40a>
 8002988:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 800298a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002996:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800299a:	f022 0204 	bic.w	r2, r2, #4
 800299e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a2:	68a3      	ldr	r3, [r4, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d040      	beq.n	8002a2a <HAL_RCC_OscConfig+0x426>
      tickstart = HAL_GetTick();
 80029a8:	f7ff f976 	bl	8001c98 <HAL_GetTick>
 80029ac:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002b24 <HAL_RCC_OscConfig+0x520>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80029ba:	f013 0f02 	tst.w	r3, #2
 80029be:	d147      	bne.n	8002a50 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7ff f96a 	bl	8001c98 <HAL_GetTick>
 80029c4:	1bc0      	subs	r0, r0, r7
 80029c6:	4548      	cmp	r0, r9
 80029c8:	d9f5      	bls.n	80029b6 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80029ca:	2003      	movs	r0, #3
 80029cc:	e14c      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2600      	movs	r6, #0
 80029d0:	e7d0      	b.n	8002974 <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d2:	4a55      	ldr	r2, [pc, #340]	; (8002b28 <HAL_RCC_OscConfig+0x524>)
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029dc:	f7ff f95c 	bl	8001c98 <HAL_GetTick>
 80029e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002b28 <HAL_RCC_OscConfig+0x524>
 80029e6:	f8d8 3000 	ldr.w	r3, [r8]
 80029ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029ee:	d1c6      	bne.n	800297e <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f0:	f7ff f952 	bl	8001c98 <HAL_GetTick>
 80029f4:	1bc0      	subs	r0, r0, r7
 80029f6:	2802      	cmp	r0, #2
 80029f8:	d9f5      	bls.n	80029e6 <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 80029fa:	2003      	movs	r0, #3
 80029fc:	e134      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fe:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002a00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0c:	e7c9      	b.n	80029a2 <HAL_RCC_OscConfig+0x39e>
 8002a0e:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002a10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a14:	f042 0204 	orr.w	r2, r2, #4
 8002a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002a1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002a28:	e7bb      	b.n	80029a2 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8002a2a:	f7ff f935 	bl	8001c98 <HAL_GetTick>
 8002a2e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a30:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002b24 <HAL_RCC_OscConfig+0x520>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a38:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8002a3c:	f013 0f02 	tst.w	r3, #2
 8002a40:	d006      	beq.n	8002a50 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7ff f929 	bl	8001c98 <HAL_GetTick>
 8002a46:	1bc0      	subs	r0, r0, r7
 8002a48:	4548      	cmp	r0, r9
 8002a4a:	d9f5      	bls.n	8002a38 <HAL_RCC_OscConfig+0x434>
          return HAL_TIMEOUT;
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	e10b      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
    if(pwrclkchanged == SET)
 8002a50:	b9e6      	cbnz	r6, 8002a8c <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	f013 0f20 	tst.w	r3, #32
 8002a58:	d035      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a5c:	b1e3      	cbz	r3, 8002a98 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 8002a5e:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002a60:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002a6c:	f7ff f914 	bl	8001c98 <HAL_GetTick>
 8002a70:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a72:	4f2c      	ldr	r7, [pc, #176]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a78:	f013 0f02 	tst.w	r3, #2
 8002a7c:	d123      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a7e:	f7ff f90b 	bl	8001c98 <HAL_GetTick>
 8002a82:	1b80      	subs	r0, r0, r6
 8002a84:	2802      	cmp	r0, #2
 8002a86:	d9f5      	bls.n	8002a74 <HAL_RCC_OscConfig+0x470>
          return HAL_TIMEOUT;
 8002a88:	2003      	movs	r0, #3
 8002a8a:	e0ed      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002a8e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
 8002a96:	e7dc      	b.n	8002a52 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002a9a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002aa6:	f7ff f8f7 	bl	8001c98 <HAL_GetTick>
 8002aaa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aac:	4f1d      	ldr	r7, [pc, #116]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab2:	f013 0f02 	tst.w	r3, #2
 8002ab6:	d006      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab8:	f7ff f8ee 	bl	8001c98 <HAL_GetTick>
 8002abc:	1b80      	subs	r0, r0, r6
 8002abe:	2802      	cmp	r0, #2
 8002ac0:	d9f5      	bls.n	8002aae <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	e0d0      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80cc 	beq.w	8002c66 <HAL_RCC_OscConfig+0x662>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d017      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4fe>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad2:	2d0c      	cmp	r5, #12
 8002ad4:	f000 80cd 	beq.w	8002c72 <HAL_RCC_OscConfig+0x66e>
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f8d9 	bl	8001c98 <HAL_GetTick>
 8002ae6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	4d0e      	ldr	r5, [pc, #56]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002af0:	f000 80a8 	beq.w	8002c44 <HAL_RCC_OscConfig+0x640>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff f8d0 	bl	8001c98 <HAL_GetTick>
 8002af8:	1b00      	subs	r0, r0, r4
 8002afa:	2802      	cmp	r0, #2
 8002afc:	d9f5      	bls.n	8002aea <HAL_RCC_OscConfig+0x4e6>
            return HAL_TIMEOUT;
 8002afe:	2003      	movs	r0, #3
 8002b00:	e0b2      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
      pll_config = RCC->PLLCFGR;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002b04:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	f003 0103 	and.w	r1, r3, #3
 8002b0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b0c:	4291      	cmp	r1, r2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCC_OscConfig+0x528>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b10:	2d0c      	cmp	r5, #12
 8002b12:	f000 80ac 	beq.w	8002c6e <HAL_RCC_OscConfig+0x66a>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b16:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_OscConfig+0x520>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002b1e:	d02f      	beq.n	8002b80 <HAL_RCC_OscConfig+0x57c>
            return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
 8002b22:	e0a1      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b32:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b34:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002b38:	d1ea      	bne.n	8002b10 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b40:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002b44:	d1e4      	bne.n	8002b10 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002b50:	d1de      	bne.n	8002b10 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b52:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002b56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b5c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002b60:	d1d6      	bne.n	8002b10 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b62:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002b66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b68:	0852      	lsrs	r2, r2, #1
 8002b6a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b6c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002b70:	d1ce      	bne.n	8002b10 <HAL_RCC_OscConfig+0x50c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b7a:	d049      	beq.n	8002c10 <HAL_RCC_OscConfig+0x60c>
  return HAL_OK;
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e073      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
            __HAL_RCC_PLL_DISABLE();
 8002b80:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002b82:	6813      	ldr	r3, [r2, #0]
 8002b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002b8a:	f7ff f885 	bl	8001c98 <HAL_GetTick>
 8002b8e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	4e39      	ldr	r6, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002b92:	6833      	ldr	r3, [r6, #0]
 8002b94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b98:	d006      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x5a4>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7ff f87d 	bl	8001c98 <HAL_GetTick>
 8002b9e:	1b40      	subs	r0, r0, r5
 8002ba0:	2802      	cmp	r0, #2
 8002ba2:	d9f6      	bls.n	8002b92 <HAL_RCC_OscConfig+0x58e>
                return HAL_TIMEOUT;
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	e05f      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4a33      	ldr	r2, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002baa:	68d1      	ldr	r1, [r2, #12]
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_RCC_OscConfig+0x678>)
 8002bae:	400b      	ands	r3, r1
 8002bb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002bbc:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8002bc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002bc2:	3901      	subs	r1, #1
 8002bc4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002bc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002bca:	0849      	lsrs	r1, r1, #1
 8002bcc:	3901      	subs	r1, #1
 8002bce:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002bd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002bd4:	0849      	lsrs	r1, r1, #1
 8002bd6:	3901      	subs	r1, #1
 8002bd8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002bdc:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be6:	68d3      	ldr	r3, [r2, #12]
 8002be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bec:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002bee:	f7ff f853 	bl	8001c98 <HAL_GetTick>
 8002bf2:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf4:	4d20      	ldr	r5, [pc, #128]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x608>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7ff f84b 	bl	8001c98 <HAL_GetTick>
 8002c02:	1b00      	subs	r0, r0, r4
 8002c04:	2802      	cmp	r0, #2
 8002c06:	d9f6      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x5f2>
                return HAL_TIMEOUT;
 8002c08:	2003      	movs	r0, #3
 8002c0a:	e02d      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
  return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e02b      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
          __HAL_RCC_PLL_ENABLE();
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c18:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c20:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002c22:	f7ff f839 	bl	8001c98 <HAL_GetTick>
 8002c26:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c28:	4d13      	ldr	r5, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x63c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7ff f831 	bl	8001c98 <HAL_GetTick>
 8002c36:	1b03      	subs	r3, r0, r4
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d9f6      	bls.n	8002c2a <HAL_RCC_OscConfig+0x626>
              return HAL_TIMEOUT;
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	e013      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
  return HAL_OK;
 8002c40:	2000      	movs	r0, #0
 8002c42:	e011      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_RCC_OscConfig+0x674>)
 8002c46:	68d1      	ldr	r1, [r2, #12]
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002c4e:	2000      	movs	r0, #0
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
    return HAL_ERROR;
 8002c52:	2001      	movs	r0, #1
}
 8002c54:	4770      	bx	lr
        return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
 8002c58:	e006      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
            return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
        return HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
        return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
  return HAL_OK;
 8002c66:	2000      	movs	r0, #0
}
 8002c68:	b003      	add	sp, #12
 8002c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_ERROR;
 8002c6e:	2001      	movs	r0, #1
 8002c70:	e7fa      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
        return HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
 8002c74:	e7f8      	b.n	8002c68 <HAL_RCC_OscConfig+0x664>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	019d808c 	.word	0x019d808c
 8002c80:	feeefffc 	.word	0xfeeefffc

08002c84 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d076      	beq.n	8002d76 <HAL_RCC_ClockConfig+0xf2>
{
 8002c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8c:	460d      	mov	r5, r1
 8002c8e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <HAL_RCC_ClockConfig+0x188>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	d20a      	bcs.n	8002cb2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9c:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <HAL_RCC_ClockConfig+0x188>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f023 0307 	bic.w	r3, r3, #7
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	428b      	cmp	r3, r1
 8002cb0:	d163      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f013 0f02 	tst.w	r3, #2
 8002cb8:	d065      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x102>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cba:	68a1      	ldr	r1, [r4, #8]
 8002cbc:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002cc4:	4291      	cmp	r1, r2
 8002cc6:	f240 809c 	bls.w	8002e02 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cca:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002ccc:	6893      	ldr	r3, [r2, #8]
 8002cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f013 0f01 	tst.w	r3, #1
 8002cdc:	d039      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	2a03      	cmp	r2, #3
 8002ce2:	d009      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce4:	2a02      	cmp	r2, #2
 8002ce6:	d026      	beq.n	8002d36 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce8:	bb62      	cbnz	r2, 8002d44 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f013 0f02 	tst.w	r3, #2
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e082      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d00:	d03d      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4943      	ldr	r1, [pc, #268]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002d04:	688b      	ldr	r3, [r1, #8]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d0e:	f7fe ffc3 	bl	8001c98 <HAL_GetTick>
 8002d12:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d14:	4f3e      	ldr	r7, [pc, #248]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d16:	f241 3888 	movw	r8, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	6862      	ldr	r2, [r4, #4]
 8002d22:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d26:	d014      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe ffb6 	bl	8001c98 <HAL_GetTick>
 8002d2c:	1b80      	subs	r0, r0, r6
 8002d2e:	4540      	cmp	r0, r8
 8002d30:	d9f3      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002d32:	2003      	movs	r0, #3
 8002d34:	e063      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d3e:	d1e0      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002d40:	2001      	movs	r0, #1
 8002d42:	e05c      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d4c:	d1d9      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e055      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	f013 0f02 	tst.w	r3, #2
 8002d58:	d018      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x108>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d5a:	68a2      	ldr	r2, [r4, #8]
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d211      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x108>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4929      	ldr	r1, [pc, #164]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002d6a:	688b      	ldr	r3, [r1, #8]
 8002d6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 8002d76:	2001      	movs	r0, #1
}
 8002d78:	4770      	bx	lr
      return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e03f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
        return HAL_ERROR;
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e03d      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
      return HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
 8002d84:	e03b      	b.n	8002dfe <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	f013 0f01 	tst.w	r3, #1
 8002d8a:	d1a8      	bne.n	8002cde <HAL_RCC_ClockConfig+0x5a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_ClockConfig+0x188>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	42ab      	cmp	r3, r5
 8002d96:	d90a      	bls.n	8002dae <HAL_RCC_ClockConfig+0x12a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d98:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_RCC_ClockConfig+0x188>)
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	f023 0307 	bic.w	r3, r3, #7
 8002da0:	432b      	orrs	r3, r5
 8002da2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	42ab      	cmp	r3, r5
 8002dac:	d1e9      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	f013 0f04 	tst.w	r3, #4
 8002db4:	d006      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002db8:	6893      	ldr	r3, [r2, #8]
 8002dba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dbe:	68e1      	ldr	r1, [r4, #12]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f013 0f08 	tst.w	r3, #8
 8002dca:	d007      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x158>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dcc:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002dce:	6893      	ldr	r3, [r2, #8]
 8002dd0:	6921      	ldr	r1, [r4, #16]
 8002dd2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002dd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dda:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ddc:	f7ff fbbe 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x18c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x190>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	40d8      	lsrs	r0, r3
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x194>)
 8002df4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x198>)
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f7fe ff09 	bl	8001c10 <HAL_InitTick>
}
 8002dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	f013 0f01 	tst.w	r3, #1
 8002e06:	f47f af6a 	bne.w	8002cde <HAL_RCC_ClockConfig+0x5a>
 8002e0a:	e7a6      	b.n	8002d5a <HAL_RCC_ClockConfig+0xd6>
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08004344 	.word	0x08004344
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e32:	6810      	ldr	r0, [r2, #0]
}
 8002e34:	40d8      	lsrs	r0, r3
 8002e36:	4770      	bx	lr
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08004354 	.word	0x08004354
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e56:	6810      	ldr	r0, [r2, #0]
}
 8002e58:	40d8      	lsrs	r0, r3
 8002e5a:	4770      	bx	lr
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08004354 	.word	0x08004354
 8002e64:	20000004 	.word	0x20000004

08002e68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6e:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f013 0f03 	tst.w	r3, #3
 8002e76:	d014      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x3a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	6802      	ldr	r2, [r0, #0]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d001      	beq.n	8002e8a <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
 8002e88:	e013      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
       ||
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d079      	beq.n	8002f82 <RCCEx_PLLSAI1_Config+0x11a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e96:	3301      	adds	r3, #1
       ||
 8002e98:	6842      	ldr	r2, [r0, #4]
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d019      	beq.n	8002ed2 <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	e007      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d028      	beq.n	8002efa <RCCEx_PLLSAI1_Config+0x92>
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d02d      	beq.n	8002f08 <RCCEx_PLLSAI1_Config+0xa0>
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <RCCEx_PLLSAI1_Config+0x4c>
 8002eb0:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eb4:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	f012 0f02 	tst.w	r2, #2
 8002ebc:	d063      	beq.n	8002f86 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ebe:	4840      	ldr	r0, [pc, #256]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002ec0:	68c2      	ldr	r2, [r0, #12]
 8002ec2:	6861      	ldr	r1, [r4, #4]
 8002ec4:	3901      	subs	r1, #1
 8002ec6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002ed0:	60c3      	str	r3, [r0, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ed2:	4a3b      	ldr	r2, [pc, #236]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002eda:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002edc:	f7fe fedc 	bl	8001c98 <HAL_GetTick>
 8002ee0:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee2:	4f37      	ldr	r7, [pc, #220]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002eea:	d055      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x130>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eec:	f7fe fed4 	bl	8001c98 <HAL_GetTick>
 8002ef0:	1b43      	subs	r3, r0, r5
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d9f6      	bls.n	8002ee4 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	e7db      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002efa:	4a31      	ldr	r2, [pc, #196]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f02:	d1dc      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0x56>
 8002f04:	2001      	movs	r0, #1
 8002f06:	e7d4      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002f10:	d1d5      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0x56>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f12:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002f1a:	d1d0      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0x56>
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	e7c8      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f20:	4927      	ldr	r1, [pc, #156]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f22:	690a      	ldr	r2, [r1, #16]
 8002f24:	68a0      	ldr	r0, [r4, #8]
 8002f26:	68e3      	ldr	r3, [r4, #12]
 8002f28:	06db      	lsls	r3, r3, #27
 8002f2a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f2e:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8002f32:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002f36:	4313      	orrs	r3, r2
 8002f38:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f3a:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f44:	f7fe fea8 	bl	8001c98 <HAL_GetTick>
 8002f48:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f4a:	4e1d      	ldr	r6, [pc, #116]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f4c:	6833      	ldr	r3, [r6, #0]
 8002f4e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002f52:	d11a      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f54:	f7fe fea0 	bl	8001c98 <HAL_GetTick>
 8002f58:	1b43      	subs	r3, r0, r5
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d9f6      	bls.n	8002f4c <RCCEx_PLLSAI1_Config+0xe4>
          status = HAL_TIMEOUT;
 8002f5e:	2003      	movs	r0, #3
 8002f60:	e7a7      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f62:	4917      	ldr	r1, [pc, #92]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f64:	690b      	ldr	r3, [r1, #16]
 8002f66:	6922      	ldr	r2, [r4, #16]
 8002f68:	0852      	lsrs	r2, r2, #1
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	68a0      	ldr	r0, [r4, #8]
 8002f6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f76:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f7a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002f7e:	610b      	str	r3, [r1, #16]
 8002f80:	e7db      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xd2>
      status = HAL_ERROR;
 8002f82:	2001      	movs	r0, #1
 8002f84:	e795      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
 8002f86:	2001      	movs	r0, #1
 8002f88:	e793      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002f8c:	6913      	ldr	r3, [r2, #16]
 8002f8e:	69a1      	ldr	r1, [r4, #24]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6113      	str	r3, [r2, #16]
 8002f94:	2000      	movs	r0, #0
  return status;
 8002f96:	e78c      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x4a>
      if(Divider == DIVIDER_P_UPDATE)
 8002f98:	2e00      	cmp	r6, #0
 8002f9a:	d0c1      	beq.n	8002f20 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f9c:	2e01      	cmp	r6, #1
 8002f9e:	d0e0      	beq.n	8002f62 <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa0:	4807      	ldr	r0, [pc, #28]	; (8002fc0 <RCCEx_PLLSAI1_Config+0x158>)
 8002fa2:	6902      	ldr	r2, [r0, #16]
 8002fa4:	6963      	ldr	r3, [r4, #20]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	1e59      	subs	r1, r3, #1
 8002faa:	68a5      	ldr	r5, [r4, #8]
 8002fac:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8002fb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002fb8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002fbc:	6103      	str	r3, [r0, #16]
 8002fbe:	e7bc      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xd2>
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fcc:	6803      	ldr	r3, [r0, #0]
 8002fce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002fd2:	d020      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002fd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002fd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002fdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe0:	d007      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8002fe2:	b18b      	cbz	r3, 8003008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fe4:	2601      	movs	r6, #1
 8002fe6:	e017      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002fe8:	4aa9      	ldr	r2, [pc, #676]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002fea:	68d3      	ldr	r3, [r2, #12]
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff2:	4aa7      	ldr	r2, [pc, #668]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ff4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ff8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ffc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ffe:	430b      	orrs	r3, r1
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003004:	2600      	movs	r6, #0
 8003006:	e007      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x54>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003008:	2100      	movs	r1, #0
 800300a:	3004      	adds	r0, #4
 800300c:	f7ff ff2c 	bl	8002e68 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8003010:	4606      	mov	r6, r0
 8003012:	b908      	cbnz	r0, 8003018 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003014:	e7ed      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003016:	2600      	movs	r6, #0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800301e:	d029      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003020:	4b9b      	ldr	r3, [pc, #620]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003028:	f040 80c9 	bne.w	80031be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	4b98      	ldr	r3, [pc, #608]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800302e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003030:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003034:	659a      	str	r2, [r3, #88]	; 0x58
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003040:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003042:	4a94      	ldr	r2, [pc, #592]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003044:	6813      	ldr	r3, [r2, #0]
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800304c:	f7fe fe24 	bl	8001c98 <HAL_GetTick>
 8003050:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003052:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8003294 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003056:	f8d8 3000 	ldr.w	r3, [r8]
 800305a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800305e:	f040 80b0 	bne.w	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe fe19 	bl	8001c98 <HAL_GetTick>
 8003066:	1b40      	subs	r0, r0, r5
 8003068:	2802      	cmp	r0, #2
 800306a:	d9f4      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x92>
        ret = HAL_TIMEOUT;
 800306c:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 800306e:	2f00      	cmp	r7, #0
 8003070:	f040 80dc 	bne.w	800322c <HAL_RCCEx_PeriphCLKConfig+0x268>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	f013 0f01 	tst.w	r3, #1
 800307a:	d008      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307c:	4a84      	ldr	r2, [pc, #528]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800307e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	6a21      	ldr	r1, [r4, #32]
 8003088:	430b      	orrs	r3, r1
 800308a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	f013 0f02 	tst.w	r3, #2
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003096:	4a7e      	ldr	r2, [pc, #504]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003098:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800309c:	f023 030c 	bic.w	r3, r3, #12
 80030a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030a2:	430b      	orrs	r3, r1
 80030a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	f013 0f20 	tst.w	r3, #32
 80030ae:	d008      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b0:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80030b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80030bc:	430b      	orrs	r3, r1
 80030be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030c8:	d008      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ca:	4a71      	ldr	r2, [pc, #452]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80030cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030d0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80030d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d6:	430b      	orrs	r3, r1
 80030d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x132>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e4:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80030e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80030ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80030f0:	430b      	orrs	r3, r1
 80030f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fe:	4a64      	ldr	r2, [pc, #400]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003100:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003104:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003108:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800310a:	430b      	orrs	r3, r1
 800310c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003116:	d008      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003118:	4a5d      	ldr	r2, [pc, #372]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800311a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800311e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003122:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003124:	430b      	orrs	r3, r1
 8003126:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003130:	d00f      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003132:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003134:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003138:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800313c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800313e:	430b      	orrs	r3, r1
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800314a:	d075      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x274>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003150:	d077      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003158:	d00f      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800315a:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800315c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003160:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003164:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003166:	430b      	orrs	r3, r1
 8003168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800316c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800316e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003172:	d06e      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003178:	d070      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x298>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003180:	d00c      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003182:	4a43      	ldr	r2, [pc, #268]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003184:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003188:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800318c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800318e:	430b      	orrs	r3, r1
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003194:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319a:	d067      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031a2:	d008      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031a4:	4a3a      	ldr	r2, [pc, #232]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80031a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80031b0:	430b      	orrs	r3, r1
 80031b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80031b6:	4630      	mov	r0, r6
 80031b8:	b003      	add	sp, #12
 80031ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2700      	movs	r7, #0
 80031c0:	e73f      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    if(ret == HAL_OK)
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	f47f af53 	bne.w	800306e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ce:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80031d2:	d053      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80031d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d012      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031da:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80031dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80031e8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80031ec:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80031f4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80031f8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003200:	f013 0f01 	tst.w	r3, #1
 8003204:	d03a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        tickstart = HAL_GetTick();
 8003206:	f7fe fd47 	bl	8001c98 <HAL_GetTick>
 800320a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f241 3988 	movw	r9, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003214:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8003218:	f013 0f02 	tst.w	r3, #2
 800321c:	d12e      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fe fd3b 	bl	8001c98 <HAL_GetTick>
 8003222:	1b40      	subs	r0, r0, r5
 8003224:	4548      	cmp	r0, r9
 8003226:	d9f5      	bls.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x250>
            ret = HAL_TIMEOUT;
 8003228:	2603      	movs	r6, #3
 800322a:	e720      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800322e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003234:	6593      	str	r3, [r2, #88]	; 0x58
 8003236:	e71d      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003238:	68d3      	ldr	r3, [r2, #12]
 800323a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800323e:	60d3      	str	r3, [r2, #12]
 8003240:	e787      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003242:	2101      	movs	r1, #1
 8003244:	1d20      	adds	r0, r4, #4
 8003246:	f7ff fe0f 	bl	8002e68 <RCCEx_PLLSAI1_Config>
          status = ret;
 800324a:	2800      	cmp	r0, #0
 800324c:	bf18      	it	ne
 800324e:	4606      	movne	r6, r0
 8003250:	e77f      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003252:	68d3      	ldr	r3, [r2, #12]
 8003254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003258:	60d3      	str	r3, [r2, #12]
 800325a:	e78e      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325c:	2101      	movs	r1, #1
 800325e:	1d20      	adds	r0, r4, #4
 8003260:	f7ff fe02 	bl	8002e68 <RCCEx_PLLSAI1_Config>
        status = ret;
 8003264:	2800      	cmp	r0, #0
 8003266:	bf18      	it	ne
 8003268:	4606      	movne	r6, r0
 800326a:	e786      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800326c:	2102      	movs	r1, #2
 800326e:	1d20      	adds	r0, r4, #4
 8003270:	f7ff fdfa 	bl	8002e68 <RCCEx_PLLSAI1_Config>
        status = ret;
 8003274:	2800      	cmp	r0, #0
 8003276:	bf18      	it	ne
 8003278:	4606      	movne	r6, r0
 800327a:	e78f      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800327e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003286:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003288:	430b      	orrs	r3, r1
 800328a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328e:	e6ee      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000

08003298 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003298:	4a02      	ldr	r2, [pc, #8]	; (80032a4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6013      	str	r3, [r2, #0]
}
 80032a2:	4770      	bx	lr
 80032a4:	40021000 	.word	0x40021000

080032a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	4681      	mov	r9, r0
 80032b0:	460f      	mov	r7, r1
 80032b2:	4616      	mov	r6, r2
 80032b4:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032b6:	f7fe fcef 	bl	8001c98 <HAL_GetTick>
 80032ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032bc:	442b      	add	r3, r5
 80032be:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80032c2:	f7fe fce9 	bl	8001c98 <HAL_GetTick>
 80032c6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80032d0:	fb08 f303 	mul.w	r3, r8, r3
 80032d4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d6:	f8d9 3000 	ldr.w	r3, [r9]
 80032da:	689c      	ldr	r4, [r3, #8]
 80032dc:	ea37 0204 	bics.w	r2, r7, r4
 80032e0:	bf0c      	ite	eq
 80032e2:	f04f 0c01 	moveq.w	ip, #1
 80032e6:	f04f 0c00 	movne.w	ip, #0
 80032ea:	45b4      	cmp	ip, r6
 80032ec:	d044      	beq.n	8003378 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032f2:	d0f2      	beq.n	80032da <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f4:	f7fe fcd0 	bl	8001c98 <HAL_GetTick>
 80032f8:	eba0 000a 	sub.w	r0, r0, sl
 80032fc:	4540      	cmp	r0, r8
 80032fe:	d207      	bcs.n	8003310 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003300:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf08      	it	eq
 8003306:	4698      	moveq	r8, r3
      }
      count--;
 8003308:	9b01      	ldr	r3, [sp, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	e7e2      	b.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003310:	f8d9 2000 	ldr.w	r2, [r9]
 8003314:	6853      	ldr	r3, [r2, #4]
 8003316:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800331a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003324:	d00c      	beq.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003326:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	d016      	beq.n	800335e <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8003330:	2301      	movs	r3, #1
 8003332:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003336:	2300      	movs	r3, #0
 8003338:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 800333c:	2003      	movs	r0, #3
 800333e:	e01c      	b.n	800337a <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003340:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003348:	d002      	beq.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d1ea      	bne.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003350:	f8d9 2000 	ldr.w	r2, [r9]
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e7e3      	b.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800335e:	f8d9 2000 	ldr.w	r2, [r9]
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	f8d9 2000 	ldr.w	r2, [r9]
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e7db      	b.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8003378:	2000      	movs	r0, #0
}
 800337a:	b002      	add	sp, #8
 800337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003380:	20000004 	.word	0x20000004

08003384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	4680      	mov	r8, r0
 800338c:	460c      	mov	r4, r1
 800338e:	4615      	mov	r5, r2
 8003390:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003398:	f7fe fc7e 	bl	8001c98 <HAL_GetTick>
 800339c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800339e:	4433      	add	r3, r6
 80033a0:	1a1f      	subs	r7, r3, r0
  tmp_tickstart = HAL_GetTick();
 80033a2:	f7fe fc79 	bl	8001c98 <HAL_GetTick>
 80033a6:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033a8:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033ac:	4b33      	ldr	r3, [pc, #204]	; (800347c <SPI_WaitFifoStateUntilTimeout+0xf8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	fb07 f303 	mul.w	r3, r7, r3
 80033be:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80033c0:	f8d8 2000 	ldr.w	r2, [r8]
 80033c4:	e002      	b.n	80033cc <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80033c6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80033cc:	6893      	ldr	r3, [r2, #8]
 80033ce:	ea03 0c04 	and.w	ip, r3, r4
 80033d2:	45ac      	cmp	ip, r5
 80033d4:	d04e      	beq.n	8003474 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033d6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80033da:	d1f4      	bne.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0x42>
 80033dc:	2d00      	cmp	r5, #0
 80033de:	d1f2      	bne.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 80033e0:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80033ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80033ee:	e7ea      	b.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033f0:	f7fe fc52 	bl	8001c98 <HAL_GetTick>
 80033f4:	eba0 0009 	sub.w	r0, r0, r9
 80033f8:	42b8      	cmp	r0, r7
 80033fa:	d207      	bcs.n	800340c <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033fc:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf08      	it	eq
 8003402:	461f      	moveq	r7, r3
      }
      count--;
 8003404:	9b01      	ldr	r3, [sp, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	e7d9      	b.n	80033c0 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800340c:	f8d8 2000 	ldr.w	r2, [r8]
 8003410:	6853      	ldr	r3, [r2, #4]
 8003412:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003416:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800341c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003420:	d00c      	beq.n	800343c <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003422:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	d016      	beq.n	800345a <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800342c:	2301      	movs	r3, #1
 800342e:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003432:	2300      	movs	r3, #0
 8003434:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003438:	2003      	movs	r0, #3
 800343a:	e01c      	b.n	8003476 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d002      	beq.n	800344c <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d1ea      	bne.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 800344c:	f8d8 2000 	ldr.w	r2, [r8]
 8003450:	6813      	ldr	r3, [r2, #0]
 8003452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e7e3      	b.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 800345a:	f8d8 2000 	ldr.w	r2, [r8]
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	f8d8 2000 	ldr.w	r2, [r8]
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e7db      	b.n	800342c <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8003474:	2000      	movs	r0, #0
}
 8003476:	b002      	add	sp, #8
 8003478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347c:	20000004 	.word	0x20000004

08003480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	4604      	mov	r4, r0
 8003486:	460d      	mov	r5, r1
 8003488:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800348a:	9200      	str	r2, [sp, #0]
 800348c:	460b      	mov	r3, r1
 800348e:	2200      	movs	r2, #0
 8003490:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003494:	f7ff ff76 	bl	8003384 <SPI_WaitFifoStateUntilTimeout>
 8003498:	b9b0      	cbnz	r0, 80034c8 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800349a:	9600      	str	r6, [sp, #0]
 800349c:	462b      	mov	r3, r5
 800349e:	2200      	movs	r2, #0
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff ff00 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 80034a8:	b9a8      	cbnz	r0, 80034d6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034aa:	9600      	str	r6, [sp, #0]
 80034ac:	462b      	mov	r3, r5
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7ff ff65 	bl	8003384 <SPI_WaitFifoStateUntilTimeout>
 80034ba:	b150      	cbz	r0, 80034d2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034be:	f043 0320 	orr.w	r3, r3, #32
 80034c2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034c4:	2003      	movs	r0, #3
 80034c6:	e004      	b.n	80034d2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80034d2:	b002      	add	sp, #8
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034d8:	f043 0320 	orr.w	r3, r3, #32
 80034dc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034de:	2003      	movs	r0, #3
 80034e0:	e7f7      	b.n	80034d2 <SPI_EndRxTxTransaction+0x52>

080034e2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d067      	beq.n	80035b6 <HAL_SPI_Init+0xd4>
{
 80034e6:	b510      	push	{r4, lr}
 80034e8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034ec:	b933      	cbnz	r3, 80034fc <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ee:	6843      	ldr	r3, [r0, #4]
 80034f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f4:	d005      	beq.n	8003502 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61c3      	str	r3, [r0, #28]
 80034fa:	e002      	b.n	8003502 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003500:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003502:	2300      	movs	r3, #0
 8003504:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003506:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04b      	beq.n	80035a6 <HAL_SPI_Init+0xc4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003524:	d84c      	bhi.n	80035c0 <HAL_SPI_Init+0xde>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800352a:	d046      	beq.n	80035ba <HAL_SPI_Init+0xd8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800352c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	6863      	ldr	r3, [r4, #4]
 8003538:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800353c:	68a0      	ldr	r0, [r4, #8]
 800353e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003542:	4303      	orrs	r3, r0
 8003544:	6920      	ldr	r0, [r4, #16]
 8003546:	f000 0002 	and.w	r0, r0, #2
 800354a:	4303      	orrs	r3, r0
 800354c:	6960      	ldr	r0, [r4, #20]
 800354e:	f000 0001 	and.w	r0, r0, #1
 8003552:	4303      	orrs	r3, r0
 8003554:	69a0      	ldr	r0, [r4, #24]
 8003556:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800355a:	4303      	orrs	r3, r0
 800355c:	69e0      	ldr	r0, [r4, #28]
 800355e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003562:	4303      	orrs	r3, r0
 8003564:	6a20      	ldr	r0, [r4, #32]
 8003566:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800356a:	4303      	orrs	r3, r0
 800356c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800356e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003572:	4303      	orrs	r3, r0
 8003574:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003580:	f000 0008 	and.w	r0, r0, #8
 8003584:	4303      	orrs	r3, r0
 8003586:	68e0      	ldr	r0, [r4, #12]
 8003588:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 800358c:	4303      	orrs	r3, r0
 800358e:	8b60      	ldrh	r0, [r4, #26]
 8003590:	f000 0004 	and.w	r0, r0, #4
 8003594:	4303      	orrs	r3, r0
 8003596:	430b      	orrs	r3, r1
 8003598:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359a:	2000      	movs	r0, #0
 800359c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800359e:	2301      	movs	r3, #1
 80035a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80035a4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80035a6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80035aa:	4620      	mov	r0, r4
 80035ac:	f7fe fa2a 	bl	8001a04 <HAL_SPI_MspInit>
 80035b0:	e7ad      	b.n	800350e <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035b2:	2100      	movs	r1, #0
 80035b4:	e7bc      	b.n	8003530 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 80035b6:	2001      	movs	r0, #1
}
 80035b8:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035be:	e7b9      	b.n	8003534 <HAL_SPI_Init+0x52>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035c4:	d1f5      	bne.n	80035b2 <HAL_SPI_Init+0xd0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035c6:	2100      	movs	r1, #0
 80035c8:	e7b4      	b.n	8003534 <HAL_SPI_Init+0x52>

080035ca <HAL_SPI_TransmitReceive>:
{
 80035ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ce:	461f      	mov	r7, r3
 80035d0:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80035d2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f000 815f 	beq.w	800389a <HAL_SPI_TransmitReceive+0x2d0>
 80035dc:	4604      	mov	r4, r0
 80035de:	4688      	mov	r8, r1
 80035e0:	4691      	mov	r9, r2
 80035e2:	2301      	movs	r3, #1
 80035e4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80035e8:	f7fe fb56 	bl	8001c98 <HAL_GetTick>
 80035ec:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80035ee:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80035f2:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035f4:	2801      	cmp	r0, #1
 80035f6:	d00b      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x46>
 80035f8:	6863      	ldr	r3, [r4, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fe:	f040 8135 	bne.w	800386c <HAL_SPI_TransmitReceive+0x2a2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003602:	68a3      	ldr	r3, [r4, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 813a 	bne.w	800387e <HAL_SPI_TransmitReceive+0x2b4>
 800360a:	2804      	cmp	r0, #4
 800360c:	f040 8139 	bne.w	8003882 <HAL_SPI_TransmitReceive+0x2b8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003610:	f1b8 0f00 	cmp.w	r8, #0
 8003614:	f000 8137 	beq.w	8003886 <HAL_SPI_TransmitReceive+0x2bc>
 8003618:	f1b9 0f00 	cmp.w	r9, #0
 800361c:	f000 8135 	beq.w	800388a <HAL_SPI_TransmitReceive+0x2c0>
 8003620:	2f00      	cmp	r7, #0
 8003622:	f000 8134 	beq.w	800388e <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003626:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800362e:	bf1c      	itt	ne
 8003630:	2305      	movne	r3, #5
 8003632:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003636:	2300      	movs	r3, #0
 8003638:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800363a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800363e:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003642:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003646:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800364a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800364c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800364e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003650:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003658:	d801      	bhi.n	800365e <HAL_SPI_TransmitReceive+0x94>
 800365a:	2f01      	cmp	r7, #1
 800365c:	d924      	bls.n	80036a8 <HAL_SPI_TransmitReceive+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	6853      	ldr	r3, [r2, #4]
 8003662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003666:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003670:	d103      	bne.n	800367a <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367a:	68e3      	ldr	r3, [r4, #12]
 800367c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003680:	d957      	bls.n	8003732 <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	6863      	ldr	r3, [r4, #4]
 8003684:	b10b      	cbz	r3, 800368a <HAL_SPI_TransmitReceive+0xc0>
 8003686:	2f01      	cmp	r7, #1
 8003688:	d10a      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003694:	3302      	adds	r3, #2
 8003696:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003698:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800369a:	3b01      	subs	r3, #1
 800369c:	b29b      	uxth	r3, r3
 800369e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80036a0:	2701      	movs	r7, #1
        txallowed = 0U;
 80036a2:	f04f 0800 	mov.w	r8, #0
 80036a6:	e02f      	b.n	8003708 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	6853      	ldr	r3, [r2, #4]
 80036ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036b0:	6053      	str	r3, [r2, #4]
 80036b2:	e7d9      	b.n	8003668 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036bc:	3302      	adds	r3, #2
 80036be:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80036c8:	4647      	mov	r7, r8
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	6893      	ldr	r3, [r2, #8]
 80036ce:	f013 0301 	ands.w	r3, r3, #1
 80036d2:	d010      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x12c>
 80036d4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80036d8:	b289      	uxth	r1, r1
 80036da:	b161      	cbz	r1, 80036f6 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036dc:	68d1      	ldr	r1, [r2, #12]
 80036de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036e0:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036e4:	3202      	adds	r2, #2
 80036e6:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80036e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80036ec:	3a01      	subs	r2, #1
 80036ee:	b292      	uxth	r2, r2
 80036f0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 80036f4:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036f6:	f7fe facf 	bl	8001c98 <HAL_GetTick>
 80036fa:	1b83      	subs	r3, r0, r6
 80036fc:	42ab      	cmp	r3, r5
 80036fe:	d303      	bcc.n	8003708 <HAL_SPI_TransmitReceive+0x13e>
 8003700:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003704:	f040 80c5 	bne.w	8003892 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003708:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	b92b      	cbnz	r3, 800371a <HAL_SPI_TransmitReceive+0x150>
 800370e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 809f 	beq.w	8003858 <HAL_SPI_TransmitReceive+0x28e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	f012 0f02 	tst.w	r2, #2
 8003722:	d0d2      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x100>
 8003724:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003726:	b292      	uxth	r2, r2
 8003728:	2a00      	cmp	r2, #0
 800372a:	d0ce      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x100>
 800372c:	2f00      	cmp	r7, #0
 800372e:	d0cc      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x100>
 8003730:	e7c0      	b.n	80036b4 <HAL_SPI_TransmitReceive+0xea>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003732:	6863      	ldr	r3, [r4, #4]
 8003734:	b10b      	cbz	r3, 800373a <HAL_SPI_TransmitReceive+0x170>
 8003736:	2f01      	cmp	r7, #1
 8003738:	d10e      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x18e>
      if (hspi->TxXferCount > 1U)
 800373a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d90e      	bls.n	8003760 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003746:	8812      	ldrh	r2, [r2, #0]
 8003748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800374a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800374c:	3302      	adds	r3, #2
 800374e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003750:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003752:	3b02      	subs	r3, #2
 8003754:	b29b      	uxth	r3, r3
 8003756:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003758:	2701      	movs	r7, #1
        txallowed = 0U;
 800375a:	f04f 0800 	mov.w	r8, #0
 800375e:	e043      	b.n	80037e8 <HAL_SPI_TransmitReceive+0x21e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800376a:	3301      	adds	r3, #1
 800376c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800376e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003770:	3b01      	subs	r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003776:	e7ef      	b.n	8003758 <HAL_SPI_TransmitReceive+0x18e>
        if (hspi->TxXferCount > 1U)
 8003778:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800377a:	b292      	uxth	r2, r2
 800377c:	2a01      	cmp	r2, #1
 800377e:	d90b      	bls.n	8003798 <HAL_SPI_TransmitReceive+0x1ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003788:	3302      	adds	r3, #2
 800378a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800378c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800378e:	3b02      	subs	r3, #2
 8003790:	b29b      	uxth	r3, r3
 8003792:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003794:	4647      	mov	r7, r8
 8003796:	e039      	b.n	800380c <HAL_SPI_TransmitReceive+0x242>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003798:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800379e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037a0:	3301      	adds	r3, #1
 80037a2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80037a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80037ac:	4647      	mov	r7, r8
 80037ae:	e02d      	b.n	800380c <HAL_SPI_TransmitReceive+0x242>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b0:	6821      	ldr	r1, [r4, #0]
 80037b2:	684a      	ldr	r2, [r1, #4]
 80037b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037b8:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80037ba:	461f      	mov	r7, r3
 80037bc:	e00c      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x20e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80037c0:	7b12      	ldrb	r2, [r2, #12]
 80037c2:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80037c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037c6:	3201      	adds	r2, #1
 80037c8:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80037ca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037ce:	3a01      	subs	r2, #1
 80037d0:	b292      	uxth	r2, r2
 80037d2:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 80037d6:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037d8:	f7fe fa5e 	bl	8001c98 <HAL_GetTick>
 80037dc:	1b80      	subs	r0, r0, r6
 80037de:	42a8      	cmp	r0, r5
 80037e0:	d336      	bcc.n	8003850 <HAL_SPI_TransmitReceive+0x286>
 80037e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037e6:	d156      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x2cc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	b923      	cbnz	r3, 80037f8 <HAL_SPI_TransmitReceive+0x22e>
 80037ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02f      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x28e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	f012 0f02 	tst.w	r2, #2
 8003800:	d004      	beq.n	800380c <HAL_SPI_TransmitReceive+0x242>
 8003802:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003804:	b292      	uxth	r2, r2
 8003806:	b10a      	cbz	r2, 800380c <HAL_SPI_TransmitReceive+0x242>
 8003808:	2f01      	cmp	r7, #1
 800380a:	d0b5      	beq.n	8003778 <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	6893      	ldr	r3, [r2, #8]
 8003810:	f013 0301 	ands.w	r3, r3, #1
 8003814:	d0e0      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x20e>
 8003816:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800381a:	b289      	uxth	r1, r1
 800381c:	2900      	cmp	r1, #0
 800381e:	d0db      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x20e>
        if (hspi->RxXferCount > 1U)
 8003820:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003824:	b289      	uxth	r1, r1
 8003826:	2901      	cmp	r1, #1
 8003828:	d9c9      	bls.n	80037be <HAL_SPI_TransmitReceive+0x1f4>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800382a:	68d1      	ldr	r1, [r2, #12]
 800382c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800382e:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003830:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003832:	3202      	adds	r2, #2
 8003834:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003836:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800383a:	3a02      	subs	r2, #2
 800383c:	b292      	uxth	r2, r2
 800383e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003842:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003846:	b292      	uxth	r2, r2
 8003848:	2a01      	cmp	r2, #1
 800384a:	d9b1      	bls.n	80037b0 <HAL_SPI_TransmitReceive+0x1e6>
        txallowed = 1U;
 800384c:	461f      	mov	r7, r3
 800384e:	e7c3      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x20e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003850:	2d00      	cmp	r5, #0
 8003852:	d1c9      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x21e>
        errorcode = HAL_TIMEOUT;
 8003854:	2003      	movs	r0, #3
 8003856:	e00a      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003858:	4632      	mov	r2, r6
 800385a:	4629      	mov	r1, r5
 800385c:	4620      	mov	r0, r4
 800385e:	f7ff fe0f 	bl	8003480 <SPI_EndRxTxTransaction>
 8003862:	b120      	cbz	r0, 800386e <HAL_SPI_TransmitReceive+0x2a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003864:	2320      	movs	r3, #32
 8003866:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003868:	2001      	movs	r0, #1
 800386a:	e000      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
    errorcode = HAL_BUSY;
 800386c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800386e:	2301      	movs	r3, #1
 8003870:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003874:	2300      	movs	r3, #0
 8003876:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800387a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800387e:	2002      	movs	r0, #2
 8003880:	e7f5      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
 8003882:	2002      	movs	r0, #2
 8003884:	e7f3      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
    errorcode = HAL_ERROR;
 8003886:	2001      	movs	r0, #1
 8003888:	e7f1      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
 800388a:	2001      	movs	r0, #1
 800388c:	e7ef      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
 800388e:	2001      	movs	r0, #1
 8003890:	e7ed      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
        errorcode = HAL_TIMEOUT;
 8003892:	2003      	movs	r0, #3
 8003894:	e7eb      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
        errorcode = HAL_TIMEOUT;
 8003896:	2003      	movs	r0, #3
 8003898:	e7e9      	b.n	800386e <HAL_SPI_TransmitReceive+0x2a4>
  __HAL_LOCK(hspi);
 800389a:	2002      	movs	r0, #2
 800389c:	e7ed      	b.n	800387a <HAL_SPI_TransmitReceive+0x2b0>
	...

080038a0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d121      	bne.n	80038ee <HAL_TIM_Base_Start+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	6803      	ldr	r3, [r0, #0]
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <HAL_TIM_Base_Start+0x5c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00c      	beq.n	80038d2 <HAL_TIM_Base_Start+0x32>
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d009      	beq.n	80038d2 <HAL_TIM_Base_Start+0x32>
 80038be:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d005      	beq.n	80038d2 <HAL_TIM_Base_Start+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ce:	2000      	movs	r0, #0
 80038d0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d2:	6899      	ldr	r1, [r3, #8]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_TIM_Base_Start+0x60>)
 80038d6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	2a06      	cmp	r2, #6
 80038da:	d00a      	beq.n	80038f2 <HAL_TIM_Base_Start+0x52>
 80038dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80038e0:	d009      	beq.n	80038f6 <HAL_TIM_Base_Start+0x56>
      __HAL_TIM_ENABLE(htim);
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038ea:	2000      	movs	r0, #0
 80038ec:	4770      	bx	lr
    return HAL_ERROR;
 80038ee:	2001      	movs	r0, #1
 80038f0:	4770      	bx	lr
  return HAL_OK;
 80038f2:	2000      	movs	r0, #0
 80038f4:	4770      	bx	lr
 80038f6:	2000      	movs	r0, #0
}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	00010007 	.word	0x00010007

08003904 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003904:	4770      	bx	lr

08003906 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_IRQHandler>:
{
 800390c:	b510      	push	{r4, lr}
 800390e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003910:	6803      	ldr	r3, [r0, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	f012 0f02 	tst.w	r2, #2
 8003918:	d011      	beq.n	800393e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	f012 0f02 	tst.w	r2, #2
 8003920:	d00d      	beq.n	800393e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003922:	f06f 0202 	mvn.w	r2, #2
 8003926:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003928:	2301      	movs	r3, #1
 800392a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	6803      	ldr	r3, [r0, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f013 0f03 	tst.w	r3, #3
 8003934:	d079      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003936:	f7ff ffe6 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	2300      	movs	r3, #0
 800393c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	f012 0f04 	tst.w	r2, #4
 8003946:	d012      	beq.n	800396e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	f012 0f04 	tst.w	r2, #4
 800394e:	d00e      	beq.n	800396e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003950:	f06f 0204 	mvn.w	r2, #4
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003956:	2302      	movs	r3, #2
 8003958:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003962:	d068      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003964:	4620      	mov	r0, r4
 8003966:	f7ff ffce 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	2300      	movs	r3, #0
 800396c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	f012 0f08 	tst.w	r2, #8
 8003976:	d012      	beq.n	800399e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	f012 0f08 	tst.w	r2, #8
 800397e:	d00e      	beq.n	800399e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003980:	f06f 0208 	mvn.w	r2, #8
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003986:	2304      	movs	r3, #4
 8003988:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f013 0f03 	tst.w	r3, #3
 8003992:	d057      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003994:	4620      	mov	r0, r4
 8003996:	f7ff ffb6 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	2300      	movs	r3, #0
 800399c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	f012 0f10 	tst.w	r2, #16
 80039a6:	d012      	beq.n	80039ce <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	f012 0f10 	tst.w	r2, #16
 80039ae:	d00e      	beq.n	80039ce <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b6:	2308      	movs	r3, #8
 80039b8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f413 7f40 	tst.w	r3, #768	; 0x300
 80039c2:	d046      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7ff ff9e 	bl	8003906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	2300      	movs	r3, #0
 80039cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	f012 0f01 	tst.w	r2, #1
 80039d6:	d003      	beq.n	80039e0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	f012 0f01 	tst.w	r2, #1
 80039de:	d13f      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039f0:	d13d      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a02:	d13b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a14:	d139      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	f012 0f20 	tst.w	r2, #32
 8003a1e:	d003      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	f012 0f20 	tst.w	r2, #32
 8003a26:	d137      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x18c>
}
 8003a28:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	f7ff ff6b 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff ff6a 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a34:	e781      	b.n	800393a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7ff ff64 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff ff63 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a42:	e792      	b.n	800396a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7ff ff5d 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7ff ff5c 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a50:	e7a3      	b.n	800399a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff ff56 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff ff55 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a5e:	e7b4      	b.n	80039ca <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a60:	f06f 0201 	mvn.w	r2, #1
 8003a64:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7fd fd78 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
 8003a6c:	e7b8      	b.n	80039e0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 f8e0 	bl	8003c3a <HAL_TIMEx_BreakCallback>
 8003a7a:	e7ba      	b.n	80039f2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 f8da 	bl	8003c3c <HAL_TIMEx_Break2Callback>
 8003a88:	e7bc      	b.n	8003a04 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff ff3a 	bl	800390a <HAL_TIM_TriggerCallback>
 8003a96:	e7be      	b.n	8003a16 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a98:	f06f 0220 	mvn.w	r2, #32
 8003a9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f000 f8ca 	bl	8003c38 <HAL_TIMEx_CommutCallback>
}
 8003aa4:	e7c0      	b.n	8003a28 <HAL_TIM_IRQHandler+0x11c>
	...

08003aa8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aaa:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <TIM_Base_SetConfig+0xbc>)
 8003aac:	4290      	cmp	r0, r2
 8003aae:	d042      	beq.n	8003b36 <TIM_Base_SetConfig+0x8e>
 8003ab0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ab4:	d02d      	beq.n	8003b12 <TIM_Base_SetConfig+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003aba:	4290      	cmp	r0, r2
 8003abc:	d01b      	beq.n	8003af6 <TIM_Base_SetConfig+0x4e>
 8003abe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ac2:	4290      	cmp	r0, r2
 8003ac4:	d009      	beq.n	8003ada <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aca:	694a      	ldr	r2, [r1, #20]
 8003acc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003ace:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad0:	688b      	ldr	r3, [r1, #8]
 8003ad2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	680b      	ldr	r3, [r1, #0]
 8003ad6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad8:	e040      	b.n	8003b5c <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ade:	68ca      	ldr	r2, [r1, #12]
 8003ae0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae6:	694a      	ldr	r2, [r1, #20]
 8003ae8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003aea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	688b      	ldr	r3, [r1, #8]
 8003aee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003af0:	680b      	ldr	r3, [r1, #0]
 8003af2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af4:	e030      	b.n	8003b58 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afa:	68ca      	ldr	r2, [r1, #12]
 8003afc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b02:	694a      	ldr	r2, [r1, #20]
 8003b04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b08:	688b      	ldr	r3, [r1, #8]
 8003b0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	680b      	ldr	r3, [r1, #0]
 8003b0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b10:	e022      	b.n	8003b58 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b16:	684a      	ldr	r2, [r1, #4]
 8003b18:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	68ca      	ldr	r2, [r1, #12]
 8003b20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	694a      	ldr	r2, [r1, #20]
 8003b28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	688b      	ldr	r3, [r1, #8]
 8003b2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b30:	680b      	ldr	r3, [r1, #0]
 8003b32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	e012      	b.n	8003b5c <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b3a:	684a      	ldr	r2, [r1, #4]
 8003b3c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b42:	68ca      	ldr	r2, [r1, #12]
 8003b44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	694a      	ldr	r2, [r1, #20]
 8003b4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b50:	688b      	ldr	r3, [r1, #8]
 8003b52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b54:	680b      	ldr	r3, [r1, #0]
 8003b56:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b58:	690b      	ldr	r3, [r1, #16]
 8003b5a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	6143      	str	r3, [r0, #20]
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00

08003b68 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003b68:	b360      	cbz	r0, 8003bc4 <HAL_TIM_Base_Init+0x5c>
{
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b72:	b313      	cbz	r3, 8003bba <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b80:	f7ff ff92 	bl	8003aa8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003b8e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003baa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003bae:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003bb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003bb6:	2000      	movs	r0, #0
}
 8003bb8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003bba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003bbe:	f7fd ff5f 	bl	8001a80 <HAL_TIM_Base_MspInit>
 8003bc2:	e7d7      	b.n	8003b74 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003bc4:	2001      	movs	r0, #1
}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d02f      	beq.n	8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8003bd0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bde:	6802      	ldr	r2, [r0, #0]
 8003be0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be2:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003be4:	4d13      	ldr	r5, [pc, #76]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003be6:	42aa      	cmp	r2, r5
 8003be8:	d01d      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bee:	680d      	ldr	r5, [r1, #0]
 8003bf0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf2:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf4:	6803      	ldr	r3, [r0, #0]
 8003bf6:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d006      	beq.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d003      	beq.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8003c02:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d104      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c0a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0e:	688a      	ldr	r2, [r1, #8]
 8003c10:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c12:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003c20:	4618      	mov	r0, r3
}
 8003c22:	bc30      	pop	{r4, r5}
 8003c24:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c2a:	684d      	ldr	r5, [r1, #4]
 8003c2c:	432b      	orrs	r3, r5
 8003c2e:	e7dc      	b.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003c30:	2002      	movs	r0, #2
}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00

08003c38 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c3c:	4770      	bx	lr
	...

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c44:	6801      	ldr	r1, [r0, #0]
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c46:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c48:	68a3      	ldr	r3, [r4, #8]
 8003c4a:	6922      	ldr	r2, [r4, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	6962      	ldr	r2, [r4, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	69e2      	ldr	r2, [r4, #28]
 8003c54:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c56:	4a94      	ldr	r2, [pc, #592]	; (8003ea8 <UART_SetConfig+0x268>)
 8003c58:	4002      	ands	r2, r0
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6853      	ldr	r3, [r2, #4]
 8003c62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c66:	68e1      	ldr	r1, [r4, #12]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	4b8e      	ldr	r3, [pc, #568]	; (8003eac <UART_SetConfig+0x26c>)
 8003c72:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c74:	bf1c      	itt	ne
 8003c76:	6a23      	ldrne	r3, [r4, #32]
 8003c78:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7a:	6893      	ldr	r3, [r2, #8]
 8003c7c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	4a8a      	ldr	r2, [pc, #552]	; (8003eb0 <UART_SetConfig+0x270>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d019      	beq.n	8003cc0 <UART_SetConfig+0x80>
 8003c8c:	4a89      	ldr	r2, [pc, #548]	; (8003eb4 <UART_SetConfig+0x274>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d028      	beq.n	8003ce4 <UART_SetConfig+0xa4>
 8003c92:	4a86      	ldr	r2, [pc, #536]	; (8003eac <UART_SetConfig+0x26c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d03c      	beq.n	8003d12 <UART_SetConfig+0xd2>
 8003c98:	2210      	movs	r2, #16
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9a:	69e0      	ldr	r0, [r4, #28]
 8003c9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ca0:	f000 809b 	beq.w	8003dda <UART_SetConfig+0x19a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ca4:	2a08      	cmp	r2, #8
 8003ca6:	f200 80f2 	bhi.w	8003e8e <UART_SetConfig+0x24e>
 8003caa:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003cae:	00c4      	.short	0x00c4
 8003cb0:	00e000da 	.word	0x00e000da
 8003cb4:	00dd00f0 	.word	0x00dd00f0
 8003cb8:	00f000f0 	.word	0x00f000f0
 8003cbc:	00c100f0 	.word	0x00c100f0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003cc4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003cc8:	f002 0203 	and.w	r2, r2, #3
 8003ccc:	2a03      	cmp	r2, #3
 8003cce:	d807      	bhi.n	8003ce0 <UART_SetConfig+0xa0>
 8003cd0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003cd4:	00040058 	.word	0x00040058
 8003cd8:	00e500e3 	.word	0x00e500e3
 8003cdc:	2204      	movs	r2, #4
 8003cde:	e7dc      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	e7da      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003ce4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8003ce8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003cec:	f002 020c 	and.w	r2, r2, #12
 8003cf0:	2a0c      	cmp	r2, #12
 8003cf2:	d80c      	bhi.n	8003d0e <UART_SetConfig+0xce>
 8003cf4:	e8df f002 	tbb	[pc, r2]
 8003cf8:	0b0b0b62 	.word	0x0b0b0b62
 8003cfc:	0b0b0b07 	.word	0x0b0b0b07
 8003d00:	0b0b0bd5 	.word	0x0b0b0bd5
 8003d04:	09          	.byte	0x09
 8003d05:	00          	.byte	0x00
 8003d06:	2204      	movs	r2, #4
 8003d08:	e7c7      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	e7c5      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003d0e:	2210      	movs	r2, #16
 8003d10:	e7c3      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003d12:	4b69      	ldr	r3, [pc, #420]	; (8003eb8 <UART_SetConfig+0x278>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d20:	d056      	beq.n	8003dd0 <UART_SetConfig+0x190>
 8003d22:	d80a      	bhi.n	8003d3a <UART_SetConfig+0xfa>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d04d      	beq.n	8003dc4 <UART_SetConfig+0x184>
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	bf18      	it	ne
 8003d2e:	2001      	movne	r0, #1
 8003d30:	f040 8093 	bne.w	8003e5a <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d34:	f7fe fc12 	bl	800255c <HAL_RCC_GetSysClockFreq>
        break;
 8003d38:	e046      	b.n	8003dc8 <UART_SetConfig+0x188>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d3e:	d11f      	bne.n	8003d80 <UART_SetConfig+0x140>
 8003d40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d44:	6862      	ldr	r2, [r4, #4]
 8003d46:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003d4a:	4283      	cmp	r3, r0
 8003d4c:	f200 8093 	bhi.w	8003e76 <UART_SetConfig+0x236>
 8003d50:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003d54:	f200 8091 	bhi.w	8003e7a <UART_SetConfig+0x23a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d58:	0e01      	lsrs	r1, r0, #24
 8003d5a:	0200      	lsls	r0, r0, #8
 8003d5c:	0853      	lsrs	r3, r2, #1
 8003d5e:	18c0      	adds	r0, r0, r3
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f141 0100 	adc.w	r1, r1, #0
 8003d68:	f7fc fd38 	bl	80007dc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d6c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003d70:	4b52      	ldr	r3, [pc, #328]	; (8003ebc <UART_SetConfig+0x27c>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f200 8083 	bhi.w	8003e7e <UART_SetConfig+0x23e>
          huart->Instance->BRR = usartdiv;
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	60d8      	str	r0, [r3, #12]
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e06c      	b.n	8003e5a <UART_SetConfig+0x21a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d80:	2001      	movs	r0, #1
 8003d82:	e06a      	b.n	8003e5a <UART_SetConfig+0x21a>
 8003d84:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d86:	4949      	ldr	r1, [pc, #292]	; (8003eac <UART_SetConfig+0x26c>)
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d186      	bne.n	8003c9a <UART_SetConfig+0x5a>
    switch (clocksource)
 8003d8c:	2a08      	cmp	r2, #8
 8003d8e:	d870      	bhi.n	8003e72 <UART_SetConfig+0x232>
 8003d90:	a301      	add	r3, pc, #4	; (adr r3, 8003d98 <UART_SetConfig+0x158>)
 8003d92:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003e73 	.word	0x08003e73
 8003da0:	08003dc1 	.word	0x08003dc1
 8003da4:	08003e73 	.word	0x08003e73
 8003da8:	08003d35 	.word	0x08003d35
 8003dac:	08003e73 	.word	0x08003e73
 8003db0:	08003e73 	.word	0x08003e73
 8003db4:	08003e73 	.word	0x08003e73
 8003db8:	08003dd5 	.word	0x08003dd5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	e7e2      	b.n	8003d86 <UART_SetConfig+0x146>
    switch (clocksource)
 8003dc0:	483f      	ldr	r0, [pc, #252]	; (8003ec0 <UART_SetConfig+0x280>)
 8003dc2:	e7bf      	b.n	8003d44 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7ff f82c 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1bb      	bne.n	8003d44 <UART_SetConfig+0x104>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e044      	b.n	8003e5a <UART_SetConfig+0x21a>
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	483b      	ldr	r0, [pc, #236]	; (8003ec0 <UART_SetConfig+0x280>)
 8003dd2:	e7b7      	b.n	8003d44 <UART_SetConfig+0x104>
        pclk = (uint32_t) LSE_VALUE;
 8003dd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003dd8:	e7b4      	b.n	8003d44 <UART_SetConfig+0x104>
    switch (clocksource)
 8003dda:	2a08      	cmp	r2, #8
 8003ddc:	d851      	bhi.n	8003e82 <UART_SetConfig+0x242>
 8003dde:	e8df f002 	tbb	[pc, r2]
 8003de2:	1f05      	.short	0x1f05
 8003de4:	50225025 	.word	0x50225025
 8003de8:	5050      	.short	0x5050
 8003dea:	09          	.byte	0x09
 8003deb:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7ff f818 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d048      	beq.n	8003e86 <UART_SetConfig+0x246>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003df4:	6862      	ldr	r2, [r4, #4]
 8003df6:	0853      	lsrs	r3, r2, #1
 8003df8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003dfc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	f1a0 0210 	sub.w	r2, r0, #16
 8003e04:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d83e      	bhi.n	8003e8a <UART_SetConfig+0x24a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0c:	f020 030f 	bic.w	r3, r0, #15
 8003e10:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003e12:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e14:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003e18:	4318      	orrs	r0, r3
 8003e1a:	60d0      	str	r0, [r2, #12]
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e01c      	b.n	8003e5a <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff f810 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
        break;
 8003e24:	e7e4      	b.n	8003df0 <UART_SetConfig+0x1b0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e26:	f7fe fb99 	bl	800255c <HAL_RCC_GetSysClockFreq>
        break;
 8003e2a:	e7e1      	b.n	8003df0 <UART_SetConfig+0x1b0>
        pclk = (uint32_t) HSI_VALUE;
 8003e2c:	4824      	ldr	r0, [pc, #144]	; (8003ec0 <UART_SetConfig+0x280>)
 8003e2e:	e7e1      	b.n	8003df4 <UART_SetConfig+0x1b4>
    switch (clocksource)
 8003e30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e34:	e002      	b.n	8003e3c <UART_SetConfig+0x1fc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e36:	f7fe fff3 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8003e3a:	b350      	cbz	r0, 8003e92 <UART_SetConfig+0x252>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e42:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	f1a0 0210 	sub.w	r2, r0, #16
 8003e4a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d821      	bhi.n	8003e96 <UART_SetConfig+0x256>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	b280      	uxth	r0, r0
 8003e56:	60d8      	str	r0, [r3, #12]
 8003e58:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003e5e:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8003e60:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e62:	f7fe ffef 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
        break;
 8003e66:	e7e8      	b.n	8003e3a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e68:	f7fe fb78 	bl	800255c <HAL_RCC_GetSysClockFreq>
        break;
 8003e6c:	e7e5      	b.n	8003e3a <UART_SetConfig+0x1fa>
        pclk = (uint32_t) HSI_VALUE;
 8003e6e:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <UART_SetConfig+0x280>)
 8003e70:	e7e4      	b.n	8003e3c <UART_SetConfig+0x1fc>
    switch (clocksource)
 8003e72:	2001      	movs	r0, #1
 8003e74:	e7f1      	b.n	8003e5a <UART_SetConfig+0x21a>
        ret = HAL_ERROR;
 8003e76:	2001      	movs	r0, #1
 8003e78:	e7ef      	b.n	8003e5a <UART_SetConfig+0x21a>
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	e7ed      	b.n	8003e5a <UART_SetConfig+0x21a>
          ret = HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7eb      	b.n	8003e5a <UART_SetConfig+0x21a>
    switch (clocksource)
 8003e82:	2001      	movs	r0, #1
 8003e84:	e7e9      	b.n	8003e5a <UART_SetConfig+0x21a>
 8003e86:	2000      	movs	r0, #0
 8003e88:	e7e7      	b.n	8003e5a <UART_SetConfig+0x21a>
        ret = HAL_ERROR;
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	e7e5      	b.n	8003e5a <UART_SetConfig+0x21a>
    switch (clocksource)
 8003e8e:	2001      	movs	r0, #1
 8003e90:	e7e3      	b.n	8003e5a <UART_SetConfig+0x21a>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e7e1      	b.n	8003e5a <UART_SetConfig+0x21a>
        ret = HAL_ERROR;
 8003e96:	2001      	movs	r0, #1
 8003e98:	e7df      	b.n	8003e5a <UART_SetConfig+0x21a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	e6fd      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	e6fb      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	e6f9      	b.n	8003c9a <UART_SetConfig+0x5a>
 8003ea6:	bf00      	nop
 8003ea8:	efff69f3 	.word	0xefff69f3
 8003eac:	40008000 	.word	0x40008000
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40004400 	.word	0x40004400
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	000ffcff 	.word	0x000ffcff
 8003ec0:	00f42400 	.word	0x00f42400

08003ec4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ec6:	f013 0f01 	tst.w	r3, #1
 8003eca:	d006      	beq.n	8003eda <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ecc:	6802      	ldr	r2, [r0, #0]
 8003ece:	6853      	ldr	r3, [r2, #4]
 8003ed0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ed4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003edc:	f013 0f02 	tst.w	r3, #2
 8003ee0:	d006      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee2:	6802      	ldr	r2, [r0, #0]
 8003ee4:	6853      	ldr	r3, [r2, #4]
 8003ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ef2:	f013 0f04 	tst.w	r3, #4
 8003ef6:	d006      	beq.n	8003f06 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ef8:	6802      	ldr	r2, [r0, #0]
 8003efa:	6853      	ldr	r3, [r2, #4]
 8003efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f00:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003f02:	430b      	orrs	r3, r1
 8003f04:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f08:	f013 0f08 	tst.w	r3, #8
 8003f0c:	d006      	beq.n	8003f1c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f0e:	6802      	ldr	r2, [r0, #0]
 8003f10:	6853      	ldr	r3, [r2, #4]
 8003f12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f16:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f1e:	f013 0f10 	tst.w	r3, #16
 8003f22:	d006      	beq.n	8003f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f24:	6802      	ldr	r2, [r0, #0]
 8003f26:	6893      	ldr	r3, [r2, #8]
 8003f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f2c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f34:	f013 0f20 	tst.w	r3, #32
 8003f38:	d006      	beq.n	8003f48 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3a:	6802      	ldr	r2, [r0, #0]
 8003f3c:	6893      	ldr	r3, [r2, #8]
 8003f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f42:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f50:	6802      	ldr	r2, [r0, #0]
 8003f52:	6853      	ldr	r3, [r2, #4]
 8003f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f64:	d00b      	beq.n	8003f7e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f6c:	d006      	beq.n	8003f7c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6e:	6802      	ldr	r2, [r0, #0]
 8003f70:	6853      	ldr	r3, [r2, #4]
 8003f72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6053      	str	r3, [r2, #4]
  }
}
 8003f7c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f7e:	6802      	ldr	r2, [r0, #0]
 8003f80:	6853      	ldr	r3, [r2, #4]
 8003f82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f86:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6053      	str	r3, [r2, #4]
 8003f8c:	e7eb      	b.n	8003f66 <UART_AdvFeatureConfig+0xa2>

08003f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f92:	4680      	mov	r8, r0
 8003f94:	460e      	mov	r6, r1
 8003f96:	4615      	mov	r5, r2
 8003f98:	4699      	mov	r9, r3
 8003f9a:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	f8d8 2000 	ldr.w	r2, [r8]
 8003fa0:	69d4      	ldr	r4, [r2, #28]
 8003fa2:	ea36 0304 	bics.w	r3, r6, r4
 8003fa6:	bf0c      	ite	eq
 8003fa8:	f04f 0c01 	moveq.w	ip, #1
 8003fac:	f04f 0c00 	movne.w	ip, #0
 8003fb0:	45ac      	cmp	ip, r5
 8003fb2:	d15a      	bne.n	800406a <UART_WaitOnFlagUntilTimeout+0xdc>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003fb8:	d0f2      	beq.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fd fe6d 	bl	8001c98 <HAL_GetTick>
 8003fbe:	eba0 0009 	sub.w	r0, r0, r9
 8003fc2:	42b8      	cmp	r0, r7
 8003fc4:	d830      	bhi.n	8004028 <UART_WaitOnFlagUntilTimeout+0x9a>
 8003fc6:	b37f      	cbz	r7, 8004028 <UART_WaitOnFlagUntilTimeout+0x9a>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	f012 0f04 	tst.w	r2, #4
 8003fd2:	d0e3      	beq.n	8003f9c <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003fda:	d0df      	beq.n	8003f9c <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	e852 3f00 	ldrex	r3, [r2]
 8003fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	e842 3100 	strex	r1, r3, [r2]
 8003ff2:	2900      	cmp	r1, #0
 8003ff4:	d1f5      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x54>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	f102 0308 	add.w	r3, r2, #8
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	3208      	adds	r2, #8
 8004008:	e842 3100 	strex	r1, r3, [r2]
 800400c:	2900      	cmp	r1, #0
 800400e:	d1f2      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8004010:	2320      	movs	r3, #32
 8004012:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004016:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800401a:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401e:	2300      	movs	r3, #0
 8004020:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74

          return HAL_TIMEOUT;
 8004024:	2003      	movs	r0, #3
 8004026:	e021      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004028:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	e852 3f00 	ldrex	r3, [r2]
 8004030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	e842 3100 	strex	r1, r3, [r2]
 8004038:	2900      	cmp	r1, #0
 800403a:	d1f5      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	f102 0308 	add.w	r3, r2, #8
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	3208      	adds	r2, #8
 800404e:	e842 3100 	strex	r1, r3, [r2]
 8004052:	2900      	cmp	r1, #0
 8004054:	d1f2      	bne.n	800403c <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8004056:	2320      	movs	r3, #32
 8004058:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8004060:	2300      	movs	r3, #0
 8004062:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
        return HAL_TIMEOUT;
 8004066:	2003      	movs	r0, #3
 8004068:	e000      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xde>
        }
      }
    }
  }
  return HAL_OK;
 800406a:	2000      	movs	r0, #0
}
 800406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004070 <HAL_UART_Transmit>:
{
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004078:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800407a:	2b20      	cmp	r3, #32
 800407c:	d15d      	bne.n	800413a <HAL_UART_Transmit+0xca>
 800407e:	4604      	mov	r4, r0
 8004080:	460d      	mov	r5, r1
 8004082:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004084:	2900      	cmp	r1, #0
 8004086:	d05c      	beq.n	8004142 <HAL_UART_Transmit+0xd2>
 8004088:	2a00      	cmp	r2, #0
 800408a:	d05c      	beq.n	8004146 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 800408c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004090:	2b01      	cmp	r3, #1
 8004092:	d05a      	beq.n	800414a <HAL_UART_Transmit+0xda>
 8004094:	2301      	movs	r3, #1
 8004096:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a0:	2321      	movs	r3, #33	; 0x21
 80040a2:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80040a4:	f7fd fdf8 	bl	8001c98 <HAL_GetTick>
 80040a8:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80040aa:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80040ae:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d00d      	beq.n	80040d6 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80040ba:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80040be:	2300      	movs	r3, #0
 80040c0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80040c4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	b35b      	cbz	r3, 8004124 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040cc:	f04f 0900 	mov.w	r9, #0
 80040d0:	f04f 0880 	mov.w	r8, #128	; 0x80
 80040d4:	e017      	b.n	8004106 <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d6:	6923      	ldr	r3, [r4, #16]
 80040d8:	b913      	cbnz	r3, 80040e0 <HAL_UART_Transmit+0x70>
      pdata16bits = (const uint16_t *) pData;
 80040da:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80040dc:	2500      	movs	r5, #0
 80040de:	e7ee      	b.n	80040be <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 80040e0:	f04f 0a00 	mov.w	sl, #0
 80040e4:	e7eb      	b.n	80040be <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80040ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f0:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80040f2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80040f6:	3a01      	subs	r2, #1
 80040f8:	b292      	uxth	r2, r2
 80040fa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040fe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004102:	b29b      	uxth	r3, r3
 8004104:	b173      	cbz	r3, 8004124 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	9600      	str	r6, [sp, #0]
 8004108:	463b      	mov	r3, r7
 800410a:	464a      	mov	r2, r9
 800410c:	4641      	mov	r1, r8
 800410e:	4620      	mov	r0, r4
 8004110:	f7ff ff3d 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8004114:	b9d8      	cbnz	r0, 800414e <HAL_UART_Transmit+0xde>
      if (pdata8bits == NULL)
 8004116:	2d00      	cmp	r5, #0
 8004118:	d0e5      	beq.n	80040e6 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004122:	e7e6      	b.n	80040f2 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004124:	9600      	str	r6, [sp, #0]
 8004126:	463b      	mov	r3, r7
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff ff2e 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8004132:	b970      	cbnz	r0, 8004152 <HAL_UART_Transmit+0xe2>
    huart->gState = HAL_UART_STATE_READY;
 8004134:	2320      	movs	r3, #32
 8004136:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8004138:	e000      	b.n	800413c <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 800413a:	2002      	movs	r0, #2
}
 800413c:	b002      	add	sp, #8
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8004142:	2001      	movs	r0, #1
 8004144:	e7fa      	b.n	800413c <HAL_UART_Transmit+0xcc>
 8004146:	2001      	movs	r0, #1
 8004148:	e7f8      	b.n	800413c <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800414a:	2002      	movs	r0, #2
 800414c:	e7f6      	b.n	800413c <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 800414e:	2003      	movs	r0, #3
 8004150:	e7f4      	b.n	800413c <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8004152:	2003      	movs	r0, #3
 8004154:	e7f2      	b.n	800413c <HAL_UART_Transmit+0xcc>

08004156 <UART_CheckIdleState>:
{
 8004156:	b530      	push	{r4, r5, lr}
 8004158:	b083      	sub	sp, #12
 800415a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	2300      	movs	r3, #0
 800415e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004162:	f7fd fd99 	bl	8001c98 <HAL_GetTick>
 8004166:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004168:	6822      	ldr	r2, [r4, #0]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	f012 0f08 	tst.w	r2, #8
 8004170:	d10d      	bne.n	800418e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f013 0f04 	tst.w	r3, #4
 800417a:	d116      	bne.n	80041aa <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 800417c:	2320      	movs	r3, #32
 800417e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	2000      	movs	r0, #0
 8004184:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004186:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 800418a:	b003      	add	sp, #12
 800418c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800418e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4603      	mov	r3, r0
 8004196:	2200      	movs	r2, #0
 8004198:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff fef6 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d0e5      	beq.n	8004172 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80041a6:	2003      	movs	r0, #3
 80041a8:	e7ef      	b.n	800418a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	462b      	mov	r3, r5
 80041b2:	2200      	movs	r2, #0
 80041b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff fee8 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0dc      	beq.n	800417c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80041c2:	2003      	movs	r0, #3
 80041c4:	e7e1      	b.n	800418a <UART_CheckIdleState+0x34>

080041c6 <HAL_UART_Init>:
  if (huart == NULL)
 80041c6:	b368      	cbz	r0, 8004224 <HAL_UART_Init+0x5e>
{
 80041c8:	b510      	push	{r4, lr}
 80041ca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80041cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80041ce:	b303      	cbz	r3, 8004212 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	2324      	movs	r3, #36	; 0x24
 80041d2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041de:	4620      	mov	r0, r4
 80041e0:	f7ff fd2e 	bl	8003c40 <UART_SetConfig>
 80041e4:	2801      	cmp	r0, #1
 80041e6:	d013      	beq.n	8004210 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ea:	b9bb      	cbnz	r3, 800421c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	6853      	ldr	r3, [r2, #4]
 80041f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80041f4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	6893      	ldr	r3, [r2, #8]
 80041fa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80041fe:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800420a:	4620      	mov	r0, r4
 800420c:	f7ff ffa3 	bl	8004156 <UART_CheckIdleState>
}
 8004210:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004212:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004216:	f7fd fc63 	bl	8001ae0 <HAL_UART_MspInit>
 800421a:	e7d9      	b.n	80041d0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800421c:	4620      	mov	r0, r4
 800421e:	f7ff fe51 	bl	8003ec4 <UART_AdvFeatureConfig>
 8004222:	e7e3      	b.n	80041ec <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004224:	2001      	movs	r0, #1
}
 8004226:	4770      	bx	lr

08004228 <__libc_init_array>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4d0d      	ldr	r5, [pc, #52]	; (8004260 <__libc_init_array+0x38>)
 800422c:	4c0d      	ldr	r4, [pc, #52]	; (8004264 <__libc_init_array+0x3c>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	2600      	movs	r6, #0
 8004234:	42a6      	cmp	r6, r4
 8004236:	d109      	bne.n	800424c <__libc_init_array+0x24>
 8004238:	4d0b      	ldr	r5, [pc, #44]	; (8004268 <__libc_init_array+0x40>)
 800423a:	4c0c      	ldr	r4, [pc, #48]	; (800426c <__libc_init_array+0x44>)
 800423c:	f000 f82e 	bl	800429c <_init>
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	2600      	movs	r6, #0
 8004246:	42a6      	cmp	r6, r4
 8004248:	d105      	bne.n	8004256 <__libc_init_array+0x2e>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004250:	4798      	blx	r3
 8004252:	3601      	adds	r6, #1
 8004254:	e7ee      	b.n	8004234 <__libc_init_array+0xc>
 8004256:	f855 3b04 	ldr.w	r3, [r5], #4
 800425a:	4798      	blx	r3
 800425c:	3601      	adds	r6, #1
 800425e:	e7f2      	b.n	8004246 <__libc_init_array+0x1e>
 8004260:	08004394 	.word	0x08004394
 8004264:	08004394 	.word	0x08004394
 8004268:	08004394 	.word	0x08004394
 800426c:	08004398 	.word	0x08004398

08004270 <memcpy>:
 8004270:	440a      	add	r2, r1
 8004272:	4291      	cmp	r1, r2
 8004274:	f100 33ff 	add.w	r3, r0, #4294967295
 8004278:	d100      	bne.n	800427c <memcpy+0xc>
 800427a:	4770      	bx	lr
 800427c:	b510      	push	{r4, lr}
 800427e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004286:	4291      	cmp	r1, r2
 8004288:	d1f9      	bne.n	800427e <memcpy+0xe>
 800428a:	bd10      	pop	{r4, pc}

0800428c <memset>:
 800428c:	4402      	add	r2, r0
 800428e:	4603      	mov	r3, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	f803 1b01 	strb.w	r1, [r3], #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <_init>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr

080042a8 <_fini>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr
